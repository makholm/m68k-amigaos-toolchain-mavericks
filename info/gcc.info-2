This is gcc.info, produced by makeinfo version 4.13 from
/Users/lasse/projects/amiga/m68k-amigaos-toolchain/sources/gcc-2.95.3/gcc/gcc.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* gcc: (gcc).                  The GNU Compiler Collection.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of the GNU compiler.

   Published by the Free Software Foundation 59 Temple Place - Suite 330
Boston, MA 02111-1307 USA

   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Funding
for Free Software" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Funding for Free Software", and this permission notice,
may be included in translations approved by the Free Software Foundation
instead of in the original English.


File: gcc.info,  Node: Installation,  Next: C Extensions,  Prev: Invoking GCC,  Up: Top

3 Installing GNU CC
*******************

* Menu:

* Configuration Files::  Files created by running `configure'.
* Configurations::    Configurations Supported by GNU CC.
* Other Dir::     Compiling in a separate directory (not where the source is).
* Cross-Compiler::   Building and installing a cross-compiler.
* Sun Install::   See below for installation on the Sun.
* VMS Install::   See below for installation on VMS.
* Collect2::	  How `collect2' works; how it finds `ld'.
* Header Dirs::   Understanding the standard header file directories.

   Here is the procedure for installing GNU CC on a GNU or Unix system.
See *note VMS Install::, for VMS systems.  In this section we assume you
compile in the same directory that contains the source files; see *note
Other Dir::, to find out how to compile in a separate directory on Unix
systems.

   You cannot install GNU C by itself on MSDOS; it will not compile
under any MSDOS compiler except itself.  You need to get the complete
compilation package DJGPP, which includes binaries as well as sources,
and includes all the necessary compilation tools and libraries.

  1. If you have built GNU CC previously in the same directory for a
     different target machine, do `make distclean' to delete all files
     that might be invalid.  One of the files this deletes is
     `Makefile'; if `make distclean' complains that `Makefile' does not
     exist, it probably means that the directory is already suitably
     clean.

  2. On a System V release 4 system, make sure `/usr/bin' precedes
     `/usr/ucb' in `PATH'.  The `cc' command in `/usr/ucb' uses
     libraries which have bugs.

  3. Make sure the Bison parser generator is installed.  (This is
     unnecessary if the Bison output files `c-parse.c' and `cexp.c' are
     more recent than `c-parse.y' and `cexp.y' and you do not plan to
     change the `.y' files.)

     Bison versions older than Sept 8, 1988 will produce incorrect
     output for `c-parse.c'.

  4. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the build directory
     under the names `as', `ld' or whatever is appropriate.  This will
     enable the compiler to find the proper tools for compilation of
     the program `enquire'.

     Alternatively, you can do subsequent compilation using a value of
     the `PATH' environment variable such that the necessary GNU tools
     come before the standard system tools.

  5. Specify the host, build and target machine configurations.  You do
     this when you run the `configure' script.

     The "build" machine is the system which you are using, the "host"
     machine is the system where you want to run the resulting compiler
     (normally the build machine), and the "target" machine is the
     system for which you want the compiler to generate code.

     If you are building a compiler to produce code for the machine it
     runs on (a native compiler), you normally do not need to specify
     any operands to `configure'; it will try to guess the type of
     machine you are on and use that as the build, host and target
     machines.  So you don't need to specify a configuration when
     building a native compiler unless `configure' cannot figure out
     what your configuration is or guesses wrong.

     In those cases, specify the build machine's "configuration name"
     with the `--host' option; the host and target will default to be
     the same as the host machine.  (If you are building a
     cross-compiler, see *note Cross-Compiler::.)

     Here is an example:

          ./configure --host=sparc-sun-sunos4.1

     A configuration name may be canonical or it may be more or less
     abbreviated.

     A canonical configuration name has three parts, separated by
     dashes.  It looks like this: `CPU-COMPANY-SYSTEM'.  (The three
     parts may themselves contain dashes; `configure' can figure out
     which dashes serve which purpose.)  For example,
     `m68k-sun-sunos4.1' specifies a Sun 3.

     You can also replace parts of the configuration by nicknames or
     aliases.  For example, `sun3' stands for `m68k-sun', so
     `sun3-sunos4.1' is another way to specify a Sun 3.  You can also
     use simply `sun3-sunos', since the version of SunOS is assumed by
     default to be version 4.

     You can specify a version number after any of the system types,
     and some of the CPU types.  In most cases, the version is
     irrelevant, and will be ignored.  So you might as well specify the
     version if you know it.

     See *note Configurations::, for a list of supported configuration
     names and notes on many of the configurations.  You should check
     the notes in that section before proceeding any further with the
     installation of GNU CC.

  6. When running `configure', you may also need to specify certain
     additional options that describe variant hardware and software
     configurations.  These are `--with-gnu-as', `--with-gnu-ld',
     `--with-stabs' and `--nfp'.

    `--with-gnu-as'
          If you will use GNU CC with the GNU assembler (GAS), you
          should declare this by using the `--with-gnu-as' option when
          you run `configure'.

          Using this option does not install GAS.  It only modifies the
          output of GNU CC to work with GAS.  Building and installing
          GAS is up to you.

          Conversely, if you _do not_ wish to use GAS and do not specify
          `--with-gnu-as' when building GNU CC, it is up to you to make
          sure that GAS is not installed.  GNU CC searches for a
          program named `as' in various directories; if the program it
          finds is GAS, then it runs GAS.  If you are not sure where
          GNU CC finds the assembler it is using, try specifying `-v'
          when you run it.

          The systems where it makes a difference whether you use GAS
          are
          `hppa1.0-ANY-ANY', `hppa1.1-ANY-ANY', `i386-ANY-sysv',
          `i386-ANY-isc',
          `i860-ANY-bsd', `m68k-bull-sysv',
          `m68k-hp-hpux', `m68k-sony-bsd',
          `m68k-altos-sysv', `m68000-hp-hpux',
          `m68000-att-sysv', `ANY-lynx-lynxos', and `mips-ANY').  On
          any other system, `--with-gnu-as' has no effect.

          On the systems listed above (except for the HP-PA, for ISC on
          the 386, and for `mips-sgi-irix5.*'), if you use GAS, you
          should also use the GNU linker (and specify `--with-gnu-ld').

    `--with-gnu-ld'
          Specify the option `--with-gnu-ld' if you plan to use the GNU
          linker with GNU CC.

          This option does not cause the GNU linker to be installed; it
          just modifies the behavior of GNU CC to work with the GNU
          linker.

    `--with-stabs'
          On MIPS based systems and on Alphas, you must specify whether
          you want GNU CC to create the normal ECOFF debugging format,
          or to use BSD-style stabs passed through the ECOFF symbol
          table.  The normal ECOFF debug format cannot fully handle
          languages other than C.  BSD stabs format can handle other
          languages, but it only works with the GNU debugger GDB.

          Normally, GNU CC uses the ECOFF debugging format by default;
          if you prefer BSD stabs, specify `--with-stabs' when you
          configure GNU CC.

          No matter which default you choose when you configure GNU CC,
          the user can use the `-gcoff' and `-gstabs+' options to
          specify explicitly the debug format for a particular
          compilation.

          `--with-stabs' is meaningful on the ISC system on the 386,
          also, if `--with-gas' is used.  It selects use of stabs
          debugging information embedded in COFF output.  This kind of
          debugging information supports C++ well; ordinary COFF
          debugging information does not.

          `--with-stabs' is also meaningful on 386 systems running
          SVR4.  It selects use of stabs debugging information embedded
          in ELF output.  The C++ compiler currently (2.6.0) does not
          support the DWARF debugging information normally used on 386
          SVR4 platforms; stabs provide a workable alternative.  This
          requires gas and gdb, as the normal SVR4 tools can not
          generate or interpret stabs.

    `--nfp'
          On certain systems, you must specify whether the machine has
          a floating point unit.  These systems include
          `m68k-sun-sunosN' and `m68k-isi-bsd'.  On any other system,
          `--nfp' currently has no effect, though perhaps there are
          other systems where it could usefully make a difference.

    `--enable-haifa'
    `--disable-haifa'
          Use `--enable-haifa' to enable use of an experimental
          instruction scheduler (from IBM Haifa).  This may or may not
          produce better code.  Some targets on which it is known to be
          a win enable it by default; use `--disable-haifa' to disable
          it in these cases.  `configure' will print out whether the
          Haifa scheduler is enabled when it is run.

    `--enable-threads=TYPE'
          Certain systems, notably Linux-based GNU systems, can't be
          relied on to supply a threads facility for the Objective C
          runtime and so will default to single-threaded runtime.  They
          may, however, have a library threads implementation
          available, in which case threads can be enabled with this
          option by supplying a suitable TYPE, probably `posix'.  The
          possibilities for TYPE are `single', `posix', `win32',
          `solaris', `irix' and `mach'.

    `--enable-checking'
          When you specify this option, the compiler is built to
          perform checking of tree node types when referencing fields
          of that node.  This does not change the generated code, but
          adds error checking within the compiler.  This will slow down
          the compiler and may only work properly if you are building
          the compiler with GNU C.

          The `configure' script searches subdirectories of the source
          directory for other compilers that are to be integrated into
          GNU CC.  The GNU compiler for C++, called G++ is in a
          subdirectory named `cp'.  `configure' inserts rules into
          `Makefile' to build all of those compilers.

          Here we spell out what files will be set up by `configure'.
          Normally you need not be concerned with these files.

             * A file named `config.h' is created that contains a
               `#include' of the top-level config file for the machine
               you will run the compiler on (*note Config::).  This
               file is responsible for defining information about the
               host machine.  It includes `tm.h'.

               The top-level config file is located in the subdirectory
               `config'.  Its name is always `xm-SOMETHING.h'; usually
               `xm-MACHINE.h', but there are some exceptions.

               If your system does not support symbolic links, you
               might want to set up `config.h' to contain a `#include'
               command which refers to the appropriate file.

             * A file named `tconfig.h' is created which includes the
               top-level config file for your target machine.  This is
               used for compiling certain programs to run on that
               machine.

             * A file named `tm.h' is created which includes the
               machine-description macro file for your target machine.
               It should be in the subdirectory `config' and its name
               is often `MACHINE.h'.

    `--enable-nls'
    `--disable-nls'
          The `--enable-nls' option enables Native Language Support
          (NLS), which lets GCC output diagnostics in languages other
          than American English.  No translations are available yet, so
          the main users of this option now are those translating GCC's
          diagnostics who want to test their work.  Once translations
          become available, Native Language Support will become enabled
          by default.  The `--disable-nls' option disables NLS.

    `--with-included-gettext'
          If NLS is enabled, the GCC build procedure normally attempts
          to use the host's `gettext' libraries, and falls back on
          GCC's copy of the GNU `gettext' library only if the host
          libraries do not suffice.  The `--with-included-gettext'
          option causes the build procedure to prefer its copy of GNU
          `gettext'.

    `--with-catgets'
          If NLS is enabled, and if the host lacks `gettext' but has the
          inferior `catgets' interface, the GCC build procedure normally
          ignores `catgets' and instead uses GCC's copy of the GNU
          `gettext' library.  The `--with-catgets' option causes the
          build procedure to use the host's `catgets' in this situation.

  7. In certain cases, you should specify certain other options when
     you run `configure'.

        * The standard directory for installing GNU CC is
          `/usr/local/lib'.  If you want to install its files somewhere
          else, specify `--prefix=DIR' when you run `configure'.  Here
          DIR is a directory name to use instead of `/usr/local' for
          all purposes with one exception: the directory
          `/usr/local/include' is searched for header files no matter
          where you install the compiler.  To override this name, use
          the `--with-local-prefix' option below.  The directory you
          specify need not exist, but its parent directory must exist.

        * Specify `--with-local-prefix=DIR' if you want the compiler to
          search directory `DIR/include' for locally installed header
          files _instead_ of `/usr/local/include'.

          You should specify `--with-local-prefix' *only* if your site
          has a different convention (not `/usr/local') for where to put
          site-specific files.

          The default value for `--with-local-prefix' is `/usr/local'
          regardless of the value of `--prefix'.  Specifying `--prefix'
          has no effect on which directory GNU CC searches for local
          header files.  This may seem counterintuitive, but actually
          it is logical.

          The purpose of `--prefix' is to specify where to _install GNU
          CC_.  The local header files in `/usr/local/include'--if you
          put any in that directory--are not part of GNU CC.  They are
          part of other programs--perhaps many others.  (GNU CC
          installs its own header files in another directory which is
          based on the `--prefix' value.)

          *Do not* specify `/usr' as the `--with-local-prefix'!  The
          directory you use for `--with-local-prefix' *must not* contain
          any of the system's standard header files.  If it did contain
          them, certain programs would be miscompiled (including GNU
          Emacs, on certain targets), because this would override and
          nullify the header file corrections made by the `fixincludes'
          script.

          Indications are that people who use this option use it based
          on mistaken ideas of what it is for.  People use it as if it
          specified where to install part of GNU CC.  Perhaps they make
          this assumption because installing GNU CC creates the
          directory.

  8. Build the compiler.  Just type `make LANGUAGES=c' in the compiler
     directory.

     `LANGUAGES=c' specifies that only the C compiler should be
     compiled.  The makefile normally builds compilers for all the
     supported languages; currently, C, C++ and Objective C.  However,
     C is the only language that is sure to work when you build with
     other non-GNU C compilers.  In addition, building anything but C
     at this stage is a waste of time.

     In general, you can specify the languages to build by typing the
     argument `LANGUAGES="LIST"', where LIST is one or more words from
     the list `c', `c++', and `objective-c'.  If you have any
     additional GNU compilers as subdirectories of the GNU CC source
     directory, you may also specify their names in this list.

     Ignore any warnings you may see about "statement not reached" in
     `insn-emit.c'; they are normal.  Also, warnings about "unknown
     escape sequence" are normal in `genopinit.c' and perhaps some
     other files.  Likewise, you should ignore warnings about "constant
     is so large that it is unsigned" in `insn-emit.c' and
     `insn-recog.c', a warning about a comparison always being zero in
     `enquire.o', and warnings about shift counts exceeding type widths
     in `cexp.y'.  Any other compilation errors may represent bugs in
     the port to your machine or operating system, and should be
     investigated and reported (*note Bugs::).

     Some compilers fail to compile GNU CC because they have bugs or
     limitations.  For example, the Microsoft compiler is said to run
     out of macro space.  Some Ultrix compilers run out of expression
     space; then you need to break up the statement where the problem
     happens.

  9. If you are building a cross-compiler, stop here.  *Note
     Cross-Compiler::.

 10. Move the first-stage object files and executables into a
     subdirectory with this command:

          make stage1

     The files are moved into a subdirectory named `stage1'.  Once
     installation is complete, you may wish to delete these files with
     `rm -r stage1'.

 11. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the `stage1'
     subdirectory under the names `as', `ld' or whatever is
     appropriate.  This will enable the stage 1 compiler to find the
     proper tools in the following stage.

     Alternatively, you can do subsequent compilation using a value of
     the `PATH' environment variable such that the necessary GNU tools
     come before the standard system tools.

 12. Recompile the compiler with itself, with this command:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O2"

     This is called making the stage 2 compiler.

     The command shown above builds compilers for all the supported
     languages.  If you don't want them all, you can specify the
     languages to build by typing the argument `LANGUAGES="LIST"'.  LIST
     should contain one or more words from the list `c', `c++',
     `objective-c', and `proto'.  Separate the words with spaces.
     `proto' stands for the programs `protoize' and `unprotoize'; they
     are not a separate language, but you use `LANGUAGES' to enable or
     disable their installation.

     If you are going to build the stage 3 compiler, then you might
     want to build only the C language in stage 2.

     Once you have built the stage 2 compiler, if you are short of disk
     space, you can delete the subdirectory `stage1'.

     On a 68000 or 68020 system lacking floating point hardware, unless
     you have selected a `tm.h' file that expects by default that there
     is no such hardware, do this instead:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O2 -msoft-float"

 13. If you wish to test the compiler by compiling it with itself one
     more time, install any other necessary GNU tools (such as GAS or
     the GNU linker) in the `stage2' subdirectory as you did in the
     `stage1' subdirectory, then do this:

          make stage2
          make CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O2"

     This is called making the stage 3 compiler.  Aside from the `-B'
     option, the compiler options should be the same as when you made
     the stage 2 compiler.  But the `LANGUAGES' option need not be the
     same.  The command shown above builds compilers for all the
     supported languages; if you don't want them all, you can specify
     the languages to build by typing the argument `LANGUAGES="LIST"',
     as described above.

     If you do not have to install any additional GNU tools, you may
     use the command

          make bootstrap LANGUAGES=LANGUAGE-LIST BOOT_CFLAGS=OPTION-LIST

     instead of making `stage1', `stage2', and performing the two
     compiler builds.

 14. Compare the latest object files with the stage 2 object files--they
     ought to be identical, aside from time stamps (if any).

     On some systems, meaningful comparison of object files is
     impossible; they always appear "different."  This is currently
     true on Solaris and some systems that use ELF object file format.
     On some versions of Irix on SGI machines and DEC Unix (OSF/1) on
     Alpha systems, you will not be able to compare the files without
     specifying `-save-temps'; see the description of individual
     systems above to see if you get comparison failures.  You may have
     similar problems on other systems.

     Use this command to compare the files:

          make compare

     This will mention any object files that differ between stage 2 and
     stage 3.  Any difference, no matter how innocuous, indicates that
     the stage 2 compiler has compiled GNU CC incorrectly, and is
     therefore a potentially serious bug which you should investigate
     and report (*note Bugs::).

     If your system does not put time stamps in the object files, then
     this is a faster way to compare them (using the Bourne shell):

          for file in *.o; do
          cmp $file stage2/$file
          done

     If you have built the compiler with the `-mno-mips-tfile' option on
     MIPS machines, you will not be able to compare the files.

 15. Install the compiler driver, the compiler's passes and run-time
     support with `make install'.  Use the same value for `CC',
     `CFLAGS' and `LANGUAGES' that you used when compiling the files
     that are being installed.  One reason this is necessary is that
     some versions of Make have bugs and recompile files gratuitously
     when you do this step.  If you use the same variable values, those
     files will be recompiled properly.

     For example, if you have built the stage 2 compiler, you can use
     the following command:

          make install CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O" LANGUAGES="LIST"

     This copies the files `cc1', `cpp' and `libgcc.a' to files `cc1',
     `cpp' and `libgcc.a' in the directory
     `/usr/local/lib/gcc-lib/TARGET/VERSION', which is where the
     compiler driver program looks for them.  Here TARGET is the
     canonicalized form of target machine type specified when you ran
     `configure', and VERSION is the version number of GNU CC.  This
     naming scheme permits various versions and/or cross-compilers to
     coexist.  It also copies the executables for compilers for other
     languages (e.g., `cc1plus' for C++) to the same directory.

     This also copies the driver program `xgcc' into
     `/usr/local/bin/gcc', so that it appears in typical execution
     search paths.  It also copies `gcc.1' into `/usr/local/man/man1'
     and info pages into `/usr/local/info'.

     On some systems, this command causes recompilation of some files.
     This is usually due to bugs in `make'.  You should either ignore
     this problem, or use GNU Make.

     *Warning: there is a bug in `alloca' in the Sun library.  To avoid
     this bug, be sure to install the executables of GNU CC that were
     compiled by GNU CC.  (That is, the executables from stage 2 or 3,
     not stage 1.)  They use `alloca' as a built-in function and never
     the one in the library.*

     (It is usually better to install GNU CC executables from stage 2
     or 3, since they usually run faster than the ones compiled with
     some other compiler.)

 16. If you're going to use C++, you need to install the C++ runtime
     library.  This includes all I/O functionality, special class
     libraries, etc.

     The standard C++ runtime library for GNU CC is called `libstdc++'.
     An obsolescent library `libg++' may also be available, but it's
     necessary only for older software that hasn't been converted yet;
     if you don't know whether you need `libg++' then you probably don't
     need it.

     Here's one way to build and install `libstdc++' for GNU CC:

        * Build and install GNU CC, so that invoking `gcc' obtains the
          GNU CC that was just built.

        * Obtain a copy of a compatible `libstdc++' distribution.  For
          example, the `libstdc++-2.8.0.tar.gz' distribution should be
          compatible with GCC 2.8.0.  GCC distributors normally
          distribute `libstdc++' as well.

        * Set the `CXX' environment variable to `gcc' while running the
          `libstdc++' distribution's `configure' command.  Use the same
          `configure' options that you used when you invoked GCC's
          `configure' command.

        * Invoke `make' to build the C++ runtime.

        * Invoke `make install' to install the C++ runtime.


     To summarize, after building and installing GNU CC, invoke the
     following shell commands in the topmost directory of the C++
     library distribution.  For CONFIGURE-OPTIONS, use the same options
     that you used to configure GNU CC.

          $ CXX=gcc ./configure CONFIGURE-OPTIONS
          $ make
          $ make install

 17. GNU CC includes a runtime library for Objective-C because it is an
     integral part of the language.  You can find the files associated
     with the library in the subdirectory `objc'.  The GNU Objective-C
     Runtime Library requires header files for the target's C library in
     order to be compiled,and also requires the header files for the
     target's thread library if you want thread support.  *Note
     Cross-Compilers and Header Files: Cross Headers, for discussion
     about header files issues for cross-compilation.

     When you run `configure', it picks the appropriate Objective-C
     thread implementation file for the target platform.  In some
     situations, you may wish to choose a different back-end as some
     platforms support multiple thread implementations or you may wish
     to disable thread support completely.  You do this by specifying a
     value for the OBJC_THREAD_FILE makefile variable on the command
     line when you run make, for example:

          make CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O2" OBJC_THREAD_FILE=thr-single

     Below is a list of the currently available back-ends.

        * thr-single Disable thread support, should work for all
          platforms.

        * thr-decosf1 DEC OSF/1 thread support.

        * thr-irix SGI IRIX thread support.

        * thr-mach Generic MACH thread support, known to work on
          NEXTSTEP.

        * thr-os2 IBM OS/2 thread support.

        * thr-posix Generix POSIX thread support.

        * thr-pthreads PCThreads on Linux-based GNU systems.

        * thr-solaris SUN Solaris thread support.

        * thr-win32 Microsoft Win32 API thread support.


File: gcc.info,  Node: Configuration Files,  Next: Configurations,  Up: Installation

3.1 Files Created by `configure'
================================

Here we spell out what files will be set up by `configure'.  Normally
you need not be concerned with these files.

   * A file named `config.h' is created that contains a `#include' of
     the top-level config file for the machine you will run the compiler
     on (*note Config::).  This file is responsible for defining
     information about the host machine.  It includes `tm.h'.

     The top-level config file is located in the subdirectory `config'.
     Its name is always `xm-SOMETHING.h'; usually `xm-MACHINE.h', but
     there are some exceptions.

     If your system does not support symbolic links, you might want to
     set up `config.h' to contain a `#include' command which refers to
     the appropriate file.

   * A file named `tconfig.h' is created which includes the top-level
     config file for your target machine.  This is used for compiling
     certain programs to run on that machine.

   * A file named `tm.h' is created which includes the
     machine-description macro file for your target machine.  It should
     be in the subdirectory `config' and its name is often `MACHINE.h'.

   * The command file `configure' also constructs the file `Makefile'
     by adding some text to the template file `Makefile.in'.  The
     additional text comes from files in the `config' directory, named
     `t-TARGET' and `x-HOST'.  If these files do not exist, it means
     nothing needs to be added for a given target or host.


File: gcc.info,  Node: Configurations,  Next: Other Dir,  Prev: Configuration Files,  Up: Installation

3.2 Configurations Supported by GNU CC
======================================

Here are the possible CPU types:

     1750a, a29k, alpha, arm, cN, clipper, dsp16xx, elxsi, h8300,
     hppa1.0, hppa1.1, i370, i386, i486, i586, i860, i960, m32r,
     m68000, m68k, m88k, mips, mipsel, mips64, mips64el, ns32k,
     powerpc, powerpcle, pyramid, romp, rs6000, sh, sparc, sparclite,
     sparc64, vax, we32k.

   Here are the recognized company names.  As you can see, customary
abbreviations are used rather than the longer official names.

     acorn, alliant, altos, apollo, apple, att, bull, cbm, convergent,
     convex, crds, dec, dg, dolphin, elxsi, encore, harris, hitachi,
     hp, ibm, intergraph, isi, mips, motorola, ncr, next, ns, omron,
     plexus, sequent, sgi, sony, sun, tti, unicom, wrs.

   The company name is meaningful only to disambiguate when the rest of
the information supplied is insufficient.  You can omit it, writing
just `CPU-SYSTEM', if it is not needed.  For example, `vax-ultrix4.2'
is equivalent to `vax-dec-ultrix4.2'.

   Here is a list of system types:

     386bsd, aix, acis, amigaos, aos, aout, aux, bosx, bsd, clix, coff,
     ctix, cxux, dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms,
     genix, gnu, linux-gnu, hiux, hpux, iris, irix, isc, luna, lynxos,
     mach, minix, msdos, mvs, netbsd, newsos, nindy, ns, osf, osfrose,
     ptx, riscix, riscos, rtu, sco, sim, solaris, sunos, sym, sysv,
     udi, ultrix, unicos, uniplus, unos, vms, vsta, vxworks, winnt,
     xenix.

You can omit the system type; then `configure' guesses the operating
system from the CPU and company.

   You can add a version number to the system type; this may or may not
make a difference.  For example, you can write `bsd4.3' or `bsd4.4' to
distinguish versions of BSD.  In practice, the version number is most
needed for `sysv3' and `sysv4', which are often treated differently.

   If you specify an impossible combination such as `i860-dg-vms', then
you may get an error message from `configure', or it may ignore part of
the information and do the best it can with the rest.  `configure'
always prints the canonical name for the alternative that it used.  GNU
CC does not support all possible alternatives.

   Often a particular model of machine has a name.  Many machine names
are recognized as aliases for CPU/company combinations.  Thus, the
machine name `sun3', mentioned above, is an alias for `m68k-sun'.
Sometimes we accept a company name as a machine name, when the name is
popularly used for a particular machine.  Here is a table of the known
machine names:

     3300, 3b1, 3bN, 7300, altos3068, altos, apollo68, att-7300,
     balance, convex-cN, crds, decstation-3100, decstation, delta,
     encore, fx2800, gmicro, hp7NN, hp8NN, hp9k2NN, hp9k3NN, hp9k7NN,
     hp9k8NN, iris4d, iris, isi68, m3230, magnum, merlin, miniframe,
     mmax, news-3600, news800, news, next, pbd, pc532, pmax, powerpc,
     powerpcle, ps2, risc-news, rtpc, sun2, sun386i, sun386, sun3,
     sun4, symmetry, tower-32, tower.

Remember that a machine name specifies both the cpu type and the company
name.  If you want to install your own homemade configuration files,
you can use `local' as the company name to access them.  If you use
configuration `CPU-local', the configuration name without the cpu prefix
is used to form the configuration file names.

   Thus, if you specify `m68k-local', configuration uses files
`m68k.md', `local.h', `m68k.c', `xm-local.h', `t-local', and `x-local',
all in the directory `config/m68k'.

   Here is a list of configurations that have special treatment or
special things you must know:

`1750a-*-*'
     MIL-STD-1750A processors.

     The MIL-STD-1750A cross configuration produces output for
     `as1750', an assembler/linker available under the GNU Public
     License for the 1750A. `as1750' can be obtained at
     _ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/_.  A similarly
     licensed simulator for the 1750A is available from same address.

     You should ignore a fatal error during the building of libgcc
     (libgcc is not yet implemented for the 1750A.)

     The `as1750' assembler requires the file `ms1750.inc', which is
     found in the directory `config/1750a'.

     GNU CC produced the same sections as the Fairchild F9450 C
     Compiler, namely:

    `Normal'
          The program code section.

    `Static'
          The read/write (RAM) data section.

    `Konst'
          The read-only (ROM) constants section.

    `Init'
          Initialization section (code to copy KREL to SREL).

     The smallest addressable unit is 16 bits (BITS_PER_UNIT is 16).
     This means that type `char' is represented with a 16-bit word per
     character.  The 1750A's "Load/Store Upper/Lower Byte" instructions
     are not used by GNU CC.

`alpha-*-osf1'
     Systems using processors that implement the DEC Alpha architecture
     and are running the DEC Unix (OSF/1) operating system, for example
     the DEC Alpha AXP systems.CC.)

     GNU CC writes a `.verstamp' directive to the assembler output file
     unless it is built as a cross-compiler.  It gets the version to
     use from the system header file `/usr/include/stamp.h'.  If you
     install a new version of DEC Unix, you should rebuild GCC to pick
     up the new version stamp.

     Note that since the Alpha is a 64-bit architecture,
     cross-compilers from 32-bit machines will not generate code as
     efficient as that generated when the compiler is running on a
     64-bit machine because many optimizations that depend on being
     able to represent a word on the target in an integral value on the
     host cannot be performed.  Building cross-compilers on the Alpha
     for 32-bit machines has only been tested in a few cases and may
     not work properly.

     `make compare' may fail on old versions of DEC Unix unless you add
     `-save-temps' to `CFLAGS'.  On these systems, the name of the
     assembler input file is stored in the object file, and that makes
     comparison fail if it differs between the `stage1' and `stage2'
     compilations.  The option `-save-temps' forces a fixed name to be
     used for the assembler input file, instead of a randomly chosen
     name in `/tmp'.  Do not add `-save-temps' unless the comparisons
     fail without that option.  If you add `-save-temps', you will have
     to manually delete the `.i' and `.s' files after each series of
     compilations.

     GNU CC now supports both the native (ECOFF) debugging format used
     by DBX and GDB and an encapsulated STABS format for use only with
     GDB.  See the discussion of the `--with-stabs' option of
     `configure' above for more information on these formats and how to
     select them.

     There is a bug in DEC's assembler that produces incorrect line
     numbers for ECOFF format when the `.align' directive is used.  To
     work around this problem, GNU CC will not emit such alignment
     directives while writing ECOFF format debugging information even
     if optimization is being performed.  Unfortunately, this has the
     very undesirable side-effect that code addresses when `-O' is
     specified are different depending on whether or not `-g' is also
     specified.

     To avoid this behavior, specify `-gstabs+' and use GDB instead of
     DBX.  DEC is now aware of this problem with the assembler and
     hopes to provide a fix shortly.

`arc-*-elf'
     Argonaut ARC processor.  This configuration is intended for
     embedded systems.

`arm-*-aout'
     Advanced RISC Machines ARM-family processors.  These are often
     used in embedded applications.  There are no standard Unix
     configurations.  This configuration corresponds to the basic
     instruction sequences and will produce `a.out' format object
     modules.

     You may need to make a variant of the file `arm.h' for your
     particular configuration.

`arm-*-linuxaout'
     Any of the ARM family processors running the Linux-based GNU
     system with the `a.out' binary format (ELF is not yet supported).
     You must use version 2.8.1.0.7 or later of the GNU/Linux binutils,
     which you can download from `sunsite.unc.edu:/pub/Linux/GCC' and
     other mirror sites for Linux-based GNU systems.

`arm-*-riscix'
     The ARM2 or ARM3 processor running RISC iX, Acorn's port of BSD
     Unix.  If you are running a version of RISC iX prior to 1.2 then
     you must specify the version number during configuration.  Note
     that the assembler shipped with RISC iX does not support stabs
     debugging information; a new version of the assembler, with stabs
     support included, is now available from Acorn and via ftp
     `ftp.acorn.com:/pub/riscix/as+xterm.tar.Z'.  To enable stabs
     debugging, pass `--with-gnu-as' to configure.

     You will need to install GNU `sed' before you can run configure.

`a29k'
     AMD Am29k-family processors.  These are normally used in embedded
     applications.  There are no standard Unix configurations.  This
     configuration corresponds to AMD's standard calling sequence and
     binary interface and is compatible with other 29k tools.

     You may need to make a variant of the file `a29k.h' for your
     particular configuration.

`a29k-*-bsd'
     AMD Am29050 used in a system running a variant of BSD Unix.

`decstation-*'
     MIPS-based DECstations can support three different personalities:
     Ultrix, DEC OSF/1, and OSF/rose.  (Alpha-based DECstation products
     have a configuration name beginning with `alpha-dec'.)  To
     configure GCC for these platforms use the following configurations:

    `decstation-ultrix'
          Ultrix configuration.

    `decstation-osf1'
          Dec's version of OSF/1.

    `decstation-osfrose'
          Open Software Foundation reference port of OSF/1 which uses
          the OSF/rose object file format instead of ECOFF.  Normally,
          you would not select this configuration.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the `-Wf,-XNg1500' option in order to
     compile `cp/parse.c'.  If you use the `-O2' optimization option,
     you also need to use `-Olimit 3000'.  Both of these options are
     automatically generated in the `Makefile' that the shell script
     `configure' builds.  If you override the `CC' make variable and
     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit
     3000'.

`elxsi-elxsi-bsd'
     The Elxsi's C compiler has known limitations that prevent it from
     compiling GNU C.  Please contact `mrs@cygnus.com' for more details.

`dsp16xx'
     A port to the AT&T DSP1610 family of processors.

`h8300-*-*'
     Hitachi H8/300 series of processors.

     The calling convention and structure layout has changed in release
     2.6.  All code must be recompiled.  The calling convention now
     passes the first three arguments in function calls in registers.
     Structures are no longer a multiple of 2 bytes.

`hppa*-*-*'
     There are several variants of the HP-PA processor which run a
     variety of operating systems.  GNU CC must be configured to use
     the correct processor type and operating system, or GNU CC will
     not function correctly.  The easiest way to handle this problem is
     to _not_ specify a target when configuring GNU CC, the `configure'
     script will try to automatically determine the right processor
     type and operating system.

     `-g' does not work on HP-UX, since that system uses a peculiar
     debugging format which GNU CC does not know about.  However, `-g'
     will work if you also use GAS and GDB in conjunction with GCC.  We
     highly recommend using GAS for all HP-PA configurations.

     You should be using GAS-2.6 (or later) along with GDB-4.16 (or
     later).  These can be retrieved from all the traditional GNU ftp
     archive sites.

     On some versions of HP-UX, you will need to install GNU `sed'.

     You will need to be install GAS into a directory before `/bin',
     `/usr/bin', and `/usr/ccs/bin' in your search path.  You should
     install GAS before you build GNU CC.

     To enable debugging, you must configure GNU CC with the
     `--with-gnu-as' option before building.

`i370-*-*'
     This port is very preliminary and has many known bugs.  We hope to
     have a higher-quality port for this machine soon.

`i386-*-linux-gnuoldld'
     Use this configuration to generate `a.out' binaries on Linux-based
     GNU systems if you do not have gas/binutils version 2.5.2 or later
     installed. This is an obsolete configuration.

`i386-*-linux-gnuaout'
     Use this configuration to generate `a.out' binaries on Linux-based
     GNU systems. This configuration is being superseded. You must use
     gas/binutils version 2.5.2 or later.

`i386-*-linux-gnu'
     Use this configuration to generate ELF binaries on Linux-based GNU
     systems.  You must use gas/binutils version 2.5.2 or later.

`i386-*-sco'
     Compilation with RCC is recommended.  Also, it may be a good idea
     to link with GNU malloc instead of the malloc that comes with the
     system.

`i386-*-sco3.2v4'
     Use this configuration for SCO release 3.2 version 4.

`i386-*-sco3.2v5*'
     Use this for the SCO OpenServer Release family including 5.0.0,
     5.0.2, 5.0.4, 5.0.5, Internet FastStart 1.0, and Internet
     FastStart 1.1.

     GNU CC can generate COFF binaries if you specify `-mcoff' or ELF
     binaries, the default.    A full `make bootstrap' is recommended
     so that an ELF compiler that builds ELF is generated.

     You must have TLS597 from `ftp://ftp.sco.com/TLS' installed for ELF
     C++ binaries to work correctly on releases before 5.0.4.

     The native SCO assembler that is provided with the OS at no charge
     is normally required.  If, however, you must be able to use the GNU
     assembler (perhaps you have complex asms) you must configure this
     package `--with-gnu-as'.  To do this, install (cp or symlink)
     gcc/as to your copy of the GNU assembler.  You must use a recent
     version of GNU binutils; version 2.9.1 seems to work well.  If you
     select this option, you will be unable to build COFF images.
     Trying to do so will result in non-obvious failures.  In general,
     the "-with-gnu-as" option isn't as well tested as the native
     assembler.

     _NOTE:_ If you are building C++, you must follow the instructions
     about invoking `make bootstrap' because the native OpenServer
     compiler may build a `cc1plus' that will not correctly parse many
     valid C++ programs.  You must do a `make bootstrap' if you are
     building with the native compiler.

`i386-*-isc'
     It may be a good idea to link with GNU malloc instead of the
     malloc that comes with the system.

     In ISC version 4.1, `sed' core dumps when building `deduced.h'.
     Use the version of `sed' from version 4.0.

`i386-*-esix'
     It may be good idea to link with GNU malloc instead of the malloc
     that comes with the system.

`i386-ibm-aix'
     You need to use GAS version 2.1 or later, and LD from GNU binutils
     version 2.2 or later.

`i386-sequent-bsd'
     Go to the Berkeley universe before compiling.

`i386-sequent-ptx1*'
`i386-sequent-ptx2*'
     You must install GNU `sed' before running `configure'.

`i386-sun-sunos4'
     You may find that you need another version of GNU CC to begin
     bootstrapping with, since the current version when built with the
     system's own compiler seems to get an infinite loop compiling part
     of `libgcc2.c'.  GNU CC version 2 compiled with GNU CC (any
     version) seems not to have this problem.

     See *note Sun Install::, for information on installing GNU CC on
     Sun systems.

`i[345]86-*-winnt3.5'
     This version requires a GAS that has not yet been released.  Until
     it is, you can get a prebuilt binary version via anonymous ftp from
     `cs.washington.edu:pub/gnat' or `cs.nyu.edu:pub/gnat'. You must
     also use the Microsoft header files from the Windows NT 3.5 SDK.
     Find these on the CDROM in the `/mstools/h' directory dated
     9/4/94.  You must use a fixed version of Microsoft linker made
     especially for NT 3.5, which is also is available on the NT 3.5
     SDK CDROM.  If you do not have this linker, can you also use the
     linker from Visual C/C++ 1.0 or 2.0.

     Installing GNU CC for NT builds a wrapper linker, called `ld.exe',
     which mimics the behaviour of Unix `ld' in the specification of
     libraries (`-L' and `-l').  `ld.exe' looks for both Unix and
     Microsoft named libraries.  For example, if you specify `-lfoo',
     `ld.exe' will look first for `libfoo.a' and then for `foo.lib'.

     You may install GNU CC for Windows NT in one of two ways,
     depending on whether or not you have a Unix-like shell and various
     Unix-like utilities.

       1. If you do not have a Unix-like shell and few Unix-like
          utilities, you will use a DOS style batch script called
          `configure.bat'.  Invoke it as `configure winnt' from an
          MSDOS console window or from the program manager dialog box.
          `configure.bat' assumes you have already installed and have
          in your path a Unix-like `sed' program which is used to
          create a working `Makefile' from `Makefile.in'.

          `Makefile' uses the Microsoft Nmake program maintenance
          utility and the Visual C/C++ V8.00 compiler to build GNU CC.
          You need only have the utilities `sed' and `touch' to use
          this installation method, which only automatically builds the
          compiler itself.  You must then examine what `fixinc.winnt'
          does, edit the header files by hand and build `libgcc.a'
          manually.

       2. The second type of installation assumes you are running a
          Unix-like shell, have a complete suite of Unix-like utilities
          in your path, and have a previous version of GNU CC already
          installed, either through building it via the above
          installation method or acquiring a pre-built binary.  In this
          case, use the `configure' script in the normal fashion.

`i860-intel-osf1'
     This is the Paragon.  If you have version 1.0 of the operating
     system, see *note Installation Problems::, for special things you
     need to do to compensate for peculiarities in the system.

`*-lynx-lynxos'
     LynxOS 2.2 and earlier comes with GNU CC 1.x already installed as
     `/bin/gcc'.  You should compile with this instead of `/bin/cc'.
     You can tell GNU CC to use the GNU assembler and linker, by
     specifying `--with-gnu-as --with-gnu-ld' when configuring.  These
     will produce COFF format object files and executables;  otherwise
     GNU CC will use the installed tools, which produce `a.out' format
     executables.

`m32r-*-elf'
     Mitsubishi M32R processor.  This configuration is intended for
     embedded systems.

`m68000-hp-bsd'
     HP 9000 series 200 running BSD.  Note that the C compiler that
     comes with this system cannot compile GNU CC; contact
     `law@cygnus.com' to get binaries of GNU CC for bootstrapping.

`m68k-altos'
     Altos 3068.  You must use the GNU assembler, linker and debugger.
     Also, you must fix a kernel bug.  Details in the file
     `README.ALTOS'.

`m68k-apple-aux'
     Apple Macintosh running A/UX.  You may configure GCC  to use
     either the system assembler and linker or the GNU assembler and
     linker.  You should use the GNU configuration if you can,
     especially if you also want to use GNU C++.  You enabled that
     configuration with + the `--with-gnu-as' and `--with-gnu-ld'
     options to `configure'.

     Note the C compiler that comes with this system cannot compile GNU
     CC.  You can find binaries of GNU CC for bootstrapping on
     `jagubox.gsfc.nasa.gov'.  You will also a patched version of
     `/bin/ld' there that raises some of the arbitrary limits found in
     the original.

`m68k-att-sysv'
     AT&T 3b1, a.k.a. 7300 PC.  Special procedures are needed to
     compile GNU CC with this machine's standard C compiler, due to
     bugs in that compiler.  You can bootstrap it more easily with
     previous versions of GNU CC if you have them.

     Installing GNU CC on the 3b1 is difficult if you do not already
     have GNU CC running, due to bugs in the installed C compiler.
     However, the following procedure might work.  We are unable to
     test it.

       1. Comment out the `#include "config.h"' line near the start of
          `cccp.c' and do `make cpp'.  This makes a preliminary version
          of GNU cpp.

       2. Save the old `/lib/cpp' and copy the preliminary GNU cpp to
          that file name.

       3. Undo your change in `cccp.c', or reinstall the original
          version, and do `make cpp' again.

       4. Copy this final version of GNU cpp into `/lib/cpp'.

       5. Replace every occurrence of `obstack_free' in the file
          `tree.c' with `_obstack_free'.

       6. Run `make' to get the first-stage GNU CC.

       7. Reinstall the original version of `/lib/cpp'.

       8. Now you can compile GNU CC with itself and install it in the
          normal fashion.

`m68k-bull-sysv'
     Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GNU
     CC works either with native assembler or GNU assembler. You can use
     GNU assembler with native coff generation by providing
     `--with-gnu-as' to the configure script or use GNU assembler with
     dbx-in-coff encapsulation by providing `--with-gnu-as --stabs'.
     For any problem with native assembler or for availability of the
     DPX/2 port of GAS, contact `F.Pierresteguy@frcl.bull.fr'.

`m68k-crds-unox'
     Use `configure unos' for building on Unos.

     The Unos assembler is named `casm' instead of `as'.  For some
     strange reason linking `/bin/as' to `/bin/casm' changes the
     behavior, and does not work.  So, when installing GNU CC, you
     should install the following script as `as' in the subdirectory
     where the passes of GCC are installed:

          #!/bin/sh
          casm $*

     The default Unos library is named `libunos.a' instead of `libc.a'.
     To allow GNU CC to function, either change all references to `-lc'
     in `gcc.c' to `-lunos' or link `/lib/libc.a' to `/lib/libunos.a'.

     When compiling GNU CC with the standard compiler, to overcome bugs
     in the support of `alloca', do not use `-O' when making stage 2.
     Then use the stage 2 compiler with `-O' to make the stage 3
     compiler.  This compiler will have the same characteristics as the
     usual stage 2 compiler on other systems.  Use it to make a stage 4
     compiler and compare that with stage 3 to verify proper
     compilation.

     (Perhaps simply defining `ALLOCA' in `x-crds' as described in the
     comments there will make the above paragraph superfluous.  Please
     inform us of whether this works.)

     Unos uses memory segmentation instead of demand paging, so you
     will need a lot of memory.  5 Mb is barely enough if no other
     tasks are running.  If linking `cc1' fails, try putting the object
     files into a library and linking from that library.

`m68k-hp-hpux'
     HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0 has a
     bug in the assembler that prevents compilation of GNU CC.  To fix
     it, get patch PHCO_4484 from HP.

     In addition, if you wish to use gas `--with-gnu-as' you must use
     gas version 2.1 or later, and you must use the GNU linker version
     2.1 or later.  Earlier versions of gas relied upon a program which
     converted the gas output into the native HP-UX format, but that
     program has not been kept up to date.  gdb does not understand
     that native HP-UX format, so you must use gas if you wish to use
     gdb.

`m68k-sun'
     Sun 3.  We do not provide a configuration file to use the Sun FPA
     by default, because programs that establish signal handlers for
     floating point traps inherently cannot work with the FPA.

     See *note Sun Install::, for information on installing GNU CC on
     Sun systems.

`m88k-*-svr3'
     Motorola m88k running the AT&T/Unisoft/Motorola V.3 reference port.
     These systems tend to use the Green Hills C, revision 1.8.5, as the
     standard C compiler.  There are apparently bugs in this compiler
     that result in object files differences between stage 2 and stage
     3.  If this happens, make the stage 4 compiler and compare it to
     the stage 3 compiler.  If the stage 3 and stage 4 object files are
     identical, this suggests you encountered a problem with the
     standard C compiler; the stage 3 and 4 compilers may be usable.

     It is best, however, to use an older version of GNU CC for
     bootstrapping if you have one.

`m88k-*-dgux'
     Motorola m88k running DG/UX.  To build 88open BCS native or cross
     compilers on DG/UX, specify the configuration name as
     `m88k-*-dguxbcs' and build in the 88open BCS software development
     environment.  To build ELF native or cross compilers on DG/UX,
     specify `m88k-*-dgux' and build in the DG/UX ELF development
     environment.  You set the software development environment by
     issuing `sde-target' command and specifying either `m88kbcs' or
     `m88kdguxelf' as the operand.

     If you do not specify a configuration name, `configure' guesses the
     configuration based on the current software development
     environment.

`m88k-tektronix-sysv3'
     Tektronix XD88 running UTekV 3.2e.  Do not turn on optimization
     while building stage1 if you bootstrap with the buggy Green Hills
     compiler.  Also, The bundled LAI System V NFS is buggy so if you
     build in an NFS mounted directory, start from a fresh reboot, or
     avoid NFS all together.  Otherwise you may have trouble getting
     clean comparisons between stages.

`mips-mips-bsd'
     MIPS machines running the MIPS operating system in BSD mode.  It's
     possible that some old versions of the system lack the functions
     `memcpy', `memcmp', and `memset'.  If your system lacks these, you
     must remove or undo the definition of `TARGET_MEM_FUNCTIONS' in
     `mips-bsd.h'.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the `-Wf,-XNg1500' option in order to
     compile `cp/parse.c'.  If you use the `-O2' optimization option,
     you also need to use `-Olimit 3000'.  Both of these options are
     automatically generated in the `Makefile' that the shell script
     `configure' builds.  If you override the `CC' make variable and
     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit
     3000'.

`mips-mips-riscos*'
     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the `-Wf,-XNg1500' option in order to
     compile `cp/parse.c'.  If you use the `-O2' optimization option,
     you also need to use `-Olimit 3000'.  Both of these options are
     automatically generated in the `Makefile' that the shell script
     `configure' builds.  If you override the `CC' make variable and
     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit
     3000'.

     MIPS computers running RISC-OS can support four different
     personalities: default, BSD 4.3, System V.3, and System V.4 (older
     versions of RISC-OS don't support V.4).  To configure GCC for
     these platforms use the following configurations:

    `mips-mips-riscos`rev''
          Default configuration for RISC-OS, revision `rev'.

    `mips-mips-riscos`rev'bsd'
          BSD 4.3 configuration for RISC-OS, revision `rev'.

    `mips-mips-riscos`rev'sysv4'
          System V.4 configuration for RISC-OS, revision `rev'.

    `mips-mips-riscos`rev'sysv'
          System V.3 configuration for RISC-OS, revision `rev'.

     The revision `rev' mentioned above is the revision of RISC-OS to
     use.  You must reconfigure GCC when going from a RISC-OS revision
     4 to RISC-OS revision 5.  This has the effect of avoiding a linker
     bug (see *note Installation Problems::, for more details).

`mips-sgi-*'
     In order to compile GCC on an SGI running IRIX 4, the "c.hdr.lib"
     option must be installed from the CD-ROM supplied from Silicon
     Graphics.  This is found on the 2nd CD in release 4.0.1.

     In order to compile GCC on an SGI running IRIX 5, the
     "compiler_dev.hdr" subsystem must be installed from the IDO CD-ROM
     supplied by Silicon Graphics.

     `make compare' may fail on version 5 of IRIX unless you add
     `-save-temps' to `CFLAGS'.  On these systems, the name of the
     assembler input file is stored in the object file, and that makes
     comparison fail if it differs between the `stage1' and `stage2'
     compilations.  The option `-save-temps' forces a fixed name to be
     used for the assembler input file, instead of a randomly chosen
     name in `/tmp'.  Do not add `-save-temps' unless the comparisons
     fail without that option.  If you do you `-save-temps', you will
     have to manually delete the `.i' and `.s' files after each series
     of compilations.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the `-Wf,-XNg1500' option in order to
     compile `cp/parse.c'.  If you use the `-O2' optimization option,
     you also need to use `-Olimit 3000'.  Both of these options are
     automatically generated in the `Makefile' that the shell script
     `configure' builds.  If you override the `CC' make variable and
     use the MIPS compilers, you may need to add `-Wf,-XNg1500 -Olimit
     3000'.

     On Irix version 4.0.5F, and perhaps on some other versions as well,
     there is an assembler bug that reorders instructions incorrectly.
     To work around it, specify the target configuration
     `mips-sgi-irix4loser'.  This configuration inhibits assembler
     optimization.

     In a compiler configured with target `mips-sgi-irix4', you can turn
     off assembler optimization by using the `-noasmopt' option.  This
     compiler option passes the option `-O0' to the assembler, to
     inhibit reordering.

     The `-noasmopt' option can be useful for testing whether a problem
     is due to erroneous assembler reordering.  Even if a problem does
     not go away with `-noasmopt', it may still be due to assembler
     reordering--perhaps GNU CC itself was miscompiled as a result.

     To enable debugging under Irix 5, you must use GNU as 2.5 or later,
     and use the `--with-gnu-as' configure option when configuring gcc.
     GNU as is distributed as part of the binutils package.

`mips-sony-sysv'
     Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2
     (which uses ELF instead of COFF).  Support for 5.0.2 will probably
     be provided soon by volunteers.  In particular, the linker does
     not like the code generated by GCC when shared libraries are
     linked in.

`ns32k-encore'
     Encore ns32000 system.  Encore systems are supported only under
     BSD.

`ns32k-*-genix'
     National Semiconductor ns32000 system.  Genix has bugs in `alloca'
     and `malloc'; you must get the compiled versions of these from GNU
     Emacs.

`ns32k-sequent'
     Go to the Berkeley universe before compiling.

`ns32k-utek'
     UTEK ns32000 system ("merlin").  The C compiler that comes with
     this system cannot compile GNU CC; contact `tektronix!reed!mason'
     to get binaries of GNU CC for bootstrapping.

`romp-*-aos'
`romp-*-mach'
     The only operating systems supported for the IBM RT PC are AOS and
     MACH.  GNU CC does not support AIX running on the RT.  We
     recommend you compile GNU CC with an earlier version of itself; if
     you compile GNU CC with `hc', the Metaware compiler, it will work,
     but you will get mismatches between the stage 2 and stage 3
     compilers in various files.  These errors are minor differences in
     some floating-point constants and can be safely ignored; the stage
     3 compiler is correct.

`rs6000-*-aix'
`powerpc-*-aix'
     Various early versions of each release of the IBM XLC compiler
     will not bootstrap GNU CC.  Symptoms include differences between
     the stage2 and stage3 object files, and errors when compiling
     `libgcc.a' or `enquire'.  Known problematic releases include:
     xlc-1.2.1.8, xlc-1.3.0.0 (distributed with AIX 3.2.5), and
     xlc-1.3.0.19.  Both xlc-1.2.1.28 and xlc-1.3.0.24 (PTF 432238) are
     known to produce working versions of GNU CC, but most other recent
     releases correctly bootstrap GNU CC.

     Release 4.3.0 of AIX and ones prior to AIX 3.2.4 include a version
     of the IBM assembler which does not accept debugging directives:
     assembler updates are available as PTFs.  Also, if you are using
     AIX 3.2.5 or greater and the GNU assembler, you must have a
     version modified after October 16th, 1995 in order for the GNU C
     compiler to build.  See the file `README.RS6000' for more details
     on any of these problems.

     GNU CC does not yet support the 64-bit PowerPC instructions.

     Objective C does not work on this architecture because it makes
     assumptions that are incompatible with the calling conventions.

     AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ("." vs "," for separating decimal
     fractions).  There have been problems reported where the library
     linked with GNU CC does not produce the same floating-point
     formats that the assembler accepts.  If you have this problem, set
     the LANG environment variable to "C" or "En_US".

     Due to changes in the way that GNU CC invokes the binder (linker)
     for AIX 4.1, you may now receive warnings of duplicate symbols
     from the link step that were not reported before.  The assembly
     files generated by GNU CC for AIX have always included multiple
     symbol definitions for certain global variable and function
     declarations in the original program.  The warnings should not
     prevent the linker from producing a correct library or runnable
     executable.

     By default, AIX 4.1 produces code that can be used on either Power
     or PowerPC processors.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpc-*-elf'
`powerpc-*-sysv4'
     PowerPC system in big endian mode, running System V.4.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpc-*-linux-gnu'
     PowerPC system in big endian mode, running the Linux-based GNU
     system.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpc-*-eabiaix'
     Embedded PowerPC system in big endian mode with -mcall-aix
     selected as the default.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpc-*-eabisim'
     Embedded PowerPC system in big endian mode for use in running
     under the PSIM simulator.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpc-*-eabi'
     Embedded PowerPC system in big endian mode.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpcle-*-elf'
`powerpcle-*-sysv4'
     PowerPC system in little endian mode, running System V.4.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpcle-*-solaris2*'
     PowerPC system in little endian mode, running Solaris 2.5.1 or
     higher.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.  Beta
     versions of the Sun 4.0 compiler do not seem to be able to build
     GNU CC correctly.  There are also problems with the host assembler
     and linker that are fixed by using the GNU versions of these tools.

`powerpcle-*-eabisim'
     Embedded PowerPC system in little endian mode for use in running
     under the PSIM simulator.

`powerpcle-*-eabi'
     Embedded PowerPC system in little endian mode.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`powerpcle-*-winnt'
`powerpcle-*-pe'
     PowerPC system in little endian mode running Windows NT.

     You can specify a default version for the `-mcpu='CPU_TYPE switch
     by using the configure option `--with-cpu-'CPU_TYPE.

`vax-dec-ultrix'
     Don't try compiling with Vax C (`vcc').  It produces incorrect code
     in some cases (for example, when `alloca' is used).

     Meanwhile, compiling `cp/parse.c' with pcc does not work because of
     an internal table size limitation in that compiler.  To avoid this
     problem, compile just the GNU C compiler first, and use it to
     recompile building all the languages that you want to run.

`sparc-sun-*'
     See *note Sun Install::, for information on installing GNU CC on
     Sun systems.

`vax-dec-vms'
     See *note VMS Install::, for details on how to install GNU CC on
     VMS.

`we32k-*-*'
     These computers are also known as the 3b2, 3b5, 3b20 and other
     similar names.  (However, the 3b1 is actually a 68000; see *note
     Configurations::.)

     Don't use `-g' when compiling with the system's compiler.  The
     system's linker seems to be unable to handle such a large program
     with debugging information.

     The system's compiler runs out of capacity when compiling `stmt.c'
     in GNU CC.  You can work around this by building `cpp' in GNU CC
     first, then use that instead of the system's preprocessor with the
     system's C compiler to compile `stmt.c'.  Here is how:

          mv /lib/cpp /lib/cpp.att
          cp cpp /lib/cpp.gnu
          echo '/lib/cpp.gnu -traditional ${1+"$@"}' > /lib/cpp
          chmod +x /lib/cpp

     The system's compiler produces bad code for some of the GNU CC
     optimization files.  So you must build the stage 2 compiler without
     optimization.  Then build a stage 3 compiler with optimization.
     That executable should work.  Here are the necessary commands:

          make LANGUAGES=c CC=stage1/xgcc CFLAGS="-Bstage1/ -g"
          make stage2
          make CC=stage2/xgcc CFLAGS="-Bstage2/ -g -O"

     You may need to raise the ULIMIT setting to build a C++ compiler,
     as the file `cc1plus' is larger than one megabyte.


File: gcc.info,  Node: Other Dir,  Next: Cross-Compiler,  Prev: Configurations,  Up: Installation

3.3 Compilation in a Separate Directory
=======================================

If you wish to build the object files and executables in a directory
other than the one containing the source files, here is what you must
do differently:

  1. Make sure you have a version of Make that supports the `VPATH'
     feature.  (GNU Make supports it, as do Make versions on most BSD
     systems.)

  2. If you have ever run `configure' in the source directory, you must
     undo the configuration.  Do this by running:

          make distclean

  3. Go to the directory in which you want to build the compiler before
     running `configure':

          mkdir gcc-sun3
          cd gcc-sun3

     On systems that do not support symbolic links, this directory must
     be on the same file system as the source code directory.

  4. Specify where to find `configure' when you run it:

          ../gcc/configure ...

     This also tells `configure' where to find the compiler sources;
     `configure' takes the directory from the file name that was used to
     invoke it.  But if you want to be sure, you can specify the source
     directory with the `--srcdir' option, like this:

          ../gcc/configure --srcdir=../gcc OTHER OPTIONS

     The directory you specify with `--srcdir' need not be the same as
     the one that `configure' is found in.

   Now, you can run `make' in that directory.  You need not repeat the
configuration steps shown above, when ordinary source files change.  You
must, however, run `configure' again when the configuration files
change, if your system does not support symbolic links.


File: gcc.info,  Node: Cross-Compiler,  Next: Sun Install,  Prev: Other Dir,  Up: Installation

3.4 Building and Installing a Cross-Compiler
============================================

GNU CC can function as a cross-compiler for many machines, but not all.

   * Cross-compilers for the Mips as target using the Mips assembler
     currently do not work, because the auxiliary programs
     `mips-tdump.c' and `mips-tfile.c' can't be compiled on anything
     but a Mips.  It does work to cross compile for a Mips if you use
     the GNU assembler and linker.

   * Cross-compilers between machines with different floating point
     formats have not all been made to work.  GNU CC now has a floating
     point emulator with which these can work, but each target machine
     description needs to be updated to take advantage of it.

   * Cross-compilation between machines of different word sizes is
     somewhat problematic and sometimes does not work.

   Since GNU CC generates assembler code, you probably need a
cross-assembler that GNU CC can run, in order to produce object files.
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.

* Menu:

* Steps of Cross::      Using a cross-compiler involves several steps
                          that may be carried out on different machines.
* Configure Cross::     Configuring a cross-compiler.
* Tools and Libraries:: Where to put the linker and assembler, and the C library.
* Cross Headers::       Finding and installing header files
                          for a cross-compiler.
* Cross Runtime::       Supplying arithmetic runtime routines (`libgcc1.a').
* Build Cross::         Actually compiling the cross-compiler.


File: gcc.info,  Node: Steps of Cross,  Next: Configure Cross,  Up: Cross-Compiler

3.4.1 Steps of Cross-Compilation
--------------------------------

To compile and run a program using a cross-compiler involves several
steps:

   * Run the cross-compiler on the host machine to produce assembler
     files for the target machine.  This requires header files for the
     target machine.

   * Assemble the files produced by the cross-compiler.  You can do this
     either with an assembler on the target machine, or with a
     cross-assembler on the host machine.

   * Link those files to make an executable.  You can do this either
     with a linker on the target machine, or with a cross-linker on the
     host machine.  Whichever machine you use, you need libraries and
     certain startup files (typically `crt....o') for the target
     machine.

   It is most convenient to do all of these steps on the same host
machine, since then you can do it all with a single invocation of GNU
CC.  This requires a suitable cross-assembler and cross-linker.  For
some targets, the GNU assembler and linker are available.


File: gcc.info,  Node: Configure Cross,  Next: Tools and Libraries,  Prev: Steps of Cross,  Up: Cross-Compiler

3.4.2 Configuring a Cross-Compiler
----------------------------------

To build GNU CC as a cross-compiler, you start out by running
`configure'.  Use the `--target=TARGET' to specify the target type.  If
`configure' was unable to correctly identify the system you are running
on, also specify the `--build=BUILD' option.  For example, here is how
to configure for a cross-compiler that produces code for an HP 68030
system running BSD on a system that `configure' can correctly identify:

     ./configure --target=m68k-hp-bsd4.3


File: gcc.info,  Node: Tools and Libraries,  Next: Cross Headers,  Prev: Configure Cross,  Up: Cross-Compiler

3.4.3 Tools and Libraries for a Cross-Compiler
----------------------------------------------

If you have a cross-assembler and cross-linker available, you should
install them now.  Put them in the directory `/usr/local/TARGET/bin'.
Here is a table of the tools you should put in this directory:

`as'
     This should be the cross-assembler.

`ld'
     This should be the cross-linker.

`ar'
     This should be the cross-archiver: a program which can manipulate
     archive files (linker libraries) in the target machine's format.

`ranlib'
     This should be a program to construct a symbol table in an archive
     file.

   The installation of GNU CC will find these programs in that
directory, and copy or link them to the proper place to for the
cross-compiler to find them when run later.

   The easiest way to provide these files is to build the Binutils
package and GAS.  Configure them with the same `--host' and `--target'
options that you use for configuring GNU CC, then build and install
them.  They install their executables automatically into the proper
directory.  Alas, they do not support all the targets that GNU CC
supports.

   If you want to install libraries to use with the cross-compiler,
such as a standard C library, put them in the directory
`/usr/local/TARGET/lib'; installation of GNU CC copies all the files in
that subdirectory into the proper place for GNU CC to find them and
link with them.  Here's an example of copying some libraries from a
target machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     cd /lib
     get libc.a
     cd /usr/lib
     get libg.a
     get libm.a
     quit

The precise set of libraries you'll need, and their locations on the
target machine, vary depending on its operating system.

   Many targets require "start files" such as `crt0.o' and `crtn.o'
which are linked into each executable; these too should be placed in
`/usr/local/TARGET/lib'.  There may be several alternatives for
`crt0.o', for use with profiling or other compilation options.  Check
your target's definition of `STARTFILE_SPEC' to find out what start
files it uses.  Here's an example of copying these files from a target
machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     prompt
     cd /lib
     mget *crt*.o
     cd /usr/lib
     mget *crt*.o
     quit


File: gcc.info,  Node: Cross Runtime,  Next: Build Cross,  Prev: Cross Headers,  Up: Cross-Compiler

3.4.4 `libgcc.a' and Cross-Compilers
------------------------------------

Code compiled by GNU CC uses certain runtime support functions
implicitly.  Some of these functions can be compiled successfully with
GNU CC itself, but a few cannot be.  These problem functions are in the
source file `libgcc1.c'; the library made from them is called
`libgcc1.a'.

   When you build a native compiler, these functions are compiled with
some other compiler-the one that you use for bootstrapping GNU CC.
Presumably it knows how to open code these operations, or else knows how
to call the run-time emulation facilities that the machine comes with.
But this approach doesn't work for building a cross-compiler.  The
compiler that you use for building knows about the host system, not the
target system.

   So, when you build a cross-compiler you have to supply a suitable
library `libgcc1.a' that does the job it is expected to do.

   To compile `libgcc1.c' with the cross-compiler itself does not work.
The functions in this file are supposed to implement arithmetic
operations that GNU CC does not know how to open code for your target
machine.  If these functions are compiled with GNU CC itself, they will
compile into infinite recursion.

   On any given target, most of these functions are not needed.  If GNU
CC can open code an arithmetic operation, it will not call these
functions to perform the operation.  It is possible that on your target
machine, none of these functions is needed.  If so, you can supply an
empty library as `libgcc1.a'.

   Many targets need library support only for multiplication and
division.  If you are linking with a library that contains functions for
multiplication and division, you can tell GNU CC to call them directly
by defining the macros `MULSI3_LIBCALL', and the like.  These macros
need to be defined in the target description macro file.  For some
targets, they are defined already.  This may be sufficient to avoid the
need for libgcc1.a; if so, you can supply an empty library.

   Some targets do not have floating point instructions; they need other
functions in `libgcc1.a', which do floating arithmetic.  Recent
versions of GNU CC have a file which emulates floating point.  With a
certain amount of work, you should be able to construct a floating
point emulator that can be used as `libgcc1.a'.  Perhaps future
versions will contain code to do this automatically and conveniently.
That depends on whether someone wants to implement it.

   Some embedded targets come with all the necessary `libgcc1.a'
routines written in C or assembler.  These targets build `libgcc1.a'
automatically and you do not need to do anything special for them.
Other embedded targets do not need any `libgcc1.a' routines since all
the necessary operations are supported by the hardware.

   If your target system has another C compiler, you can configure GNU
CC as a native compiler on that machine, build just `libgcc1.a' with
`make libgcc1.a' on that machine, and use the resulting file with the
cross-compiler.  To do this, execute the following on the target
machine:

     cd TARGET-BUILD-DIR
     ./configure --host=sparc --target=sun3
     make libgcc1.a

And then this on the host machine:

     ftp TARGET-MACHINE
     binary
     cd TARGET-BUILD-DIR
     get libgcc1.a
     quit

   Another way to provide the functions you need in `libgcc1.a' is to
define the appropriate `perform_...' macros for those functions.  If
these definitions do not use the C arithmetic operators that they are
meant to implement, you should be able to compile them with the
cross-compiler you are building.  (If these definitions already exist
for your target file, then you are all set.)

   To build `libgcc1.a' using the perform macros, use
`LIBGCC1=libgcc1.a OLDCC=./xgcc' when building the compiler.
Otherwise, you should place your replacement library under the name
`libgcc1.a' in the directory in which you will build the
cross-compiler, before you run `make'.


File: gcc.info,  Node: Cross Headers,  Next: Cross Runtime,  Prev: Tools and Libraries,  Up: Cross-Compiler

3.4.5 Cross-Compilers and Header Files
--------------------------------------

If you are cross-compiling a standalone program or a program for an
embedded system, then you may not need any header files except the few
that are part of GNU CC (and those of your program).  However, if you
intend to link your program with a standard C library such as `libc.a',
then you probably need to compile with the header files that go with
the library you use.

   The GNU C compiler does not come with these files, because (1) they
are system-specific, and (2) they belong in a C library, not in a
compiler.

   If the GNU C library supports your target machine, then you can get
the header files from there (assuming you actually use the GNU library
when you link your program).

   If your target machine comes with a C compiler, it probably comes
with suitable header files also.  If you make these files accessible
from the host machine, the cross-compiler can use them also.

   Otherwise, you're on your own in finding header files to use when
cross-compiling.

   When you have found suitable header files, put them in the directory
`/usr/local/TARGET/include', before building the cross compiler.  Then
installation will run fixincludes properly and install the corrected
versions of the header files where the compiler will use them.

   Provide the header files before you build the cross-compiler, because
the build stage actually runs the cross-compiler to produce parts of
`libgcc.a'.  (These are the parts that _can_ be compiled with GNU CC.)
Some of them need suitable header files.

   Here's an example showing how to copy the header files from a target
machine.  On the target machine, do this:

     (cd /usr/include; tar cf - .) > tarfile

   Then, on the host machine, do this:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/include
     get tarfile
     quit
     tar xf tarfile


File: gcc.info,  Node: Build Cross,  Prev: Cross Runtime,  Up: Cross-Compiler

3.4.6 Actually Building the Cross-Compiler
------------------------------------------

Now you can proceed just as for compiling a single-machine compiler
through the step of building stage 1.  If you have not provided some
sort of `libgcc1.a', then compilation will give up at the point where
it needs that file, printing a suitable error message.  If you do
provide `libgcc1.a', then building the compiler will automatically
compile and link a test program called `libgcc1-test'; if you get
errors in the linking, it means that not all of the necessary routines
in `libgcc1.a' are available.

   You must provide the header file `float.h'.  One way to do this is
to compile `enquire' and run it on your target machine.  The job of
`enquire' is to run on the target machine and figure out by experiment
the nature of its floating point representation.  `enquire' records its
findings in the header file `float.h'.  If you can't produce this file
by running `enquire' on the target machine, then you will need to come
up with a suitable `float.h' in some other way (or else, avoid using it
in your programs).

   Do not try to build stage 2 for a cross-compiler.  It doesn't work to
rebuild GNU CC as a cross-compiler using the cross-compiler, because
that would produce a program that runs on the target machine, not on the
host.  For example, if you compile a 386-to-68030 cross-compiler with
itself, the result will not be right either for the 386 (because it was
compiled into 68030 code) or for the 68030 (because it was configured
for a 386 as the host).  If you want to compile GNU CC into 68030 code,
whether you compile it on a 68030 or with a cross-compiler on a 386, you
must specify a 68030 as the host when you configure it.

   To install the cross-compiler, use `make install', as usual.


File: gcc.info,  Node: Sun Install,  Next: VMS Install,  Prev: Cross-Compiler,  Up: Installation

3.5 Installing GNU CC on the Sun
================================

On Solaris, do not use the linker or other tools in `/usr/ucb' to build
GNU CC.  Use `/usr/ccs/bin'.

   If the assembler reports `Error: misaligned data' when bootstrapping,
you are probably using an obsolete version of the GNU assembler.
Upgrade to the latest version of GNU `binutils', or use the Solaris
assembler.

   Make sure the environment variable `FLOAT_OPTION' is not set when
you compile `libgcc.a'.  If this option were set to `f68881' when
`libgcc.a' is compiled, the resulting code would demand to be linked
with a special startup file and would not link properly without special
pains.

   There is a bug in `alloca' in certain versions of the Sun library.
To avoid this bug, install the binaries of GNU CC that were compiled by
GNU CC.  They use `alloca' as a built-in function and never the one in
the library.

   Some versions of the Sun compiler crash when compiling GNU CC.  The
problem is a segmentation fault in cpp.  This problem seems to be due to
the bulk of data in the environment variables.  You may be able to avoid
it by using the following command to compile GNU CC with Sun CC:

     make CC="TERMCAP=x OBJS=x LIBFUNCS=x STAGESTUFF=x cc"

   SunOS 4.1.3 and 4.1.3_U1 have bugs that can cause intermittent core
dumps when compiling GNU CC.  A common symptom is an internal compiler
error which does not recur if you run it again.  To fix the problem,
install Sun recommended patch 100726 (for SunOS 4.1.3) or 101508 (for
SunOS 4.1.3_U1), or upgrade to a later SunOS release.


File: gcc.info,  Node: VMS Install,  Next: Collect2,  Prev: Sun Install,  Up: Installation

3.6 Installing GNU CC on VMS
============================

The VMS version of GNU CC is distributed in a backup saveset containing
both source code and precompiled binaries.

   To install the `gcc' command so you can use the compiler easily, in
the same manner as you use the VMS C compiler, you must install the VMS
CLD file for GNU CC as follows:

  1. Define the VMS logical names `GNU_CC' and `GNU_CC_INCLUDE' to
     point to the directories where the GNU CC executables
     (`gcc-cpp.exe', `gcc-cc1.exe', etc.) and the C include files are
     kept respectively.  This should be done with the commands:

          $ assign /system /translation=concealed -
            disk:[gcc.] gnu_cc
          $ assign /system /translation=concealed -
            disk:[gcc.include.] gnu_cc_include

     with the appropriate disk and directory names.  These commands can
     be placed in your system startup file so they will be executed
     whenever the machine is rebooted.  You may, if you choose, do this
     via the `GCC_INSTALL.COM' script in the `[GCC]' directory.

  2. Install the `GCC' command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc
          $ install replace sys$common:[syslib]dcltables

  3. To install the help file, do the following:

          $ library/help sys$library:helplib.hlb gcc.hlp

     Now you can invoke the compiler with a command like `gcc /verbose
     file.c', which is equivalent to the command `gcc -v -c file.c' in
     Unix.

   If you wish to use GNU C++ you must first install GNU CC, and then
perform the following steps:

  1. Define the VMS logical name `GNU_GXX_INCLUDE' to point to the
     directory where the preprocessor will search for the C++ header
     files.  This can be done with the command:

          $ assign /system /translation=concealed -
            disk:[gcc.gxx_include.] gnu_gxx_include

     with the appropriate disk and directory name.  If you are going to
     be using a C++ runtime library, this is where its install
     procedure will install its header files.

  2. Obtain the file `gcc-cc1plus.exe', and place this in the same
     directory that `gcc-cc1.exe' is kept.

     The GNU C++ compiler can be invoked with a command like `gcc /plus
     /verbose file.cc', which is equivalent to the command `g++ -v -c
     file.cc' in Unix.

   We try to put corresponding binaries and sources on the VMS
distribution tape.  But sometimes the binaries will be from an older
version than the sources, because we don't always have time to update
them.  (Use the `/version' option to determine the version number of
the binaries and compare it with the source file `version.c' to tell
whether this is so.)  In this case, you should use the binaries you get
to recompile the sources.  If you must recompile, here is how:

  1. Execute the command procedure `vmsconfig.com' to set up the files
     `tm.h', `config.h', `aux-output.c', and `md.', and to create files
     `tconfig.h' and `hconfig.h'.  This procedure also creates several
     linker option files used by `make-cc1.com' and a data file used by
     `make-l2.com'.

          $ @vmsconfig.com

  2. Setup the logical names and command tables as defined above.  In
     addition, define the VMS logical name `GNU_BISON' to point at the
     to the directories where the Bison executable is kept.  This
     should be done with the command:

          $ assign /system /translation=concealed -
            disk:[bison.] gnu_bison

     You may, if you choose, use the `INSTALL_BISON.COM' script in the
     `[BISON]' directory.

  3. Install the `BISON' command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables -
            gnu_bison:[000000]bison
          $ install replace sys$common:[syslib]dcltables

  4. Type `@make-gcc' to recompile everything (alternatively, submit
     the file `make-gcc.com' to a batch queue).  If you wish to build
     the GNU C++ compiler as well as the GNU CC compiler, you must
     first edit `make-gcc.com' and follow the instructions that appear
     in the comments.

  5. In order to use GCC, you need a library of functions which GCC
     compiled code will call to perform certain tasks, and these
     functions are defined in the file `libgcc2.c'.  To compile this
     you should use the command procedure `make-l2.com', which will
     generate the library `libgcc2.olb'.  `libgcc2.olb' should be built
     using the compiler built from the same distribution that
     `libgcc2.c' came from, and `make-gcc.com' will automatically do
     all of this for you.

     To install the library, use the following commands:

          $ library gnu_cc:[000000]gcclib/delete=(new,eprintf)
          $ library gnu_cc:[000000]gcclib/delete=L_*
          $ library libgcc2/extract=*/output=libgcc2.obj
          $ library gnu_cc:[000000]gcclib libgcc2.obj

     The first command simply removes old modules that will be replaced
     with modules from `libgcc2' under different module names.  The
     modules `new' and `eprintf' may not actually be present in your
     `gcclib.olb'--if the VMS librarian complains about those modules
     not being present, simply ignore the message and continue on with
     the next command.  The second command removes the modules that
     came from the previous version of the library `libgcc2.c'.

     Whenever you update the compiler on your system, you should also
     update the library with the above procedure.

  6. You may wish to build GCC in such a way that no files are written
     to the directory where the source files reside.  An example would
     be the when the source files are on a read-only disk.  In these
     cases, execute the following DCL commands (substituting your
     actual path names):

          $ assign dua0:[gcc.build_dir.]/translation=concealed, -
                   dua1:[gcc.source_dir.]/translation=concealed  gcc_build
          $ set default gcc_build:[000000]

     where the directory `dua1:[gcc.source_dir]' contains the source
     code, and the directory `dua0:[gcc.build_dir]' is meant to contain
     all of the generated object files and executables.  Once you have
     done this, you can proceed building GCC as described above.  (Keep
     in mind that `gcc_build' is a rooted logical name, and thus the
     device names in each element of the search list must be an actual
     physical device name rather than another rooted logical name).

  7. *If you are building GNU CC with a previous version of GNU CC, you
     also should check to see that you have the newest version of the
     assembler*.  In particular, GNU CC version 2 treats global constant
     variables slightly differently from GNU CC version 1, and GAS
     version 1.38.1 does not have the patches required to work with GCC
     version 2.  If you use GAS 1.38.1, then `extern const' variables
     will not have the read-only bit set, and the linker will generate
     warning messages about mismatched psect attributes for these
     variables.  These warning messages are merely a nuisance, and can
     safely be ignored.

     If you are compiling with a version of GNU CC older than 1.33,
     specify `/DEFINE=("inline=")' as an option in all the
     compilations.  This requires editing all the `gcc' commands in
     `make-cc1.com'.  (The older versions had problems supporting
     `inline'.)  Once you have a working 1.33 or newer GNU CC, you can
     change this file back.

  8. If you want to build GNU CC with the VAX C compiler, you will need
     to make minor changes in `make-cccp.com' and `make-cc1.com' to
     choose alternate definitions of `CC', `CFLAGS', and `LIBS'.  See
     comments in those files.  However, you must also have a working
     version of the GNU assembler (GNU as, aka GAS) as it is used as
     the back-end for GNU CC to produce binary object modules and is
     not included in the GNU CC sources.  GAS is also needed to compile
     `libgcc2' in order to build `gcclib' (see above); `make-l2.com'
     expects to be able to find it operational in
     `gnu_cc:[000000]gnu-as.exe'.

     To use GNU CC on VMS, you need the VMS driver programs `gcc.exe',
     `gcc.com', and `gcc.cld'.  They are distributed with the VMS
     binaries (`gcc-vms') rather than the GNU CC sources.  GAS is also
     included in `gcc-vms', as is Bison.

     Once you have successfully built GNU CC with VAX C, you should use
     the resulting compiler to rebuild itself.  Before doing this, be
     sure to restore the `CC', `CFLAGS', and `LIBS' definitions in
     `make-cccp.com' and `make-cc1.com'.  The second generation
     compiler will be able to take advantage of many optimizations that
     must be suppressed when building with other compilers.

   Under previous versions of GNU CC, the generated code would
occasionally give strange results when linked with the sharable
`VAXCRTL' library.  Now this should work.

   Even with this version, however, GNU CC itself should not be linked
with the sharable `VAXCRTL'.  The version of `qsort' in `VAXCRTL' has a
bug (known to be present in VMS versions V4.6 through V5.5) which
causes the compiler to fail.

   The executables are generated by `make-cc1.com' and `make-cccp.com'
use the object library version of `VAXCRTL' in order to make use of the
`qsort' routine in `gcclib.olb'.  If you wish to link the compiler
executables with the shareable image version of `VAXCRTL', you should
edit the file `tm.h' (created by `vmsconfig.com') to define the macro
`QSORT_WORKAROUND'.

   `QSORT_WORKAROUND' is always defined when GNU CC is compiled with
VAX C, to avoid a problem in case `gcclib.olb' is not yet available.


File: gcc.info,  Node: Collect2,  Next: Header Dirs,  Prev: VMS Install,  Up: Installation

3.7 `collect2'
==============

GNU CC uses a utility called `collect2' on nearly all systems to arrange
to call various initialization functions at start time.

   The program `collect2' works by linking the program once and looking
through the linker output file for symbols with particular names
indicating they are constructor functions.  If it finds any, it creates
a new temporary `.c' file containing a table of them, compiles it, and
links the program a second time including that file.

   The actual calls to the constructors are carried out by a subroutine
called `__main', which is called (automatically) at the beginning of
the body of `main' (provided `main' was compiled with GNU CC).  Calling
`__main' is necessary, even when compiling C code, to allow linking C
and C++ object code together.  (If you use `-nostdlib', you get an
unresolved reference to `__main', since it's defined in the standard
GCC library.  Include `-lgcc' at the end of your compiler command line
to resolve this reference.)

   The program `collect2' is installed as `ld' in the directory where
the passes of the compiler are installed.  When `collect2' needs to
find the _real_ `ld', it tries the following file names:

   * `real-ld' in the directories listed in the compiler's search
     directories.

   * `real-ld' in the directories listed in the environment variable
     `PATH'.

   * The file specified in the `REAL_LD_FILE_NAME' configuration macro,
     if specified.

   * `ld' in the compiler's search directories, except that `collect2'
     will not execute itself recursively.

   * `ld' in `PATH'.

   "The compiler's search directories" means all the directories where
`gcc' searches for passes of the compiler.  This includes directories
that you specify with `-B'.

   Cross-compilers search a little differently:

   * `real-ld' in the compiler's search directories.

   * `TARGET-real-ld' in `PATH'.

   * The file specified in the `REAL_LD_FILE_NAME' configuration macro,
     if specified.

   * `ld' in the compiler's search directories.

   * `TARGET-ld' in `PATH'.

   `collect2' explicitly avoids running `ld' using the file name under
which `collect2' itself was invoked.  In fact, it remembers up a list
of such names--in case one copy of `collect2' finds another copy (or
version) of `collect2' installed as `ld' in a second place in the
search path.

   `collect2' searches for the utilities `nm' and `strip' using the
same algorithm as above for `ld'.


File: gcc.info,  Node: Header Dirs,  Prev: Collect2,  Up: Installation

3.8 Standard Header File Directories
====================================

`GCC_INCLUDE_DIR' means the same thing for native and cross.  It is
where GNU CC stores its private include files, and also where GNU CC
stores the fixed include files.  A cross compiled GNU CC runs
`fixincludes' on the header files in `$(tooldir)/include'.  (If the
cross compilation header files need to be fixed, they must be installed
before GNU CC is built.  If the cross compilation header files are
already suitable for ANSI C and GNU CC, nothing special need be done).

   `GPLUSPLUS_INCLUDE_DIR' means the same thing for native and cross.
It is where `g++' looks first for header files.  The C++ library
installs only target independent header files in that directory.

   `LOCAL_INCLUDE_DIR' is used only for a native compiler.  It is
normally `/usr/local/include'.  GNU CC searches this directory so that
users can install header files in `/usr/local/include'.

   `CROSS_INCLUDE_DIR' is used only for a cross compiler.  GNU CC
doesn't install anything there.

   `TOOL_INCLUDE_DIR' is used for both native and cross compilers.  It
is the place for other packages to install header files that GNU CC will
use.  For a cross-compiler, this is the equivalent of `/usr/include'.
When you build a cross-compiler, `fixincludes' processes any header
files in this directory.


File: gcc.info,  Node: C Extensions,  Next: C++ Extensions,  Prev: Installation,  Up: Top

4 Extensions to the C Language Family
*************************************

GNU C provides several language features not found in ANSI standard C.
(The `-pedantic' option directs GNU CC to print a warning message if
any of these features is used.)  To test for the availability of these
features in conditional compilation, check for a predefined macro
`__GNUC__', which is always defined under GNU CC.

   These extensions are available in C and Objective C.  Most of them
are also available in C++.  *Note Extensions to the C++ Language: C++
Extensions, for extensions that apply _only_ to C++.

* Menu:

* Statement Exprs::     Putting statements and declarations inside expressions.
* Local Labels::        Labels local to a statement-expression.
* Labels as Values::    Getting pointers to labels, and computed gotos.
* Nested Functions::    As in Algol and Pascal, lexical scoping of functions.
* Constructing Calls::	Dispatching a call to another function.
* Naming Types::        Giving a name to the type of some expression.
* Typeof::              `typeof': referring to the type of an expression.
* Lvalues::             Using `?:', `,' and casts in lvalues.
* Conditionals::        Omitting the middle operand of a `?:' expression.
* Long Long::		Double-word integers---`long long int'.
* Complex::             Data types for complex numbers.
* Hex Floats::          Hexadecimal floating-point constants.
* Zero Length::         Zero-length arrays.
* Variable Length::     Arrays whose length is computed at run time.
* Macro Varargs::	Macros with variable number of arguments.
* Subscripting::        Any array can be subscripted, even if not an lvalue.
* Pointer Arith::       Arithmetic on `void'-pointers and function pointers.
* Initializers::        Non-constant initializers.
* Constructors::        Constructor expressions give structures, unions
                         or arrays as values.
* Labeled Elements::	Labeling elements of initializers.
* Cast to Union::       Casting to union type from any member of the union.
* Case Ranges::		`case 1 ... 9' and such.
* Function Attributes:: Declaring that functions have no side effects,
                         or that they can never return.
* Function Prototypes:: Prototype declarations and old-style definitions.
* C++ Comments::        C++ comments are recognized.
* Dollar Signs::        Dollar sign is allowed in identifiers.
* Character Escapes::   `\e' stands for the character <ESC>.
* Variable Attributes::	Specifying attributes of variables.
* Type Attributes::	Specifying attributes of types.
* Alignment::           Inquiring about the alignment of a type or variable.
* Inline::              Defining inline functions (as fast as macros).
* Extended Asm::        Assembler instructions with C expressions as operands.
                         (With them you can define ``built-in'' functions.)
* Asm Labels::          Specifying the assembler name to use for a C symbol.
* Explicit Reg Vars::   Defining variables residing in specified registers.
* Alternate Keywords::  `__const__', `__asm__', etc., for header files.
* Incomplete Enums::    `enum foo;', with details to follow.
* Function Names::	Printable strings which are the name of the current
			 function.
* Return Address::      Getting the return or frame address of a function.
* Other Builtins::      Other built-in functions.
* Deprecated Features:: Things might disappear from g++.


File: gcc.info,  Node: Statement Exprs,  Next: Local Labels,  Up: C Extensions

4.1 Statements and Declarations in Expressions
==============================================

A compound statement enclosed in parentheses may appear as an expression
in GNU C.  This allows you to use loops, switches, and local variables
within an expression.

   Recall that a compound statement is a sequence of statements
surrounded by braces; in this construct, parentheses go around the
braces.  For example:

     ({ int y = foo (); int z;
        if (y > 0) z = y;
        else z = - y;
        z; })

is a valid (though slightly more complex than necessary) expression for
the absolute value of `foo ()'.

   The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the
value of the entire construct.  (If you use some other kind of statement
last within the braces, the construct has type `void', and thus
effectively no value.)

   This feature is especially useful in making macro definitions "safe"
(so that they evaluate each operand exactly once).  For example, the
"maximum" function is commonly defined as a macro in standard C as
follows:

     #define max(a,b) ((a) > (b) ? (a) : (b))

But this definition computes either A or B twice, with bad results if
the operand has side effects.  In GNU C, if you know the type of the
operands (here let's assume `int'), you can define the macro safely as
follows:

     #define maxint(a,b) \
       ({int _a = (a), _b = (b); _a > _b ? _a : _b; })

   Embedded statements are not allowed in constant expressions, such as
the value of an enumeration constant, the width of a bit field, or the
initial value of a static variable.

   If you don't know the type of the operand, you can still do this,
but you must use `typeof' (*note Typeof::) or type naming (*note Naming
Types::).


File: gcc.info,  Node: Local Labels,  Next: Labels as Values,  Prev: Statement Exprs,  Up: C Extensions

4.2 Locally Declared Labels
===========================

Each statement expression is a scope in which "local labels" can be
declared.  A local label is simply an identifier; you can jump to it
with an ordinary `goto' statement, but only from within the statement
expression it belongs to.

   A local label declaration looks like this:

     __label__ LABEL;

or

     __label__ LABEL1, LABEL2, ...;

   Local label declarations must come at the beginning of the statement
expression, right after the `({', before any ordinary declarations.

   The label declaration defines the label _name_, but does not define
the label itself.  You must do this in the usual way, with `LABEL:',
within the statements of the statement expression.

   The local label feature is useful because statement expressions are
often used in macros.  If the macro contains nested loops, a `goto' can
be useful for breaking out of them.  However, an ordinary label whose
scope is the whole function cannot be used: if the macro can be
expanded several times in one function, the label will be multiply
defined in that function.  A local label avoids this problem.  For
example:

     #define SEARCH(array, target)                     \
     ({                                               \
       __label__ found;                                \
       typeof (target) _SEARCH_target = (target);      \
       typeof (*(array)) *_SEARCH_array = (array);     \
       int i, j;                                       \
       int value;                                      \
       for (i = 0; i < max; i++)                       \
         for (j = 0; j < max; j++)                     \
           if (_SEARCH_array[i][j] == _SEARCH_target)  \
             { value = i; goto found; }              \
       value = -1;                                     \
      found:                                           \
       value;                                          \
     })


File: gcc.info,  Node: Labels as Values,  Next: Nested Functions,  Prev: Local Labels,  Up: C Extensions

4.3 Labels as Values
====================

You can get the address of a label defined in the current function (or
a containing function) with the unary operator `&&'.  The value has
type `void *'.  This value is a constant and can be used wherever a
constant of that type is valid.  For example:

     void *ptr;
     ...
     ptr = &&foo;

   To use these values, you need to be able to jump to one.  This is
done with the computed goto statement(1), `goto *EXP;'.  For example,

     goto *ptr;

Any expression of type `void *' is allowed.

   One way of using these constants is in initializing a static array
that will serve as a jump table:

     static void *array[] = { &&foo, &&bar, &&hack };

   Then you can select a label with indexing, like this:

     goto *array[i];

Note that this does not check whether the subscript is in bounds--array
indexing in C never does that.

   Such an array of label values serves a purpose much like that of the
`switch' statement.  The `switch' statement is cleaner, so use that
rather than an array unless the problem does not fit a `switch'
statement very well.

   Another use of label values is in an interpreter for threaded code.
The labels within the interpreter function can be stored in the
threaded code for super-fast dispatching.

   You can use this mechanism to jump to code in a different function.
If you do that, totally unpredictable things will happen.  The best way
to avoid this is to store the label address only in automatic variables
and never pass it as an argument.

   ---------- Footnotes ----------

   (1) The analogous feature in Fortran is called an assigned goto, but
that name seems inappropriate in C, where one can do more than simply
store label addresses in label variables.


File: gcc.info,  Node: Nested Functions,  Next: Constructing Calls,  Prev: Labels as Values,  Up: C Extensions

4.4 Nested Functions
====================

A "nested function" is a function defined inside another function.
(Nested functions are not supported for GNU C++.)  The nested function's
name is local to the block where it is defined.  For example, here we
define a nested function named `square', and call it twice:

     foo (double a, double b)
     {
       double square (double z) { return z * z; }

       return square (a) + square (b);
     }

   The nested function can access all the variables of the containing
function that are visible at the point of its definition.  This is
called "lexical scoping".  For example, here we show a nested function
which uses an inherited variable named `offset':

     bar (int *array, int offset, int size)
     {
       int access (int *array, int index)
         { return array[index + offset]; }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
     }

   Nested function definitions are permitted within functions in the
places where variable definitions are allowed; that is, in any block,
before the first statement in the block.

   It is possible to call the nested function from outside the scope of
its name by storing its address or passing the address to another
function:

     hack (int *array, int size)
     {
       void store (int index, int value)
         { array[index] = value; }

       intermediate (store, size);
     }

   Here, the function `intermediate' receives the address of `store' as
an argument.  If `intermediate' calls `store', the arguments given to
`store' are used to store into `array'.  But this technique works only
so long as the containing function (`hack', in this example) does not
exit.

   If you try to call the nested function through its address after the
containing function has exited, all hell will break loose.  If you try
to call it after a containing scope level has exited, and if it refers
to some of the variables that are no longer in scope, you may be lucky,
but it's not wise to take the risk.  If, however, the nested function
does not refer to anything that has gone out of scope, you should be
safe.

   GNU CC implements taking the address of a nested function using a
technique called "trampolines".   A paper describing them is available
as `http://master.debian.org/~karlheg/Usenix88-lexic.pdf'.

   A nested function can jump to a label inherited from a containing
function, provided the label was explicitly declared in the containing
function (*note Local Labels::).  Such a jump returns instantly to the
containing function, exiting the nested function which did the `goto'
and any intermediate functions as well.  Here is an example:

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
       ...
       return 0;

      /* Control comes here from `access'
         if it detects an error.  */
      failure:
       return -1;
     }

   A nested function always has internal linkage.  Declaring one with
`extern' is erroneous.  If you need to declare the nested function
before its definition, use `auto' (which is otherwise meaningless for
function declarations).

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       auto int access (int *, int);
       ...
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       ...
     }


File: gcc.info,  Node: Constructing Calls,  Next: Naming Types,  Prev: Nested Functions,  Up: C Extensions

4.5 Constructing Function Calls
===============================

Using the built-in functions described below, you can record the
arguments a function received, and call another function with the same
arguments, without knowing the number or types of the arguments.

   You can also record the return value of that function call, and
later return that value, without knowing what data type the function
tried to return (as long as your caller expects that data type).

`__builtin_apply_args ()'
     This built-in function returns a pointer of type `void *' to data
     describing how to perform a call with the same arguments as were
     passed to the current function.

     The function saves the arg pointer register, structure value
     address, and all registers that might be used to pass arguments to
     a function into a block of memory allocated on the stack.  Then it
     returns the address of that block.

`__builtin_apply (FUNCTION, ARGUMENTS, SIZE)'
     This built-in function invokes FUNCTION (type `void (*)()') with a
     copy of the parameters described by ARGUMENTS (type `void *') and
     SIZE (type `int').

     The value of ARGUMENTS should be the value returned by
     `__builtin_apply_args'.  The argument SIZE specifies the size of
     the stack argument data, in bytes.

     This function returns a pointer of type `void *' to data describing
     how to return whatever value was returned by FUNCTION.  The data
     is saved in a block of memory allocated on the stack.

     It is not always simple to compute the proper value for SIZE.  The
     value is used by `__builtin_apply' to compute the amount of data
     that should be pushed on the stack and copied from the incoming
     argument area.

`__builtin_return (RESULT)'
     This built-in function returns the value described by RESULT from
     the containing function.  You should specify, for RESULT, a value
     returned by `__builtin_apply'.


File: gcc.info,  Node: Naming Types,  Next: Typeof,  Prev: Constructing Calls,  Up: C Extensions

4.6 Naming an Expression's Type
===============================

You can give a name to the type of an expression using a `typedef'
declaration with an initializer.  Here is how to define NAME as a type
name for the type of EXP:

     typedef NAME = EXP;

   This is useful in conjunction with the statements-within-expressions
feature.  Here is how the two together can be used to define a safe
"maximum" macro that operates on any arithmetic type:

     #define max(a,b) \
       ({typedef _ta = (a), _tb = (b);  \
         _ta _a = (a); _tb _b = (b);     \
         _a > _b ? _a : _b; })

   The reason for using names that start with underscores for the local
variables is to avoid conflicts with variable names that occur within
the expressions that are substituted for `a' and `b'.  Eventually we
hope to design a new form of declaration syntax that allows you to
declare variables whose scopes start only after their initializers;
this will be a more reliable way to prevent such conflicts.


File: gcc.info,  Node: Typeof,  Next: Lvalues,  Prev: Naming Types,  Up: C Extensions

4.7 Referring to a Type with `typeof'
=====================================

Another way to refer to the type of an expression is with `typeof'.
The syntax of using of this keyword looks like `sizeof', but the
construct acts semantically like a type name defined with `typedef'.

   There are two ways of writing the argument to `typeof': with an
expression or with a type.  Here is an example with an expression:

     typeof (x[0](1))

This assumes that `x' is an array of functions; the type described is
that of the values of the functions.

   Here is an example with a typename as the argument:

     typeof (int *)

Here the type described is that of pointers to `int'.

   If you are writing a header file that must work when included in
ANSI C programs, write `__typeof__' instead of `typeof'.  *Note
Alternate Keywords::.

   A `typeof'-construct can be used anywhere a typedef name could be
used.  For example, you can use it in a declaration, in a cast, or
inside of `sizeof' or `typeof'.

   * This declares `y' with the type of what `x' points to.

          typeof (*x) y;

   * This declares `y' as an array of such values.

          typeof (*x) y[4];

   * This declares `y' as an array of pointers to characters:

          typeof (typeof (char *)[4]) y;

     It is equivalent to the following traditional C declaration:

          char *y[4];

     To see the meaning of the declaration using `typeof', and why it
     might be a useful way to write, let's rewrite it with these macros:

          #define pointer(T)  typeof(T *)
          #define array(T, N) typeof(T [N])

     Now the declaration can be rewritten this way:

          array (pointer (char), 4) y;

     Thus, `array (pointer (char), 4)' is the type of arrays of 4
     pointers to `char'.


File: gcc.info,  Node: Lvalues,  Next: Conditionals,  Prev: Typeof,  Up: C Extensions

4.8 Generalized Lvalues
=======================

Compound expressions, conditional expressions and casts are allowed as
lvalues provided their operands are lvalues.  This means that you can
take their addresses or store values into them.

   Standard C++ allows compound expressions and conditional expressions
as lvalues, and permits casts to reference type, so use of this
extension is deprecated for C++ code.

   For example, a compound expression can be assigned, provided the last
expression in the sequence is an lvalue.  These two expressions are
equivalent:

     (a, b) += 5
     a, (b += 5)

   Similarly, the address of the compound expression can be taken.
These two expressions are equivalent:

     &(a, b)
     a, &b

   A conditional expression is a valid lvalue if its type is not void
and the true and false branches are both valid lvalues.  For example,
these two expressions are equivalent:

     (a ? b : c) = 5
     (a ? b = 5 : (c = 5))

   A cast is a valid lvalue if its operand is an lvalue.  A simple
assignment whose left-hand side is a cast works by converting the
right-hand side first to the specified type, then to the type of the
inner left-hand side expression.  After this is stored, the value is
converted back to the specified type to become the value of the
assignment.  Thus, if `a' has type `char *', the following two
expressions are equivalent:

     (int)a = 5
     (int)(a = (char *)(int)5)

   An assignment-with-arithmetic operation such as `+=' applied to a
cast performs the arithmetic using the type resulting from the cast,
and then continues as in the previous case.  Therefore, these two
expressions are equivalent:

     (int)a += 5
     (int)(a = (char *)(int) ((int)a + 5))

   You cannot take the address of an lvalue cast, because the use of its
address would not work out coherently.  Suppose that `&(int)f' were
permitted, where `f' has type `float'.  Then the following statement
would try to store an integer bit-pattern where a floating point number
belongs:

     *&(int)f = 1;

   This is quite different from what `(int)f = 1' would do--that would
convert 1 to floating point and store it.  Rather than cause this
inconsistency, we think it is better to prohibit use of `&' on a cast.

   If you really do want an `int *' pointer with the address of `f',
you can simply write `(int *)&f'.


File: gcc.info,  Node: Conditionals,  Next: Long Long,  Prev: Lvalues,  Up: C Extensions

4.9 Conditionals with Omitted Operands
======================================

The middle operand in a conditional expression may be omitted.  Then if
the first operand is nonzero, its value is the value of the conditional
expression.

   Therefore, the expression

     x ? : y

has the value of `x' if that is nonzero; otherwise, the value of `y'.

   This example is perfectly equivalent to

     x ? x : y

In this simple case, the ability to omit the middle operand is not
especially useful.  When it becomes useful is when the first operand
does, or may (if it is a macro argument), contain a side effect.  Then
repeating the operand in the middle would perform the side effect
twice.  Omitting the middle operand uses the value already computed
without the undesirable effects of recomputing it.


File: gcc.info,  Node: Long Long,  Next: Complex,  Prev: Conditionals,  Up: C Extensions

4.10 Double-Word Integers
=========================

GNU C supports data types for integers that are twice as long as `int'.
Simply write `long long int' for a signed integer, or `unsigned long
long int' for an unsigned integer.  To make an integer constant of type
`long long int', add the suffix `LL' to the integer.  To make an
integer constant of type `unsigned long long int', add the suffix `ULL'
to the integer.

   You can use these types in arithmetic like any other integer types.
Addition, subtraction, and bitwise boolean operations on these types
are open-coded on all types of machines.  Multiplication is open-coded
if the machine supports fullword-to-doubleword a widening multiply
instruction.  Division and shifts are open-coded only on machines that
provide special support.  The operations that are not open-coded use
special library routines that come with GNU CC.

   There may be pitfalls when you use `long long' types for function
arguments, unless you declare function prototypes.  If a function
expects type `int' for its argument, and you pass a value of type `long
long int', confusion will result because the caller and the subroutine
will disagree about the number of bytes for the argument.  Likewise, if
the function expects `long long int' and you pass `int'.  The best way
to avoid such problems is to use prototypes.


File: gcc.info,  Node: Complex,  Next: Hex Floats,  Prev: Long Long,  Up: C Extensions

4.11 Complex Numbers
====================

GNU C supports complex data types.  You can declare both complex integer
types and complex floating types, using the keyword `__complex__'.

   For example, `__complex__ double x;' declares `x' as a variable
whose real part and imaginary part are both of type `double'.
`__complex__ short int y;' declares `y' to have real and imaginary
parts of type `short int'; this is not likely to be useful, but it
shows that the set of complex types is complete.

   To write a constant with a complex data type, use the suffix `i' or
`j' (either one; they are equivalent).  For example, `2.5fi' has type
`__complex__ float' and `3i' has type `__complex__ int'.  Such a
constant always has a pure imaginary value, but you can form any
complex value you like by adding one to a real constant.

   To extract the real part of a complex-valued expression EXP, write
`__real__ EXP'.  Likewise, use `__imag__' to extract the imaginary part.

   The operator `~' performs complex conjugation when used on a value
with a complex type.

   GNU CC can allocate complex automatic variables in a noncontiguous
fashion; it's even possible for the real part to be in a register while
the imaginary part is on the stack (or vice-versa).  None of the
supported debugging info formats has a way to represent noncontiguous
allocation like this, so GNU CC describes a noncontiguous complex
variable as if it were two separate variables of noncomplex type.  If
the variable's actual name is `foo', the two fictitious variables are
named `foo$real' and `foo$imag'.  You can examine and set these two
fictitious variables with your debugger.

   A future version of GDB will know how to recognize such pairs and
treat them as a single variable with a complex type.


File: gcc.info,  Node: Hex Floats,  Next: Zero Length,  Prev: Complex,  Up: C Extensions

4.12 Hex Floats
===============

GNU CC recognizes floating-point numbers written not only in the usual
decimal notation, such as `1.55e1', but also numbers such as `0x1.fp3'
written in hexadecimal format.  In that format the `0x' hex introducer
and the `p' or `P' exponent field are mandatory.  The exponent is a
decimal number that indicates the power of 2 by which the significand
part will be multiplied.  Thus `0x1.f' is 1 15/16, `p3' multiplies it
by 8, and the value of `0x1.fp3' is the same as `1.55e1'.

   Unlike for floating-point numbers in the decimal notation the
exponent is always required in the hexadecimal notation.  Otherwise the
compiler would not be able to resolve the ambiguity of, e.g., `0x1.f'.
This could mean `1.0f' or `1.9375' since `f' is also the extension for
floating-point constants of type `float'.


File: gcc.info,  Node: Zero Length,  Next: Variable Length,  Prev: Hex Floats,  Up: C Extensions

4.13 Arrays of Length Zero
==========================

Zero-length arrays are allowed in GNU C.  They are very useful as the
last element of a structure which is really a header for a
variable-length object:

     struct line {
       int length;
       char contents[0];
     };

     {
       struct line *thisline = (struct line *)
         malloc (sizeof (struct line) + this_length);
       thisline->length = this_length;
     }

   In standard C, you would have to give `contents' a length of 1, which
means either you waste space or complicate the argument to `malloc'.


File: gcc.info,  Node: Variable Length,  Next: Macro Varargs,  Prev: Zero Length,  Up: C Extensions

4.14 Arrays of Variable Length
==============================

Variable-length automatic arrays are allowed in GNU C.  These arrays are
declared like any other automatic arrays, but with a length that is not
a constant expression.  The storage is allocated at the point of
declaration and deallocated when the brace-level is exited.  For
example:

     FILE *
     concat_fopen (char *s1, char *s2, char *mode)
     {
       char str[strlen (s1) + strlen (s2) + 1];
       strcpy (str, s1);
       strcat (str, s2);
       return fopen (str, mode);
     }

   Jumping or breaking out of the scope of the array name deallocates
the storage.  Jumping into the scope is not allowed; you get an error
message for it.

   You can use the function `alloca' to get an effect much like
variable-length arrays.  The function `alloca' is available in many
other C implementations (but not in all).  On the other hand,
variable-length arrays are more elegant.

   There are other differences between these two methods.  Space
allocated with `alloca' exists until the containing _function_ returns.
The space for a variable-length array is deallocated as soon as the
array name's scope ends.  (If you use both variable-length arrays and
`alloca' in the same function, deallocation of a variable-length array
will also deallocate anything more recently allocated with `alloca'.)

   You can also use variable-length arrays as arguments to functions:

     struct entry
     tester (int len, char data[len][len])
     {
       ...
     }

   The length of an array is computed once when the storage is allocated
and is remembered for the scope of the array in case you access it with
`sizeof'.

   If you want to pass the array first and the length afterward, you can
use a forward declaration in the parameter list--another GNU extension.

     struct entry
     tester (int len; char data[len][len], int len)
     {
       ...
     }

   The `int len' before the semicolon is a "parameter forward
declaration", and it serves the purpose of making the name `len' known
when the declaration of `data' is parsed.

   You can write any number of such parameter forward declarations in
the parameter list.  They can be separated by commas or semicolons, but
the last one must end with a semicolon, which is followed by the "real"
parameter declarations.  Each forward declaration must match a "real"
declaration in parameter name and data type.


File: gcc.info,  Node: Macro Varargs,  Next: Subscripting,  Prev: Variable Length,  Up: C Extensions

4.15 Macros with Variable Numbers of Arguments
==============================================

In GNU C, a macro can accept a variable number of arguments, much as a
function can.  The syntax for defining the macro looks much like that
used for a function.  Here is an example:

     #define eprintf(format, args...)  \
      fprintf (stderr, format , ## args)

   Here `args' is a "rest argument": it takes in zero or more
arguments, as many as the call contains.  All of them plus the commas
between them form the value of `args', which is substituted into the
macro body where `args' is used.  Thus, we have this expansion:

     eprintf ("%s:%d: ", input_file_name, line_number)
     ==>
     fprintf (stderr, "%s:%d: " , input_file_name, line_number)

Note that the comma after the string constant comes from the definition
of `eprintf', whereas the last comma comes from the value of `args'.

   The reason for using `##' is to handle the case when `args' matches
no arguments at all.  In this case, `args' has an empty value.  In this
case, the second comma in the definition becomes an embarrassment: if
it got through to the expansion of the macro, we would get something
like this:

     fprintf (stderr, "success!\n" , )

which is invalid C syntax.  `##' gets rid of the comma, so we get the
following instead:

     fprintf (stderr, "success!\n")

   This is a special feature of the GNU C preprocessor: `##' before a
rest argument that is empty discards the preceding sequence of
non-whitespace characters from the macro definition.  (If another macro
argument precedes, none of it is discarded.)

   It might be better to discard the last preprocessor token instead of
the last preceding sequence of non-whitespace characters; in fact, we
may someday change this feature to do so.  We advise you to write the
macro definition so that the preceding sequence of non-whitespace
characters is just a single token, so that the meaning will not change
if we change the definition of this feature.


File: gcc.info,  Node: Subscripting,  Next: Pointer Arith,  Prev: Macro Varargs,  Up: C Extensions

4.16 Non-Lvalue Arrays May Have Subscripts
==========================================

Subscripting is allowed on arrays that are not lvalues, even though the
unary `&' operator is not.  For example, this is valid in GNU C though
not valid in other C dialects:

     struct foo {int a[4];};

     struct foo f();

     bar (int index)
     {
       return f().a[index];
     }


File: gcc.info,  Node: Pointer Arith,  Next: Initializers,  Prev: Subscripting,  Up: C Extensions

4.17 Arithmetic on `void'- and Function-Pointers
================================================

In GNU C, addition and subtraction operations are supported on pointers
to `void' and on pointers to functions.  This is done by treating the
size of a `void' or of a function as 1.

   A consequence of this is that `sizeof' is also allowed on `void' and
on function types, and returns 1.

   The option `-Wpointer-arith' requests a warning if these extensions
are used.


File: gcc.info,  Node: Initializers,  Next: Constructors,  Prev: Pointer Arith,  Up: C Extensions

4.18 Non-Constant Initializers
==============================

As in standard C++, the elements of an aggregate initializer for an
automatic variable are not required to be constant expressions in GNU C.
Here is an example of an initializer with run-time varying elements:

     foo (float f, float g)
     {
       float beat_freqs[2] = { f-g, f+g };
       ...
     }


File: gcc.info,  Node: Constructors,  Next: Labeled Elements,  Prev: Initializers,  Up: C Extensions

4.19 Constructor Expressions
============================

GNU C supports constructor expressions.  A constructor looks like a
cast containing an initializer.  Its value is an object of the type
specified in the cast, containing the elements specified in the
initializer.

   Usually, the specified type is a structure.  Assume that `struct
foo' and `structure' are declared as shown:

     struct foo {int a; char b[2];} structure;

Here is an example of constructing a `struct foo' with a constructor:

     structure = ((struct foo) {x + y, 'a', 0});

This is equivalent to writing the following:

     {
       struct foo temp = {x + y, 'a', 0};
       structure = temp;
     }

   You can also construct an array.  If all the elements of the
constructor are (made up of) simple constant expressions, suitable for
use in initializers, then the constructor is an lvalue and can be
coerced to a pointer to its first element, as shown here:

     char **foo = (char *[]) { "x", "y", "z" };

   Array constructors whose elements are not simple constants are not
very useful, because the constructor is not an lvalue.  There are only
two valid ways to use it: to subscript it, or initialize an array
variable with it.  The former is probably slower than a `switch'
statement, while the latter does the same thing an ordinary C
initializer would do.  Here is an example of subscripting an array
constructor:

     output = ((int[]) { 2, x, 28 }) [input];

   Constructor expressions for scalar types and union types are is also
allowed, but then the constructor expression is equivalent to a cast.


File: gcc.info,  Node: Labeled Elements,  Next: Cast to Union,  Prev: Constructors,  Up: C Extensions

4.20 Labeled Elements in Initializers
=====================================

Standard C requires the elements of an initializer to appear in a fixed
order, the same as the order of the elements in the array or structure
being initialized.

   In GNU C you can give the elements in any order, specifying the array
indices or structure field names they apply to.  This extension is not
implemented in GNU C++.

   To specify an array index, write `[INDEX]' or `[INDEX] =' before the
element value.  For example,

     int a[6] = { [4] 29, [2] = 15 };

is equivalent to

     int a[6] = { 0, 0, 15, 0, 29, 0 };

The index values must be constant expressions, even if the array being
initialized is automatic.

   To initialize a range of elements to the same value, write `[FIRST
... LAST] = VALUE'.  For example,

     int widths[] = { [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 };

Note that the length of the array is the highest value specified plus
one.

   In a structure initializer, specify the name of a field to initialize
with `FIELDNAME:' before the element value.  For example, given the
following structure,

     struct point { int x, y; };

the following initialization

     struct point p = { y: yvalue, x: xvalue };

is equivalent to

     struct point p = { xvalue, yvalue };

   Another syntax which has the same meaning is `.FIELDNAME ='., as
shown here:

     struct point p = { .y = yvalue, .x = xvalue };

   You can also use an element label (with either the colon syntax or
the period-equal syntax) when initializing a union, to specify which
element of the union should be used.  For example,

     union foo { int i; double d; };

     union foo f = { d: 4 };

will convert 4 to a `double' to store it in the union using the second
element.  By contrast, casting 4 to type `union foo' would store it
into the union as the integer `i', since it is an integer.  (*Note Cast
to Union::.)

   You can combine this technique of naming elements with ordinary C
initialization of successive elements.  Each initializer element that
does not have a label applies to the next consecutive element of the
array or structure.  For example,

     int a[6] = { [1] = v1, v2, [4] = v4 };

is equivalent to

     int a[6] = { 0, v1, v2, 0, v4, 0 };

   Labeling the elements of an array initializer is especially useful
when the indices are characters or belong to an `enum' type.  For
example:

     int whitespace[256]
       = { [' '] = 1, ['\t'] = 1, ['\h'] = 1,
           ['\f'] = 1, ['\n'] = 1, ['\r'] = 1 };


File: gcc.info,  Node: Case Ranges,  Next: Function Attributes,  Prev: Cast to Union,  Up: C Extensions

4.21 Case Ranges
================

You can specify a range of consecutive values in a single `case' label,
like this:

     case LOW ... HIGH:

This has the same effect as the proper number of individual `case'
labels, one for each integer value from LOW to HIGH, inclusive.

   This feature is especially useful for ranges of ASCII character
codes:

     case 'A' ... 'Z':

   *Be careful:* Write spaces around the `...', for otherwise it may be
parsed wrong when you use it with integer values.  For example, write
this:

     case 1 ... 5:

rather than this:

     case 1...5:


File: gcc.info,  Node: Cast to Union,  Next: Case Ranges,  Prev: Labeled Elements,  Up: C Extensions

4.22 Cast to a Union Type
=========================

A cast to union type is similar to other casts, except that the type
specified is a union type.  You can specify the type either with `union
TAG' or with a typedef name.  A cast to union is actually a constructor
though, not a cast, and hence does not yield an lvalue like normal
casts.  (*Note Constructors::.)

   The types that may be cast to the union type are those of the members
of the union.  Thus, given the following union and variables:

     union foo { int i; double d; };
     int x;
     double y;

both `x' and `y' can be cast to type `union' foo.

   Using the cast as the right-hand side of an assignment to a variable
of union type is equivalent to storing in a member of the union:

     union foo u;
     ...
     u = (union foo) x  ==  u.i = x
     u = (union foo) y  ==  u.d = y

   You can also use the union cast as a function argument:

     void hack (union foo);
     ...
     hack ((union foo) x);


File: gcc.info,  Node: Function Attributes,  Next: Function Prototypes,  Prev: Case Ranges,  Up: C Extensions

4.23 Declaring Attributes of Functions
======================================

In GNU C, you declare certain things about functions called in your
program which help the compiler optimize function calls and check your
code more carefully.

   The keyword `__attribute__' allows you to specify special attributes
when making a declaration.  This keyword is followed by an attribute
specification inside double parentheses.  Nine attributes, `noreturn',
`const', `format', `no_instrument_function', `section', `constructor',
`destructor', `unused' and `weak' are currently defined for functions.
Other attributes, including `section' are supported for variables
declarations (*note Variable Attributes::) and for types (*note Type
Attributes::).

   You may also specify attributes with `__' preceding and following
each keyword.  This allows you to use them in header files without
being concerned about a possible macro of the same name.  For example,
you may use `__noreturn__' instead of `noreturn'.

`noreturn'
     A few standard library functions, such as `abort' and `exit',
     cannot return.  GNU CC knows this automatically.  Some programs
     define their own functions that never return.  You can declare them
     `noreturn' to tell the compiler this fact.  For example,

          void fatal () __attribute__ ((noreturn));

          void
          fatal (...)
          {
            ... /* Print error message. */ ...
            exit (1);
          }

     The `noreturn' keyword tells the compiler to assume that `fatal'
     cannot return.  It can then optimize without regard to what would
     happen if `fatal' ever did return.  This makes slightly better
     code.  More importantly, it helps avoid spurious warnings of
     uninitialized variables.

     Do not assume that registers saved by the calling function are
     restored before calling the `noreturn' function.

     It does not make sense for a `noreturn' function to have a return
     type other than `void'.

     The attribute `noreturn' is not implemented in GNU C versions
     earlier than 2.5.  An alternative way to declare that a function
     does not return, which works in the current version and in some
     older versions, is as follows:

          typedef void voidfn ();

          volatile voidfn fatal;

`const'
     Many functions do not examine any values except their arguments,
     and have no effects except the return value.  Such a function can
     be subject to common subexpression elimination and loop
     optimization just as an arithmetic operator would be.  These
     functions should be declared with the attribute `const'.  For
     example,

          int square (int) __attribute__ ((const));

     says that the hypothetical function `square' is safe to call fewer
     times than the program says.

     The attribute `const' is not implemented in GNU C versions earlier
     than 2.5.  An alternative way to declare that a function has no
     side effects, which works in the current version and in some older
     versions, is as follows:

          typedef int intfn ();

          extern const intfn square;

     This approach does not work in GNU C++ from 2.6.0 on, since the
     language specifies that the `const' must be attached to the return
     value.

     Note that a function that has pointer arguments and examines the
     data pointed to must _not_ be declared `const'.  Likewise, a
     function that calls a non-`const' function usually must not be
     `const'.  It does not make sense for a `const' function to return
     `void'.

`format (ARCHETYPE, STRING-INDEX, FIRST-TO-CHECK)'
     The `format' attribute specifies that a function takes `printf',
     `scanf', or `strftime' style arguments which should be type-checked
     against a format string.  For example, the declaration:

          extern int
          my_printf (void *my_object, const char *my_format, ...)
                __attribute__ ((format (printf, 2, 3)));

     causes the compiler to check the arguments in calls to `my_printf'
     for consistency with the `printf' style format string argument
     `my_format'.

     The parameter ARCHETYPE determines how the format string is
     interpreted, and should be either `printf', `scanf', or
     `strftime'.  The parameter STRING-INDEX specifies which argument
     is the format string argument (starting from 1), while
     FIRST-TO-CHECK is the number of the first argument to check
     against the format string.  For functions where the arguments are
     not available to be checked (such as `vprintf'), specify the third
     parameter as zero.  In this case the compiler only checks the
     format string for consistency.

     In the example above, the format string (`my_format') is the second
     argument of the function `my_print', and the arguments to check
     start with the third argument, so the correct parameters for the
     format attribute are 2 and 3.

     The `format' attribute allows you to identify your own functions
     which take format strings as arguments, so that GNU CC can check
     the calls to these functions for errors.  The compiler always
     checks formats for the ANSI library functions `printf', `fprintf',
     `sprintf', `scanf', `fscanf', `sscanf', `strftime', `vprintf',
     `vfprintf' and `vsprintf' whenever such warnings are requested
     (using `-Wformat'), so there is no need to modify the header file
     `stdio.h'.

`format_arg (STRING-INDEX)'
     The `format_arg' attribute specifies that a function takes
     `printf' or `scanf' style arguments, modifies it (for example, to
     translate it into another language), and passes it to a `printf'
     or `scanf' style function.  For example, the declaration:

          extern char *
          my_dgettext (char *my_domain, const char *my_format)
                __attribute__ ((format_arg (2)));

     causes the compiler to check the arguments in calls to
     `my_dgettext' whose result is passed to a `printf', `scanf', or
     `strftime' type function for consistency with the `printf' style
     format string argument `my_format'.

     The parameter STRING-INDEX specifies which argument is the format
     string argument (starting from 1).

     The `format-arg' attribute allows you to identify your own
     functions which modify format strings, so that GNU CC can check the
     calls to `printf', `scanf', or `strftime' function whose operands
     are a call to one of your own function.  The compiler always
     treats `gettext', `dgettext', and `dcgettext' in this manner.

`no_instrument_function'
     If `-finstrument-functions' is given, profiling function calls will
     be generated at entry and exit of most user-compiled functions.
     Functions with this attribute will not be so instrumented.

`section ("section-name")'
     Normally, the compiler places the code it generates in the `text'
     section.  Sometimes, however, you need additional sections, or you
     need certain particular functions to appear in special sections.
     The `section' attribute specifies that a function lives in a
     particular section.  For example, the declaration:

          extern void foobar (void) __attribute__ ((section ("bar")));

     puts the function `foobar' in the `bar' section.

     Some file formats do not support arbitrary sections so the
     `section' attribute is not available on all platforms.  If you
     need to map the entire contents of a module to a particular
     section, consider using the facilities of the linker instead.

`constructor'
`destructor'
     The `constructor' attribute causes the function to be called
     automatically before execution enters `main ()'.  Similarly, the
     `destructor' attribute causes the function to be called
     automatically after `main ()' has completed or `exit ()' has been
     called.  Functions with these attributes are useful for
     initializing data that will be used implicitly during the
     execution of the program.

     These attributes are not currently implemented for Objective C.

`unused'
     This attribute, attached to a function, means that the function is
     meant to be possibly unused.  GNU CC will not produce a warning
     for this function.  GNU C++ does not currently support this
     attribute as definitions without parameters are valid in C++.

`weak'
     The `weak' attribute causes the declaration to be emitted as a weak
     symbol rather than a global.  This is primarily useful in defining
     library functions which can be overridden in user code, though it
     can also be used with non-function declarations.  Weak symbols are
     supported for ELF targets, and also for a.out targets when using
     the GNU assembler and linker.

`alias ("target")'
     The `alias' attribute causes the declaration to be emitted as an
     alias for another symbol, which must be specified.  For instance,

          void __f () { /* do something */; }
          void f () __attribute__ ((weak, alias ("__f")));

     declares `f' to be a weak alias for `__f'.  In C++, the mangled
     name for the target must be used.

     Not all target machines support this attribute.

`no_check_memory_usage'
     If `-fcheck-memory-usage' is given, calls to support routines will
     be generated before most memory accesses, to permit support code to
     record usage and detect uses of uninitialized or unallocated
     storage.  Since the compiler cannot handle them properly, `asm'
     statements are not allowed.  Declaring a function with this
     attribute disables the memory checking code for that function,
     permitting the use of `asm' statements without requiring separate
     compilation with different options, and allowing you to write
     support routines of your own if you wish, without getting infinite
     recursion if they get compiled with this option.

`regparm (NUMBER)'
     On the Intel 386, the `regparm' attribute causes the compiler to
     pass up to NUMBER integer arguments in registers EAX, EDX, and ECX
     instead of on the stack.  Functions that take a variable number of
     arguments will continue to be passed all of their arguments on the
     stack.

`stdcall'
     On the Intel 386, the `stdcall' attribute causes the compiler to
     assume that the called function will pop off the stack space used
     to pass arguments, unless it takes a variable number of arguments.

     The PowerPC compiler for Windows NT currently ignores the `stdcall'
     attribute.

`cdecl'
     On the Intel 386, the `cdecl' attribute causes the compiler to
     assume that the calling function will pop off the stack space used
     to pass arguments.  This is useful to override the effects of the
     `-mrtd' switch.

     The PowerPC compiler for Windows NT currently ignores the `cdecl'
     attribute.

`longcall'
     On the RS/6000 and PowerPC, the `longcall' attribute causes the
     compiler to always call the function via a pointer, so that
     functions which reside further than 64 megabytes (67,108,864
     bytes) from the current location can be called.

`dllimport'
     On the PowerPC running Windows NT, the `dllimport' attribute causes
     the compiler to call the function via a global pointer to the
     function pointer that is set up by the Windows NT dll library.
     The pointer name is formed by combining `__imp_' and the function
     name.

`dllexport'
     On the PowerPC running Windows NT, the `dllexport' attribute causes
     the compiler to provide a global pointer to the function pointer,
     so that it can be called with the `dllimport' attribute.  The
     pointer name is formed by combining `__imp_' and the function name.

`exception (EXCEPT-FUNC [, EXCEPT-ARG])'
     On the PowerPC running Windows NT, the `exception' attribute causes
     the compiler to modify the structured exception table entry it
     emits for the declared function.  The string or identifier
     EXCEPT-FUNC is placed in the third entry of the structured
     exception table.  It represents a function, which is called by the
     exception handling mechanism if an exception occurs.  If it was
     specified, the string or identifier EXCEPT-ARG is placed in the
     fourth entry of the structured exception table.

`function_vector'
     Use this option on the H8/300 and H8/300H to indicate that the
     specified function should be called through the function vector.
     Calling a function through the function vector will reduce code
     size, however; the function vector has a limited size (maximum 128
     entries on the H8/300 and 64 entries on the H8/300H) and shares
     space with the interrupt vector.

     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this option to work correctly.

`interrupt_handler'
     Use this option on the H8/300 and H8/300H to indicate that the
     specified function is an interrupt handler.  The compiler will
     generate function entry and exit sequences suitable for use in an
     interrupt handler when this attribute is present.

`eightbit_data'
     Use this option on the H8/300 and H8/300H to indicate that the
     specified variable should be placed into the eight bit data
     section.  The compiler will generate more efficient code for
     certain operations on data in the eight bit data area.  Note the
     eight bit data area is limited to 256 bytes of data.

     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this option to work correctly.

`tiny_data'
     Use this option on the H8/300H to indicate that the specified
     variable should be placed into the tiny data section.  The
     compiler will generate more efficient code for loads and stores on
     data in the tiny data section.  Note the tiny data area is limited
     to slightly under 32kbytes of data.

`interrupt'
     Use this option on the M32R/D to indicate that the specified
     function is an interrupt handler.  The compiler will generate
     function entry and exit sequences suitable for use in an interrupt
     handler when this attribute is present.

`model (MODEL-NAME)'
     Use this attribute on the M32R/D to set the addressability of an
     object, and the code generated for a function.  The identifier
     MODEL-NAME is one of `small', `medium', or `large', representing
     each of the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the `ld24' instruction), and are
     callable with the `bl' instruction.

     Medium model objects may live anywhere in the 32 bit address space
     (the compiler will generate `seth/add3' instructions to load their
     addresses), and are callable with the `bl' instruction.

     Large model objects may live anywhere in the 32 bit address space
     (the compiler will generate `seth/add3' instructions to load their
     addresses), and may not be reachable with the `bl' instruction
     (the compiler will generate the much slower `seth/add3/jl'
     instruction sequence).


   You can specify multiple attributes in a declaration by separating
them by commas within the double parentheses or by immediately
following an attribute declaration with another attribute declaration.

   Some people object to the `__attribute__' feature, suggesting that
ANSI C's `#pragma' should be used instead.  There are two reasons for
not doing this.

  1. It is impossible to generate `#pragma' commands from a macro.

  2. There is no telling what the same `#pragma' might mean in another
     compiler.

   These two reasons apply to almost any application that might be
proposed for `#pragma'.  It is basically a mistake to use `#pragma' for
_anything_.


File: gcc.info,  Node: Function Prototypes,  Next: C++ Comments,  Prev: Function Attributes,  Up: C Extensions

4.24 Prototypes and Old-Style Function Definitions
==================================================

GNU C extends ANSI C to allow a function prototype to override a later
old-style non-prototype definition.  Consider the following example:

     /* Use prototypes unless the compiler is old-fashioned.  */
     #ifdef __STDC__
     #define P(x) x
     #else
     #define P(x) ()
     #endif

     /* Prototype function declaration.  */
     int isroot P((uid_t));

     /* Old-style function definition.  */
     int
     isroot (x)   /* ??? lossage here ??? */
          uid_t x;
     {
       return x == 0;
     }

   Suppose the type `uid_t' happens to be `short'.  ANSI C does not
allow this example, because subword arguments in old-style
non-prototype definitions are promoted.  Therefore in this example the
function definition's argument is really an `int', which does not match
the prototype argument type of `short'.

   This restriction of ANSI C makes it hard to write code that is
portable to traditional C compilers, because the programmer does not
know whether the `uid_t' type is `short', `int', or `long'.  Therefore,
in cases like these GNU C allows a prototype to override a later
old-style definition.  More precisely, in GNU C, a function prototype
argument type overrides the argument type specified by a later
old-style definition if the former type is the same as the latter type
before promotion.  Thus in GNU C the above example is equivalent to the
following:

     int isroot (uid_t);

     int
     isroot (uid_t x)
     {
       return x == 0;
     }

   GNU C++ does not support old-style function definitions, so this
extension is irrelevant.


File: gcc.info,  Node: C++ Comments,  Next: Dollar Signs,  Prev: Function Prototypes,  Up: C Extensions

4.25 C++ Style Comments
=======================

In GNU C, you may use C++ style comments, which start with `//' and
continue until the end of the line.  Many other C implementations allow
such comments, and they are likely to be in a future C standard.
However, C++ style comments are not recognized if you specify `-ansi'
or `-traditional', since they are incompatible with traditional
constructs like `dividend//*comment*/divisor'.


File: gcc.info,  Node: Dollar Signs,  Next: Character Escapes,  Prev: C++ Comments,  Up: C Extensions

4.26 Dollar Signs in Identifier Names
=====================================

In GNU C, you may normally use dollar signs in identifier names.  This
is because many traditional C implementations allow such identifiers.
However, dollar signs in identifiers are not supported on a few target
machines, typically because the target assembler does not allow them.


File: gcc.info,  Node: Character Escapes,  Next: Variable Attributes,  Prev: Dollar Signs,  Up: C Extensions

4.27 The Character <ESC> in Constants
=====================================

You can use the sequence `\e' in a string or character constant to
stand for the ASCII character <ESC>.


File: gcc.info,  Node: Alignment,  Next: Inline,  Prev: Type Attributes,  Up: C Extensions

4.28 Inquiring on Alignment of Types or Variables
=================================================

The keyword `__alignof__' allows you to inquire about how an object is
aligned, or the minimum alignment usually required by a type.  Its
syntax is just like `sizeof'.

   For example, if the target machine requires a `double' value to be
aligned on an 8-byte boundary, then `__alignof__ (double)' is 8.  This
is true on many RISC machines.  On more traditional machine designs,
`__alignof__ (double)' is 4 or even 2.

   Some machines never actually require alignment; they allow reference
to any data type even at an odd addresses.  For these machines,
`__alignof__' reports the _recommended_ alignment of a type.

   When the operand of `__alignof__' is an lvalue rather than a type,
the value is the largest alignment that the lvalue is known to have.
It may have this alignment as a result of its data type, or because it
is part of a structure and inherits alignment from that structure.  For
example, after this declaration:

     struct foo { int x; char y; } foo1;

the value of `__alignof__ (foo1.y)' is probably 2 or 4, the same as
`__alignof__ (int)', even though the data type of `foo1.y' does not
itself demand any alignment.

   A related feature which lets you specify the alignment of an object
is `__attribute__ ((aligned (ALIGNMENT)))'; see the following section.


File: gcc.info,  Node: Variable Attributes,  Next: Type Attributes,  Prev: Character Escapes,  Up: C Extensions

4.29 Specifying Attributes of Variables
=======================================

The keyword `__attribute__' allows you to specify special attributes of
variables or structure fields.  This keyword is followed by an
attribute specification inside double parentheses.  Eight attributes
are currently defined for variables: `aligned', `mode', `nocommon',
`packed', `section', `transparent_union', `unused', and `weak'.  Other
attributes are available for functions (*note Function Attributes::) and
for types (*note Type Attributes::).

   You may also specify attributes with `__' preceding and following
each keyword.  This allows you to use them in header files without
being concerned about a possible macro of the same name.  For example,
you may use `__aligned__' instead of `aligned'.

`aligned (ALIGNMENT)'
     This attribute specifies a minimum alignment for the variable or
     structure field, measured in bytes.  For example, the declaration:

          int x __attribute__ ((aligned (16))) = 0;

     causes the compiler to allocate the global variable `x' on a
     16-byte boundary.  On a 68040, this could be used in conjunction
     with an `asm' expression to access the `move16' instruction which
     requires 16-byte aligned operands.

     You can also specify the alignment of structure fields.  For
     example, to create a double-word aligned `int' pair, you could
     write:

          struct foo { int x[2] __attribute__ ((aligned (8))); };

     This is an alternative to creating a union with a `double' member
     that forces the union to be double-word aligned.

     It is not possible to specify the alignment of functions; the
     alignment of functions is determined by the machine's requirements
     and cannot be changed.  You cannot specify alignment for a typedef
     name because such a name is just an alias, not a distinct type.

     As in the preceding examples, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     variable or structure field.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a variable or
     field to the maximum useful alignment for the target machine you
     are compiling for.  For example, you could write:

          short array[3] __attribute__ ((aligned));

     Whenever you leave out the alignment factor in an `aligned'
     attribute specification, the compiler automatically sets the
     alignment for the declared variable or field to the largest
     alignment which is ever used for any data type on the target
     machine you are compiling for.  Doing this can often make copy
     operations more efficient, because the compiler can use whatever
     instructions copy the biggest chunks of memory when performing
     copies to or from the variables or fields that you have aligned
     this way.

     The `aligned' attribute can only increase the alignment; but you
     can decrease it by specifying `packed' as well.  See below.

     Note that the effectiveness of `aligned' attributes may be limited
     by inherent limitations in your linker.  On many systems, the
     linker is only able to arrange for variables to be aligned up to a
     certain maximum alignment.  (For some linkers, the maximum
     supported alignment may be very very small.)  If your linker is
     only able to align variables up to a maximum of 8 byte alignment,
     then specifying `aligned(16)' in an `__attribute__' will still
     only provide you with 8 byte alignment.  See your linker
     documentation for further information.

`mode (MODE)'
     This attribute specifies the data type for the
     declaration--whichever type corresponds to the mode MODE.  This in
     effect lets you request an integer or floating point type
     according to its width.

     You may also specify a mode of `byte' or `__byte__' to indicate
     the mode corresponding to a one-byte integer, `word' or `__word__'
     for the mode of a one-word integer, and `pointer' or `__pointer__'
     for the mode used to represent pointers.

`nocommon'
     This attribute specifies requests GNU CC not to place a variable
     "common" but instead to allocate space for it directly.  If you
     specify the `-fno-common' flag, GNU CC will do this for all
     variables.

     Specifying the `nocommon' attribute for a variable provides an
     initialization of zeros.  A variable may only be initialized in one
     source file.

`packed'
     The `packed' attribute specifies that a variable or structure field
     should have the smallest possible alignment--one byte for a
     variable, and one bit for a field, unless you specify a larger
     value with the `aligned' attribute.

     Here is a structure in which the field `x' is packed, so that it
     immediately follows `a':

          struct foo
          {
            char a;
            int x[2] __attribute__ ((packed));
          };

`section ("section-name")'
     Normally, the compiler places the objects it generates in sections
     like `data' and `bss'.  Sometimes, however, you need additional
     sections, or you need certain particular variables to appear in
     special sections, for example to map to special hardware.  The
     `section' attribute specifies that a variable (or function) lives
     in a particular section.  For example, this small program uses
     several specific section names:

          struct duart a __attribute__ ((section ("DUART_A"))) = { 0 };
          struct duart b __attribute__ ((section ("DUART_B"))) = { 0 };
          char stack[10000] __attribute__ ((section ("STACK"))) = { 0 };
          int init_data __attribute__ ((section ("INITDATA"))) = 0;

          main()
          {
            /* Initialize stack pointer */
            init_sp (stack + sizeof (stack));

            /* Initialize initialized data */
            memcpy (&init_data, &data, &edata - &data);

            /* Turn on the serial ports */
            init_duart (&a);
            init_duart (&b);
          }

     Use the `section' attribute with an _initialized_ definition of a
     _global_ variable, as shown in the example.  GNU CC issues a
     warning and otherwise ignores the `section' attribute in
     uninitialized variable declarations.

     You may only use the `section' attribute with a fully initialized
     global definition because of the way linkers work.  The linker
     requires each object be defined once, with the exception that
     uninitialized variables tentatively go in the `common' (or `bss')
     section and can be multiply "defined".  You can force a variable
     to be initialized with the `-fno-common' flag or the `nocommon'
     attribute.

     Some file formats do not support arbitrary sections so the
     `section' attribute is not available on all platforms.  If you
     need to map the entire contents of a module to a particular
     section, consider using the facilities of the linker instead.

`transparent_union'
     This attribute, attached to a function parameter which is a union,
     means that the corresponding argument may have the type of any
     union member, but the argument is passed as if its type were that
     of the first union member.  For more details see *Note Type
     Attributes::.  You can also use this attribute on a `typedef' for
     a union data type; then it applies to all function parameters with
     that type.

`unused'
     This attribute, attached to a variable, means that the variable is
     meant to be possibly unused.  GNU CC will not produce a warning
     for this variable.

`weak'
     The `weak' attribute is described in *Note Function Attributes::.

`model (MODEL-NAME)'
     Use this attribute on the M32R/D to set the addressability of an
     object.  The identifier MODEL-NAME is one of `small', `medium', or
     `large', representing each of the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the `ld24' instruction).

     Medium and large model objects may live anywhere in the 32 bit
     address space (the compiler will generate `seth/add3' instructions
     to load their addresses).


   To specify multiple attributes, separate them by commas within the
double parentheses: for example, `__attribute__ ((aligned (16),
packed))'.


File: gcc.info,  Node: Type Attributes,  Next: Alignment,  Prev: Variable Attributes,  Up: C Extensions

4.30 Specifying Attributes of Types
===================================

The keyword `__attribute__' allows you to specify special attributes of
`struct' and `union' types when you define such types.  This keyword is
followed by an attribute specification inside double parentheses.
Three attributes are currently defined for types: `aligned', `packed',
and `transparent_union'.  Other attributes are defined for functions
(*note Function Attributes::) and for variables (*note Variable
Attributes::).

   You may also specify any one of these attributes with `__' preceding
and following its keyword.  This allows you to use these attributes in
header files without being concerned about a possible macro of the same
name.  For example, you may use `__aligned__' instead of `aligned'.

   You may specify the `aligned' and `transparent_union' attributes
either in a `typedef' declaration or just past the closing curly brace
of a complete enum, struct or union type _definition_ and the `packed'
attribute only past the closing brace of a definition.

   You may also specify attributes between the enum, struct or union
tag and the name of the type rather than after the closing brace.

`aligned (ALIGNMENT)'
     This attribute specifies a minimum alignment (in bytes) for
     variables of the specified type.  For example, the declarations:

          struct S { short f[3]; } __attribute__ ((aligned (8)));
          typedef int more_aligned_int __attribute__ ((aligned (8)));

     force the compiler to insure (as far as it can) that each variable
     whose type is `struct S' or `more_aligned_int' will be allocated
     and aligned _at least_ on a 8-byte boundary.  On a Sparc, having
     all variables of type `struct S' aligned to 8-byte boundaries
     allows the compiler to use the `ldd' and `std' (doubleword load and
     store) instructions when copying one variable of type `struct S' to
     another, thus improving run-time efficiency.

     Note that the alignment of any given `struct' or `union' type is
     required by the ANSI C standard to be at least a perfect multiple
     of the lowest common multiple of the alignments of all of the
     members of the `struct' or `union' in question.  This means that
     you _can_ effectively adjust the alignment of a `struct' or `union'
     type by attaching an `aligned' attribute to any one of the members
     of such a type, but the notation illustrated in the example above
     is a more obvious, intuitive, and readable way to request the
     compiler to adjust the alignment of an entire `struct' or `union'
     type.

     As in the preceding example, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     `struct' or `union' type.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a type to the
     maximum useful alignment for the target machine you are compiling
     for.  For example, you could write:

          struct S { short f[3]; } __attribute__ ((aligned));

     Whenever you leave out the alignment factor in an `aligned'
     attribute specification, the compiler automatically sets the
     alignment for the type to the largest alignment which is ever used
     for any data type on the target machine you are compiling for.
     Doing this can often make copy operations more efficient, because
     the compiler can use whatever instructions copy the biggest chunks
     of memory when performing copies to or from the variables which
     have types that you have aligned this way.

     In the example above, if the size of each `short' is 2 bytes, then
     the size of the entire `struct S' type is 6 bytes.  The smallest
     power of two which is greater than or equal to that is 8, so the
     compiler sets the alignment for the entire `struct S' type to 8
     bytes.

     Note that although you can ask the compiler to select a
     time-efficient alignment for a given type and then declare only
     individual stand-alone objects of that type, the compiler's
     ability to select a time-efficient alignment is primarily useful
     only when you plan to create arrays of variables having the
     relevant (efficiently aligned) type.  If you declare or use arrays
     of variables of an efficiently-aligned type, then it is likely
     that your program will also be doing pointer arithmetic (or
     subscripting, which amounts to the same thing) on pointers to the
     relevant type, and the code that the compiler generates for these
     pointer arithmetic operations will often be more efficient for
     efficiently-aligned types than for other types.

     The `aligned' attribute can only increase the alignment; but you
     can decrease it by specifying `packed' as well.  See below.

     Note that the effectiveness of `aligned' attributes may be limited
     by inherent limitations in your linker.  On many systems, the
     linker is only able to arrange for variables to be aligned up to a
     certain maximum alignment.  (For some linkers, the maximum
     supported alignment may be very very small.)  If your linker is
     only able to align variables up to a maximum of 8 byte alignment,
     then specifying `aligned(16)' in an `__attribute__' will still
     only provide you with 8 byte alignment.  See your linker
     documentation for further information.

`packed'
     This attribute, attached to an `enum', `struct', or `union' type
     definition, specified that the minimum required memory be used to
     represent the type.

     Specifying this attribute for `struct' and `union' types is
     equivalent to specifying the `packed' attribute on each of the
     structure or union members.  Specifying the `-fshort-enums' flag
     on the line is equivalent to specifying the `packed' attribute on
     all `enum' definitions.

     You may only specify this attribute after a closing curly brace on
     an `enum' definition, not in a `typedef' declaration, unless that
     declaration also contains the definition of the `enum'.

`transparent_union'
     This attribute, attached to a `union' type definition, indicates
     that any function parameter having that union type causes calls to
     that function to be treated in a special way.

     First, the argument corresponding to a transparent union type can
     be of any type in the union; no cast is required.  Also, if the
     union contains a pointer type, the corresponding argument can be a
     null pointer constant or a void pointer expression; and if the
     union contains a void pointer type, the corresponding argument can
     be any pointer expression.  If the union member type is a pointer,
     qualifiers like `const' on the referenced type must be respected,
     just as with normal pointer conversions.

     Second, the argument is passed to the function using the calling
     conventions of first member of the transparent union, not the
     calling conventions of the union itself.  All members of the union
     must have the same machine representation; this is necessary for
     this argument passing to work properly.

     Transparent unions are designed for library functions that have
     multiple interfaces for compatibility reasons.  For example,
     suppose the `wait' function must accept either a value of type
     `int *' to comply with Posix, or a value of type `union wait *' to
     comply with the 4.1BSD interface.  If `wait''s parameter were
     `void *', `wait' would accept both kinds of arguments, but it
     would also accept any other pointer type and this would make
     argument type checking less useful.  Instead, `<sys/wait.h>' might
     define the interface as follows:

          typedef union
            {
              int *__ip;
              union wait *__up;
            } wait_status_ptr_t __attribute__ ((__transparent_union__));

          pid_t wait (wait_status_ptr_t);

     This interface allows either `int *' or `union wait *' arguments
     to be passed, using the `int *' calling convention.  The program
     can call `wait' with arguments of either type:

          int w1 () { int w; return wait (&w); }
          int w2 () { union wait w; return wait (&w); }

     With this interface, `wait''s implementation might look like this:

          pid_t wait (wait_status_ptr_t p)
          {
            return waitpid (-1, p.__ip, 0);
          }

`unused'
     When attached to a type (including a `union' or a `struct'), this
     attribute means that variables of that type are meant to appear
     possibly unused.  GNU CC will not produce a warning for any
     variables of that type, even if the variable appears to do
     nothing.  This is often the case with lock or thread classes,
     which are usually defined and then not referenced, but contain
     constructors and destructors that have nontrivial bookkeeping
     functions.


   To specify multiple attributes, separate them by commas within the
double parentheses: for example, `__attribute__ ((aligned (16),
packed))'.


File: gcc.info,  Node: Inline,  Next: Extended Asm,  Prev: Alignment,  Up: C Extensions

4.31 An Inline Function is As Fast As a Macro
=============================================

By declaring a function `inline', you can direct GNU CC to integrate
that function's code into the code for its callers.  This makes
execution faster by eliminating the function-call overhead; in
addition, if any of the actual argument values are constant, their known
values may permit simplifications at compile time so that not all of the
inline function's code needs to be included.  The effect on code size is
less predictable; object code may be larger or smaller with function
inlining, depending on the particular case.  Inlining of functions is an
optimization and it really "works" only in optimizing compilation.  If
you don't use `-O', no function is really inline.

   To declare a function inline, use the `inline' keyword in its
declaration, like this:

     inline int
     inc (int *a)
     {
       (*a)++;
     }

   (If you are writing a header file to be included in ANSI C programs,
write `__inline__' instead of `inline'.  *Note Alternate Keywords::.)
You can also make all "simple enough" functions inline with the option
`-finline-functions'.

   Note that certain usages in a function definition can make it
unsuitable for inline substitution.  Among these usages are: use of
varargs, use of alloca, use of variable sized data types (*note
Variable Length::), use of computed goto (*note Labels as Values::),
use of nonlocal goto, and nested functions (*note Nested Functions::).
Using `-Winline' will warn when a function marked `inline' could not be
substituted, and will give the reason for the failure.

   Note that in C and Objective C, unlike C++, the `inline' keyword
does not affect the linkage of the function.

   GNU CC automatically inlines member functions defined within the
class body of C++ programs even if they are not explicitly declared
`inline'.  (You can override this with `-fno-default-inline'; *note
Options Controlling C++ Dialect: C++ Dialect Options.)

   When a function is both inline and `static', if all calls to the
function are integrated into the caller, and the function's address is
never used, then the function's own assembler code is never referenced.
In this case, GNU CC does not actually output assembler code for the
function, unless you specify the option `-fkeep-inline-functions'.
Some calls cannot be integrated for various reasons (in particular,
calls that precede the function's definition cannot be integrated, and
neither can recursive calls within the definition).  If there is a
nonintegrated call, then the function is compiled to assembler code as
usual.  The function must also be compiled as usual if the program
refers to its address, because that can't be inlined.

   When an inline function is not `static', then the compiler must
assume that there may be calls from other source files; since a global
symbol can be defined only once in any program, the function must not
be defined in the other source files, so the calls therein cannot be
integrated.  Therefore, a non-`static' inline function is always
compiled on its own in the usual fashion.

   If you specify both `inline' and `extern' in the function
definition, then the definition is used only for inlining.  In no case
is the function compiled on its own, not even if you refer to its
address explicitly.  Such an address becomes an external reference, as
if you had only declared the function, and had not defined it.

   This combination of `inline' and `extern' has almost the effect of a
macro.  The way to use it is to put a function definition in a header
file with these keywords, and put another copy of the definition
(lacking `inline' and `extern') in a library file.  The definition in
the header file will cause most calls to the function to be inlined.
If any uses of the function remain, they will refer to the single copy
in the library.

   GNU C does not inline any functions when not optimizing.  It is not
clear whether it is better to inline or not, in this case, but we found
that a correct implementation when not optimizing was difficult.  So we
did the easy thing, and turned it off.


File: gcc.info,  Node: Extended Asm,  Next: Asm Labels,  Prev: Inline,  Up: C Extensions

4.32 Assembler Instructions with C Expression Operands
======================================================

In an assembler instruction using `asm', you can specify the operands
of the instruction using C expressions.  This means you need not guess
which registers or memory locations will contain the data you want to
use.

   You must specify an assembler instruction template much like what
appears in a machine description, plus an operand constraint string for
each operand.

   For example, here is how to use the 68881's `fsinx' instruction:

     asm ("fsinx %1,%0" : "=f" (result) : "f" (angle));

Here `angle' is the C expression for the input operand while `result'
is that of the output operand.  Each has `"f"' as its operand
constraint, saying that a floating point register is required.  The `='
in `=f' indicates that the operand is an output; all output operands'
constraints must use `='.  The constraints use the same language used
in the machine description (*note Constraints::).

   Each operand is described by an operand-constraint string followed by
the C expression in parentheses.  A colon separates the assembler
template from the first output operand and another separates the last
output operand from the first input, if any.  Commas separate the
operands within each group.  The total number of operands is limited to
ten or to the maximum number of operands in any instruction pattern in
the machine description, whichever is greater.

   If there are no output operands but there are input operands, you
must place two consecutive colons surrounding the place where the output
operands would go.

   Output operand expressions must be lvalues; the compiler can check
this.  The input operands need not be lvalues.  The compiler cannot
check whether the operands have data types that are reasonable for the
instruction being executed.  It does not parse the assembler instruction
template and does not know what it means or even whether it is valid
assembler input.  The extended `asm' feature is most often used for
machine instructions the compiler itself does not know exist.  If the
output expression cannot be directly addressed (for example, it is a
bit field), your constraint must allow a register.  In that case, GNU CC
will use the register as the output of the `asm', and then store that
register into the output.

   The ordinary output operands must be write-only; GNU CC will assume
that the values in these operands before the instruction are dead and
need not be generated.  Extended asm supports input-output or read-write
operands.  Use the constraint character `+' to indicate such an operand
and list it with the output operands.

   When the constraints for the read-write operand (or the operand in
which only some of the bits are to be changed) allows a register, you
may, as an alternative, logically split its function into two separate
operands, one input operand and one write-only output operand.  The
connection between them is expressed by constraints which say they need
to be in the same location when the instruction executes.  You can use
the same C expression for both operands, or different expressions.  For
example, here we write the (fictitious) `combine' instruction with
`bar' as its read-only source operand and `foo' as its read-write
destination:

     asm ("combine %2,%0" : "=r" (foo) : "0" (foo), "g" (bar));

The constraint `"0"' for operand 1 says that it must occupy the same
location as operand 0.  A digit in constraint is allowed only in an
input operand and it must refer to an output operand.

   Only a digit in the constraint can guarantee that one operand will
be in the same place as another.  The mere fact that `foo' is the value
of both operands is not enough to guarantee that they will be in the
same place in the generated assembler code.  The following would not
work reliably:

     asm ("combine %2,%0" : "=r" (foo) : "r" (foo), "g" (bar));

   Various optimizations or reloading could cause operands 0 and 1 to
be in different registers; GNU CC knows no reason not to do so.  For
example, the compiler might find a copy of the value of `foo' in one
register and use it for operand 1, but generate the output operand 0 in
a different register (copying it afterward to `foo''s own address).  Of
course, since the register for operand 1 is not even mentioned in the
assembler code, the result will not work, but GNU CC can't tell that.

   Some instructions clobber specific hard registers.  To describe this,
write a third colon after the input operands, followed by the names of
the clobbered hard registers (given as strings).  Here is a realistic
example for the VAX:

     asm volatile ("movc3 %0,%1,%2"
                   : /* no outputs */
                   : "g" (from), "g" (to), "g" (count)
                   : "r0", "r1", "r2", "r3", "r4", "r5");

   It is an error for a clobber description to overlap an input or
output operand (for example, an operand describing a register class
with one member, mentioned in the clobber list).  Most notably, it is
invalid to describe that an input operand is modified, but unused as
output.  It has to be specified as an input and output operand anyway.
Note that if there are only unused output operands, you will then also
need to specify `volatile' for the `asm' construct, as described below.

   If you refer to a particular hardware register from the assembler
code, you will probably have to list the register after the third colon
to tell the compiler the register's value is modified.  In some
assemblers, the register names begin with `%'; to produce one `%' in the
assembler code, you must write `%%' in the input.

   If your assembler instruction can alter the condition code register,
add `cc' to the list of clobbered registers.  GNU CC on some machines
represents the condition codes as a specific hardware register; `cc'
serves to name this register.  On other machines, the condition code is
handled differently, and specifying `cc' has no effect.  But it is
valid no matter what the machine.

   If your assembler instruction modifies memory in an unpredictable
fashion, add `memory' to the list of clobbered registers.  This will
cause GNU CC to not keep memory values cached in registers across the
assembler instruction.

   You can put multiple assembler instructions together in a single
`asm' template, separated either with newlines (written as `\n') or
with semicolons if the assembler allows such semicolons.  The GNU
assembler allows semicolons and most Unix assemblers seem to do so.
The input operands are guaranteed not to use any of the clobbered
registers, and neither will the output operands' addresses, so you can
read and write the clobbered registers as many times as you like.  Here
is an example of multiple instructions in a template; it assumes the
subroutine `_foo' accepts arguments in registers 9 and 10:

     asm ("movl %0,r9;movl %1,r10;call _foo"
          : /* no outputs */
          : "g" (from), "g" (to)
          : "r9", "r10");

   Unless an output operand has the `&' constraint modifier, GNU CC may
allocate it in the same register as an unrelated input operand, on the
assumption the inputs are consumed before the outputs are produced.
This assumption may be false if the assembler code actually consists of
more than one instruction.  In such a case, use `&' for each output
operand that may not overlap an input.  *Note Modifiers::.

   If you want to test the condition code produced by an assembler
instruction, you must include a branch and a label in the `asm'
construct, as follows:

     asm ("clr %0;frob %1;beq 0f;mov #1,%0;0:"
          : "g" (result)
          : "g" (input));

This assumes your assembler supports local labels, as the GNU assembler
and most Unix assemblers do.

   Speaking of labels, jumps from one `asm' to another are not
supported.  The compiler's optimizers do not know about these jumps, and
therefore they cannot take account of them when deciding how to
optimize.

   Usually the most convenient way to use these `asm' instructions is to
encapsulate them in macros that look like functions.  For example,

     #define sin(x)       \
     ({ double __value, __arg = (x);   \
        asm ("fsinx %1,%0": "=f" (__value): "f" (__arg));  \
        __value; })

Here the variable `__arg' is used to make sure that the instruction
operates on a proper `double' value, and to accept only those arguments
`x' which can convert automatically to a `double'.

   Another way to make sure the instruction operates on the correct data
type is to use a cast in the `asm'.  This is different from using a
variable `__arg' in that it converts more different types.  For
example, if the desired type were `int', casting the argument to `int'
would accept a pointer with no complaint, while assigning the argument
to an `int' variable named `__arg' would warn about using a pointer
unless the caller explicitly casts it.

   If an `asm' has output operands, GNU CC assumes for optimization
purposes the instruction has no side effects except to change the output
operands.  This does not mean instructions with a side effect cannot be
used, but you must be careful, because the compiler may eliminate them
if the output operands aren't used, or move them out of loops, or
replace two with one if they constitute a common subexpression.  Also,
if your instruction does have a side effect on a variable that otherwise
appears not to change, the old value of the variable may be reused later
if it happens to be found in a register.

   You can prevent an `asm' instruction from being deleted, moved
significantly, or combined, by writing the keyword `volatile' after the
`asm'.  For example:

     #define get_and_set_priority(new)  \
     ({ int __old; \
        asm volatile ("get_and_set_priority %0, %1": "=g" (__old) : "g" (new)); \
        __old; })

If you write an `asm' instruction with no outputs, GNU CC will know the
instruction has side-effects and will not delete the instruction or
move it outside of loops.  If the side-effects of your instruction are
not purely external, but will affect variables in your program in ways
other than reading the inputs and clobbering the specified registers or
memory, you should write the `volatile' keyword to prevent future
versions of GNU CC from moving the instruction around within a core
region.

   An `asm' instruction without any operands or clobbers (and "old
style" `asm') will not be deleted or moved significantly, regardless,
unless it is unreachable, the same wasy as if you had written a
`volatile' keyword.

   Note that even a volatile `asm' instruction can be moved in ways
that appear insignificant to the compiler, such as across jump
instructions.  You can't expect a sequence of volatile `asm'
instructions to remain perfectly consecutive.  If you want consecutive
output, use a single `asm'.

   It is a natural idea to look for a way to give access to the
condition code left by the assembler instruction.  However, when we
attempted to implement this, we found no way to make it work reliably.
The problem is that output operands might need reloading, which would
result in additional following "store" instructions.  On most machines,
these instructions would alter the condition code before there was time
to test it.  This problem doesn't arise for ordinary "test" and
"compare" instructions because they don't have any output operands.

   If you are writing a header file that should be includable in ANSI C
programs, write `__asm__' instead of `asm'.  *Note Alternate Keywords::.

4.32.1 i386 floating point asm operands
---------------------------------------

There are several rules on the usage of stack-like regs in asm_operands
insns.  These rules apply only to the operands that are stack-like regs:

  1. Given a set of input regs that die in an asm_operands, it is
     necessary to know which are implicitly popped by the asm, and
     which must be explicitly popped by gcc.

     An input reg that is implicitly popped by the asm must be
     explicitly clobbered, unless it is constrained to match an output
     operand.

  2. For any input reg that is implicitly popped by an asm, it is
     necessary to know how to adjust the stack to compensate for the
     pop.  If any non-popped input is closer to the top of the
     reg-stack than the implicitly popped reg, it would not be possible
     to know what the stack looked like -- it's not clear how the rest
     of the stack "slides up".

     All implicitly popped input regs must be closer to the top of the
     reg-stack than any input that is not implicitly popped.

     It is possible that if an input dies in an insn, reload might use
     the input reg for an output reload.  Consider this example:

          asm ("foo" : "=t" (a) : "f" (b));

     This asm says that input B is not popped by the asm, and that the
     asm pushes a result onto the reg-stack, ie, the stack is one
     deeper after the asm than it was before.  But, it is possible that
     reload will think that it can use the same reg for both the input
     and the output, if input B dies in this insn.

     If any input operand uses the `f' constraint, all output reg
     constraints must use the `&' earlyclobber.

     The asm above would be written as

          asm ("foo" : "=&t" (a) : "f" (b));

  3. Some operands need to be in particular places on the stack.  All
     output operands fall in this category -- there is no other way to
     know which regs the outputs appear in unless the user indicates
     this in the constraints.

     Output operands must specifically indicate which reg an output
     appears in after an asm.  `=f' is not allowed: the operand
     constraints must select a class with a single reg.

  4. Output operands may not be "inserted" between existing stack regs.
     Since no 387 opcode uses a read/write operand, all output operands
     are dead before the asm_operands, and are pushed by the
     asm_operands.  It makes no sense to push anywhere but the top of
     the reg-stack.

     Output operands must start at the top of the reg-stack: output
     operands may not "skip" a reg.

  5. Some asm statements may need extra stack space for internal
     calculations.  This can be guaranteed by clobbering stack registers
     unrelated to the inputs and outputs.


   Here are a couple of reasonable asms to want to write.  This asm
takes one input, which is internally popped, and produces two outputs.

     asm ("fsincos" : "=t" (cos), "=u" (sin) : "0" (inp));

   This asm takes two inputs, which are popped by the `fyl2xp1' opcode,
and replaces them with one output.  The user must code the `st(1)'
clobber for reg-stack.c to know that `fyl2xp1' pops both inputs.

     asm ("fyl2xp1" : "=t" (result) : "0" (x), "u" (y) : "st(1)");


File: gcc.info,  Node: Asm Labels,  Next: Explicit Reg Vars,  Prev: Extended Asm,  Up: C Extensions

4.33 Controlling Names Used in Assembler Code
=============================================

You can specify the name to be used in the assembler code for a C
function or variable by writing the `asm' (or `__asm__') keyword after
the declarator as follows:

     int foo asm ("myfoo") = 2;

This specifies that the name to be used for the variable `foo' in the
assembler code should be `myfoo' rather than the usual `_foo'.

   On systems where an underscore is normally prepended to the name of
a C function or variable, this feature allows you to define names for
the linker that do not start with an underscore.

   You cannot use `asm' in this way in a function _definition_; but you
can get the same effect by writing a declaration for the function
before its definition and putting `asm' there, like this:

     extern func () asm ("FUNC");

     func (x, y)
          int x, y;
     ...

   It is up to you to make sure that the assembler names you choose do
not conflict with any other assembler symbols.  Also, you must not use a
register name; that would produce completely invalid assembler code.
GNU CC does not as yet have the ability to store static variables in
registers.  Perhaps that will be added.


File: gcc.info,  Node: Explicit Reg Vars,  Next: Alternate Keywords,  Prev: Asm Labels,  Up: C Extensions

4.34 Variables in Specified Registers
=====================================

GNU C allows you to put a few global variables into specified hardware
registers.  You can also specify the register in which an ordinary
register variable should be allocated.

   * Global register variables reserve registers throughout the program.
     This may be useful in programs such as programming language
     interpreters which have a couple of global variables that are
     accessed very often.

   * Local register variables in specific registers do not reserve the
     registers.  The compiler's data flow analysis is capable of
     determining where the specified registers contain live values, and
     where they are available for other uses.  Stores into local
     register variables may be deleted when they appear to be dead
     according to dataflow analysis.  References to local register
     variables may be deleted or moved or simplified.

     These local variables are sometimes convenient for use with the
     extended `asm' feature (*note Extended Asm::), if you want to
     write one output of the assembler instruction directly into a
     particular register.  (This will work provided the register you
     specify fits the constraints specified for that operand in the
     `asm'.)

* Menu:

* Global Reg Vars::
* Local Reg Vars::


File: gcc.info,  Node: Global Reg Vars,  Next: Local Reg Vars,  Up: Explicit Reg Vars

4.34.1 Defining Global Register Variables
-----------------------------------------

You can define a global register variable in GNU C like this:

     register int *foo asm ("a5");

Here `a5' is the name of the register which should be used.  Choose a
register which is normally saved and restored by function calls on your
machine, so that library routines will not clobber it.

   Naturally the register name is cpu-dependent, so you would need to
conditionalize your program according to cpu type.  The register `a5'
would be a good choice on a 68000 for a variable of pointer type.  On
machines with register windows, be sure to choose a "global" register
that is not affected magically by the function call mechanism.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals.
For example, some 68000 operating systems call this register `%a5'.

   Eventually there may be a way of asking the compiler to choose a
register automatically, but first we need to figure out how it should
choose and how to enable you to guide the choice.  No solution is
evident.

   Defining a global register variable in a certain register reserves
that register entirely for this use, at least within the current
compilation.  The register will not be allocated for any other purpose
in the functions in the current compilation.  The register will not be
saved and restored by these functions.  Stores into this register are
never deleted even if they would appear to be dead, but references may
be deleted or moved or simplified.

   It is not safe to access the global register variables from signal
handlers, or from more than one thread of control, because the system
library routines may temporarily use the register for other things
(unless you recompile them specially for the task at hand).

   It is not safe for one function that uses a global register variable
to call another such function `foo' by way of a third function `lose'
that was compiled without knowledge of this variable (i.e. in a
different source file in which the variable wasn't declared).  This is
because `lose' might save the register and put some other value there.
For example, you can't expect a global register variable to be
available in the comparison-function that you pass to `qsort', since
`qsort' might have put something else in that register.  (If you are
prepared to recompile `qsort' with the same global register variable,
you can solve this problem.)

   If you want to recompile `qsort' or other source files which do not
actually use your global register variable, so that they will not use
that register for any other purpose, then it suffices to specify the
compiler option `-ffixed-REG'.  You need not actually add a global
register declaration to their source code.

   A function which can alter the value of a global register variable
cannot safely be called from a function compiled without this variable,
because it could clobber the value the caller expects to find there on
return.  Therefore, the function which is the entry point into the part
of the program that uses the global register variable must explicitly
save and restore the value which belongs to its caller.

   On most machines, `longjmp' will restore to each global register
variable the value it had at the time of the `setjmp'.  On some
machines, however, `longjmp' will not change the value of global
register variables.  To be portable, the function that called `setjmp'
should make other arrangements to save the values of the global register
variables, and to restore them in a `longjmp'.  This way, the same
thing will happen regardless of what `longjmp' does.

   All global register variable declarations must precede all function
definitions.  If such a declaration could appear after function
definitions, the declaration would be too late to prevent the register
from being used for other purposes in the preceding functions.

   Global register variables may not have initial values, because an
executable file has no means to supply initial contents for a register.

   On the Sparc, there are reports that g3 ... g7 are suitable
registers, but certain library functions, such as `getwd', as well as
the subroutines for division and remainder, modify g3 and g4.  g1 and
g2 are local temporaries.

   On the 68000, a2 ... a5 should be suitable, as should d2 ... d7.  Of
course, it will not do to use more than a few of those.


File: gcc.info,  Node: Local Reg Vars,  Prev: Global Reg Vars,  Up: Explicit Reg Vars

4.34.2 Specifying Registers for Local Variables
-----------------------------------------------

You can define a local register variable with a specified register like
this:

     register int *foo asm ("a5");

Here `a5' is the name of the register which should be used.  Note that
this is the same syntax used for defining global register variables,
but for a local variable it would appear within a function.

   Naturally the register name is cpu-dependent, but this is not a
problem, since specific registers are most often useful with explicit
assembler instructions (*note Extended Asm::).  Both of these things
generally require that you conditionalize your program according to cpu
type.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals.
For example, some 68000 operating systems call this register `%a5'.

   Defining such a register variable does not reserve the register; it
remains available for other uses in places where flow control determines
the variable's value is not live.  However, these registers are made
unavailable for use in the reload pass; excessive use of this feature
leaves the compiler too few available registers to compile certain
functions.

   This option does not guarantee that GNU CC will generate code that
has this variable in the register you specify at all times.  You may not
code an explicit reference to this register in an `asm' statement and
assume it will always refer to this variable.

   Stores into local register variables may be deleted when they appear
to be dead according to dataflow analysis.  References to local
register variables may be deleted or moved or simplified.


File: gcc.info,  Node: Alternate Keywords,  Next: Incomplete Enums,  Prev: Explicit Reg Vars,  Up: C Extensions

4.35 Alternate Keywords
=======================

The option `-traditional' disables certain keywords; `-ansi' disables
certain others.  This causes trouble when you want to use GNU C
extensions, or ANSI C features, in a general-purpose header file that
should be usable by all programs, including ANSI C programs and
traditional ones.  The keywords `asm', `typeof' and `inline' cannot be
used since they won't work in a program compiled with `-ansi', while
the keywords `const', `volatile', `signed', `typeof' and `inline' won't
work in a program compiled with `-traditional'.

   The way to solve these problems is to put `__' at the beginning and
end of each problematical keyword.  For example, use `__asm__' instead
of `asm', `__const__' instead of `const', and `__inline__' instead of
`inline'.

   Other C compilers won't accept these alternative keywords; if you
want to compile with another compiler, you can define the alternate
keywords as macros to replace them with the customary keywords.  It
looks like this:

     #ifndef __GNUC__
     #define __asm__ asm
     #endif

   `-pedantic' causes warnings for many GNU C extensions.  You can
prevent such warnings within one expression by writing `__extension__'
before the expression.  `__extension__' has no effect aside from this.


File: gcc.info,  Node: Incomplete Enums,  Next: Function Names,  Prev: Alternate Keywords,  Up: C Extensions

4.36 Incomplete `enum' Types
============================

You can define an `enum' tag without specifying its possible values.
This results in an incomplete type, much like what you get if you write
`struct foo' without describing the elements.  A later declaration
which does specify the possible values completes the type.

   You can't allocate variables or storage using the type while it is
incomplete.  However, you can work with pointers to that type.

   This extension may not be very useful, but it makes the handling of
`enum' more consistent with the way `struct' and `union' are handled.

   This extension is not supported by GNU C++.


File: gcc.info,  Node: Function Names,  Next: Return Address,  Prev: Incomplete Enums,  Up: C Extensions

4.37 Function Names as Strings
==============================

GNU CC predefines two string variables to be the name of the current
function.  The variable `__FUNCTION__' is the name of the function as
it appears in the source.  The variable `__PRETTY_FUNCTION__' is the
name of the function pretty printed in a language specific fashion.

   These names are always the same in a C function, but in a C++
function they may be different.  For example, this program:

     extern "C" {
     extern int printf (char *, ...);
     }

     class a {
      public:
       sub (int i)
         {
           printf ("__FUNCTION__ = %s\n", __FUNCTION__);
           printf ("__PRETTY_FUNCTION__ = %s\n", __PRETTY_FUNCTION__);
         }
     };

     int
     main (void)
     {
       a ax;
       ax.sub (0);
       return 0;
     }

gives this output:

     __FUNCTION__ = sub
     __PRETTY_FUNCTION__ = int  a::sub (int)

   These names are not macros: they are predefined string variables.
For example, `#ifdef __FUNCTION__' does not have any special meaning
inside a function, since the preprocessor does not do anything special
with the identifier `__FUNCTION__'.


File: gcc.info,  Node: Return Address,  Next: Other Builtins,  Prev: Function Names,  Up: C Extensions

4.38 Getting the Return or Frame Address of a Function
======================================================

These functions may be used to get information about the callers of a
function.

`__builtin_return_address (LEVEL)'
     This function returns the return address of the current function,
     or of one of its callers.  The LEVEL argument is number of frames
     to scan up the call stack.  A value of `0' yields the return
     address of the current function, a value of `1' yields the return
     address of the caller of the current function, and so forth.

     The LEVEL argument must be a constant integer.

     On some machines it may be impossible to determine the return
     address of any function other than the current one; in such cases,
     or when the top of the stack has been reached, this function will
     return `0'.

     This function should only be used with a non-zero argument for
     debugging purposes.

`__builtin_frame_address (LEVEL)'
     This function is similar to `__builtin_return_address', but it
     returns the address of the function frame rather than the return
     address of the function.  Calling `__builtin_frame_address' with a
     value of `0' yields the frame address of the current function, a
     value of `1' yields the frame address of the caller of the current
     function, and so forth.

     The frame is the area on the stack which holds local variables and
     saved registers.  The frame address is normally the address of the
     first word pushed on to the stack by the function.  However, the
     exact definition depends upon the processor and the calling
     convention.  If the processor has a dedicated frame pointer
     register, and the function has a frame, then
     `__builtin_frame_address' will return the value of the frame
     pointer register.

     The caveats that apply to `__builtin_return_address' apply to this
     function as well.


File: gcc.info,  Node: Other Builtins,  Next: Deprecated Features,  Prev: Return Address,  Up: C Extensions

4.39 Other built-in functions provided by GNU CC
================================================

GNU CC provides a large number of built-in functions other than the ones
mentioned above.  Some of these are for internal use in the processing
of exceptions or variable-length argument lists and will not be
documented here because they may change from time to time; we do not
recommend general use of these functions.

   The remaining functions are provided for optimization purposes.

   GNU CC includes builtin versions of many of the functions in the
standard C library.  These will always be treated as having the same
meaning as the C library function even if you specify the
`-fno-builtin' (*note C Dialect Options::) option.  These functions
correspond to the C library functions `alloca', `ffs', `abs', `fabsf',
`fabs', `fabsl', `labs', `memcpy', `memcmp', `strcmp', `strcpy',
`strlen', `sqrtf', `sqrt', `sqrtl', `sinf', `sin', `sinl', `cosf',
`cos', and `cosl'.

   You can use the builtin function `__builtin_constant_p' to determine
if a value is known to be constant at compile-time and hence that GNU
CC can perform constant-folding on expressions involving that value.
The argument of the function is the value to test.  The function
returns the integer 1 if the argument is known to be a compile-time
constant and 0 if it is not known to be a compile-time constant.  A
return of 0 does not indicate that the value is _not_ a constant, but
merely that GNU CC cannot prove it is a constant with the specified
value of the `-O' option.

   You would typically use this function in an embedded application
where memory was a critical resource.  If you have some complex
calculation, you may want it to be folded if it involves constants, but
need to call a function if it does not.  For example:

     #define Scale_Value(X)  \
       (__builtin_constant_p (X) ? ((X) * SCALE + OFFSET) : Scale (X))

   You may use this builtin function in either a macro or an inline
function.  However, if you use it in an inlined function and pass an
argument of the function as the argument to the builtin, GNU CC will
never return 1 when you call the inline function with a string constant
or constructor expression (*note Constructors::) and will not return 1
when you pass a constant numeric value to the inline function unless you
specify the `-O' option.


File: gcc.info,  Node: Deprecated Features,  Prev: Other Builtins,  Up: C Extensions

4.40 Deprecated Features
========================

In the past, the GNU C++ compiler was extended to experiment with new
features, at a time when the C++ language was still evolving. Now that
the C++ standard is complete, some of those features are superceded by
superior alternatives. Using the old features might cause a warning in
some cases that the feature will be dropped in the future. In other
cases, the feature might be gone already.

   While the list below is not exhaustive, it documents some of the
options that are now deprecated:

`-fthis-is-variable'
     In early versions of C++, assignment to this could be used to
     implement application-defined memory allocation. Now, allocation
     functions (`operator new') are the standard-conforming way to
     achieve the same effect.

`-fexternal-templates'
`-falt-external-templates'
     These are two of the many ways for g++ to implement template
     instantiation. *Note Template Instantiation::. The C++ standard
     clearly defines how template definitions have to be organized
     across implementation units. g++ has an implicit instantiation
     mechanism that should work just fine for standard-conforming code.



File: gcc.info,  Node: C++ Extensions,  Next: Gcov,  Prev: C Extensions,  Up: Top

5 Extensions to the C++ Language
********************************

The GNU compiler provides these extensions to the C++ language (and you
can also use most of the C language extensions in your C++ programs).
If you want to write code that checks whether these features are
available, you can test for the GNU compiler the same way as for C
programs: check for a predefined macro `__GNUC__'.  You can also use
`__GNUG__' to test specifically for GNU C++ (*note Standard Predefined
Macros: (cpp.info)Standard Predefined.).

* Menu:

* Naming Results::      Giving a name to C++ function return values.
* Min and Max::		C++ Minimum and maximum operators.
* Destructors and Goto:: Goto is safe to use in C++ even when destructors
                           are needed.
* C++ Interface::       You can use a single C++ header file for both
                         declarations and definitions.
* Template Instantiation:: Methods for ensuring that exactly one copy of
                         each needed template instantiation is emitted.
* Bound member functions:: You can extract a function pointer to the
                        method denoted by a `->*' or `.*' expression.
* C++ Signatures::	You can specify abstract types to get subtype
			 polymorphism independent from inheritance.


File: gcc.info,  Node: Naming Results,  Next: Min and Max,  Up: C++ Extensions

5.1 Named Return Values in C++
==============================

GNU C++ extends the function-definition syntax to allow you to specify a
name for the result of a function outside the body of the definition, in
C++ programs:

     TYPE
     FUNCTIONNAME (ARGS) return RESULTNAME;
     {
       ...
       BODY
       ...
     }

   You can use this feature to avoid an extra constructor call when a
function result has a class type.  For example, consider a function
`m', declared as `X v = m ();', whose result is of class `X':

     X
     m ()
     {
       X b;
       b.a = 23;
       return b;
     }

   Although `m' appears to have no arguments, in fact it has one
implicit argument: the address of the return value.  At invocation, the
address of enough space to hold `v' is sent in as the implicit argument.
Then `b' is constructed and its `a' field is set to the value 23.
Finally, a copy constructor (a constructor of the form `X(X&)') is
applied to `b', with the (implicit) return value location as the
target, so that `v' is now bound to the return value.

   But this is wasteful.  The local `b' is declared just to hold
something that will be copied right out.  While a compiler that
combined an "elision" algorithm with interprocedural data flow analysis
could conceivably eliminate all of this, it is much more practical to
allow you to assist the compiler in generating efficient code by
manipulating the return value explicitly, thus avoiding the local
variable and copy constructor altogether.

   Using the extended GNU C++ function-definition syntax, you can avoid
the temporary allocation and copying by naming `r' as your return value
at the outset, and assigning to its `a' field directly:

     X
     m () return r;
     {
       r.a = 23;
     }

The declaration of `r' is a standard, proper declaration, whose effects
are executed *before* any of the body of `m'.

   Functions of this type impose no additional restrictions; in
particular, you can execute `return' statements, or return implicitly by
reaching the end of the function body ("falling off the edge").  Cases
like

     X
     m () return r (23);
     {
       return;
     }

(or even `X m () return r (23); { }') are unambiguous, since the return
value `r' has been initialized in either case.  The following code may
be hard to read, but also works predictably:

     X
     m () return r;
     {
       X b;
       return b;
     }

   The return value slot denoted by `r' is initialized at the outset,
but the statement `return b;' overrides this value.  The compiler deals
with this by destroying `r' (calling the destructor if there is one, or
doing nothing if there is not), and then reinitializing `r' with `b'.

   This extension is provided primarily to help people who use
overloaded operators, where there is a great need to control not just
the arguments, but the return values of functions.  For classes where
the copy constructor incurs a heavy performance penalty (especially in
the common case where there is a quick default constructor), this is a
major savings.  The disadvantage of this extension is that you do not
control when the default constructor for the return value is called: it
is always called at the beginning.


File: gcc.info,  Node: Min and Max,  Next: Destructors and Goto,  Prev: Naming Results,  Up: C++ Extensions

5.2 Minimum and Maximum Operators in C++
========================================

It is very convenient to have operators which return the "minimum" or
the "maximum" of two arguments.  In GNU C++ (but not in GNU C),

`A <? B'
     is the "minimum", returning the smaller of the numeric values A
     and B;

`A >? B'
     is the "maximum", returning the larger of the numeric values A and
     B.

   These operations are not primitive in ordinary C++, since you can
use a macro to return the minimum of two things in C++, as in the
following example.

     #define MIN(X,Y) ((X) < (Y) ? : (X) : (Y))

You might then use `int min = MIN (i, j);' to set MIN to the minimum
value of variables I and J.

   However, side effects in `X' or `Y' may cause unintended behavior.
For example, `MIN (i++, j++)' will fail, incrementing the smaller
counter twice.  A GNU C extension allows you to write safe macros that
avoid this kind of problem (*note Naming an Expression's Type: Naming
Types.).  However, writing `MIN' and `MAX' as macros also forces you to
use function-call notation for a fundamental arithmetic operation.
Using GNU C++ extensions, you can write `int min = i <? j;' instead.

   Since `<?' and `>?' are built into the compiler, they properly
handle expressions with side-effects;  `int min = i++ <? j++;' works
correctly.


File: gcc.info,  Node: Destructors and Goto,  Next: C++ Interface,  Prev: Min and Max,  Up: C++ Extensions

5.3 `goto' and Destructors in GNU C++
=====================================

In C++ programs, you can safely use the `goto' statement.  When you use
it to exit a block which contains aggregates requiring destructors, the
destructors will run before the `goto' transfers control.

   The compiler still forbids using `goto' to _enter_ a scope that
requires constructors.


File: gcc.info,  Node: C++ Interface,  Next: Template Instantiation,  Prev: Destructors and Goto,  Up: C++ Extensions

5.4 Declarations and Definitions in One Header
==============================================

C++ object definitions can be quite complex.  In principle, your source
code will need two kinds of things for each object that you use across
more than one source file.  First, you need an "interface"
specification, describing its structure with type declarations and
function prototypes.  Second, you need the "implementation" itself.  It
can be tedious to maintain a separate interface description in a header
file, in parallel to the actual implementation.  It is also dangerous,
since separate interface and implementation definitions may not remain
parallel.

   With GNU C++, you can use a single header file for both purposes.

     _Warning:_ The mechanism to specify this is in transition.  For the
     nonce, you must use one of two `#pragma' commands; in a future
     release of GNU C++, an alternative mechanism will make these
     `#pragma' commands unnecessary.

   The header file contains the full definitions, but is marked with
`#pragma interface' in the source code.  This allows the compiler to
use the header file only as an interface specification when ordinary
source files incorporate it with `#include'.  In the single source file
where the full implementation belongs, you can use either a naming
convention or `#pragma implementation' to indicate this alternate use
of the header file.

`#pragma interface'
`#pragma interface "SUBDIR/OBJECTS.h"'
     Use this directive in _header files_ that define object classes,
     to save space in most of the object files that use those classes.
     Normally, local copies of certain information (backup copies of
     inline member functions, debugging information, and the internal
     tables that implement virtual functions) must be kept in each
     object file that includes class definitions.  You can use this
     pragma to avoid such duplication.  When a header file containing
     `#pragma interface' is included in a compilation, this auxiliary
     information will not be generated (unless the main input source
     file itself uses `#pragma implementation').  Instead, the object
     files will contain references to be resolved at link time.

     The second form of this directive is useful for the case where you
     have multiple headers with the same name in different directories.
     If you use this form, you must specify the same string to `#pragma
     implementation'.

`#pragma implementation'
`#pragma implementation "OBJECTS.h"'
     Use this pragma in a _main input file_, when you want full output
     from included header files to be generated (and made globally
     visible).  The included header file, in turn, should use `#pragma
     interface'.  Backup copies of inline member functions, debugging
     information, and the internal tables used to implement virtual
     functions are all generated in implementation files.

     If you use `#pragma implementation' with no argument, it applies to
     an include file with the same basename(1) as your source file.
     For example, in `allclass.cc', giving just `#pragma implementation'
     by itself is equivalent to `#pragma implementation "allclass.h"'.

     In versions of GNU C++ prior to 2.6.0 `allclass.h' was treated as
     an implementation file whenever you would include it from
     `allclass.cc' even if you never specified `#pragma
     implementation'.  This was deemed to be more trouble than it was
     worth, however, and disabled.

     If you use an explicit `#pragma implementation', it must appear in
     your source file _before_ you include the affected header files.

     Use the string argument if you want a single implementation file to
     include code from multiple header files.  (You must also use
     `#include' to include the header file; `#pragma implementation'
     only specifies how to use the file--it doesn't actually include
     it.)

     There is no way to split up the contents of a single header file
     into multiple implementation files.

   `#pragma implementation' and `#pragma interface' also have an effect
on function inlining.

   If you define a class in a header file marked with `#pragma
interface', the effect on a function defined in that class is similar to
an explicit `extern' declaration--the compiler emits no code at all to
define an independent version of the function.  Its definition is used
only for inlining with its callers.

   Conversely, when you include the same header file in a main source
file that declares it as `#pragma implementation', the compiler emits
code for the function itself; this defines a version of the function
that can be found via pointers (or by callers compiled without
inlining).  If all calls to the function can be inlined, you can avoid
emitting the function by compiling with `-fno-implement-inlines'.  If
any calls were not inlined, you will get linker errors.

   ---------- Footnotes ----------

   (1) A file's "basename" was the name stripped of all leading path
information and of trailing suffixes, such as `.h' or `.C' or `.cc'.


File: gcc.info,  Node: Template Instantiation,  Next: Bound member functions,  Prev: C++ Interface,  Up: C++ Extensions

5.5 Where's the Template?
=========================

C++ templates are the first language feature to require more
intelligence from the environment than one usually finds on a UNIX
system.  Somehow the compiler and linker have to make sure that each
template instance occurs exactly once in the executable if it is needed,
and not at all otherwise.  There are two basic approaches to this
problem, which I will refer to as the Borland model and the Cfront
model.

Borland model
     Borland C++ solved the template instantiation problem by adding
     the code equivalent of common blocks to their linker; the compiler
     emits template instances in each translation unit that uses them,
     and the linker collapses them together.  The advantage of this
     model is that the linker only has to consider the object files
     themselves; there is no external complexity to worry about.  This
     disadvantage is that compilation time is increased because the
     template code is being compiled repeatedly.  Code written for this
     model tends to include definitions of all templates in the header
     file, since they must be seen to be instantiated.

Cfront model
     The AT&T C++ translator, Cfront, solved the template instantiation
     problem by creating the notion of a template repository, an
     automatically maintained place where template instances are
     stored.  A more modern version of the repository works as follows:
     As individual object files are built, the compiler places any
     template definitions and instantiations encountered in the
     repository.  At link time, the link wrapper adds in the objects in
     the repository and compiles any needed instances that were not
     previously emitted.  The advantages of this model are more optimal
     compilation speed and the ability to use the system linker; to
     implement the Borland model a compiler vendor also needs to
     replace the linker.  The disadvantages are vastly increased
     complexity, and thus potential for error; for some code this can be
     just as transparent, but in practice it can been very difficult to
     build multiple programs in one directory and one program in
     multiple directories.  Code written for this model tends to
     separate definitions of non-inline member templates into a
     separate file, which should be compiled separately.

   When used with GNU ld version 2.8 or later on an ELF system such as
Linux/GNU or Solaris 2, or on Microsoft Windows, g++ supports the
Borland model.  On other systems, g++ implements neither automatic
model.

   A future version of g++ will support a hybrid model whereby the
compiler will emit any instantiations for which the template definition
is included in the compile, and store template definitions and
instantiation context information into the object file for the rest.
The link wrapper will extract that information as necessary and invoke
the compiler to produce the remaining instantiations.  The linker will
then combine duplicate instantiations.

   In the mean time, you have the following options for dealing with
template instantiations:

  1. Compile your template-using code with `-frepo'.  The compiler will
     generate files with the extension `.rpo' listing all of the
     template instantiations used in the corresponding object files
     which could be instantiated there; the link wrapper, `collect2',
     will then update the `.rpo' files to tell the compiler where to
     place those instantiations and rebuild any affected object files.
     The link-time overhead is negligible after the first pass, as the
     compiler will continue to place the instantiations in the same
     files.

     This is your best option for application code written for the
     Borland model, as it will just work.  Code written for the Cfront
     model will need to be modified so that the template definitions
     are available at one or more points of instantiation; usually this
     is as simple as adding `#include <tmethods.cc>' to the end of each
     template header.

     For library code, if you want the library to provide all of the
     template instantiations it needs, just try to link all of its
     object files together; the link will fail, but cause the
     instantiations to be generated as a side effect.  Be warned,
     however, that this may cause conflicts if multiple libraries try
     to provide the same instantiations.  For greater control, use
     explicit instantiation as described in the next option.

  2. Compile your code with `-fno-implicit-templates' to disable the
     implicit generation of template instances, and explicitly
     instantiate all the ones you use.  This approach requires more
     knowledge of exactly which instances you need than do the others,
     but it's less mysterious and allows greater control.  You can
     scatter the explicit instantiations throughout your program,
     perhaps putting them in the translation units where the instances
     are used or the translation units that define the templates
     themselves; you can put all of the explicit instantiations you
     need into one big file; or you can create small files like

          #include "Foo.h"
          #include "Foo.cc"

          template class Foo<int>;
          template ostream& operator <<
                          (ostream&, const Foo<int>&);

     for each of the instances you need, and create a template
     instantiation library from those.

     If you are using Cfront-model code, you can probably get away with
     not using `-fno-implicit-templates' when compiling files that don't
     `#include' the member template definitions.

     If you use one big file to do the instantiations, you may want to
     compile it without `-fno-implicit-templates' so you get all of the
     instances required by your explicit instantiations (but not by any
     other files) without having to specify them as well.

     g++ has extended the template instantiation syntax outlined in the
     Working Paper to allow forward declaration of explicit
     instantiations and instantiation of the compiler support data for
     a template class (i.e. the vtable) without instantiating any of
     its members:

          extern template int max (int, int);
          inline template class Foo<int>;

  3. Do nothing.  Pretend g++ does implement automatic instantiation
     management.  Code written for the Borland model will work fine, but
     each translation unit will contain instances of each of the
     templates it uses.  In a large program, this can lead to an
     unacceptable amount of code duplication.

  4. Add `#pragma interface' to all files containing template
     definitions.  For each of these files, add `#pragma implementation
     "FILENAME"' to the top of some `.C' file which `#include's it.
     Then compile everything with `-fexternal-templates'.  The
     templates will then only be expanded in the translation unit which
     implements them (i.e. has a `#pragma implementation' line for the
     file where they live); all other files will use external
     references.  If you're lucky, everything should work properly.  If
     you get undefined symbol errors, you need to make sure that each
     template instance which is used in the program is used in the file
     which implements that template.  If you don't have any use for a
     particular instance in that file, you can just instantiate it
     explicitly, using the syntax from the latest C++ working paper:

          template class A<int>;
          template ostream& operator << (ostream&, const A<int>&);

     This strategy will work with code written for either model.  If
     you are using code written for the Cfront model, the file
     containing a class template and the file containing its member
     templates should be implemented in the same translation unit.

     A slight variation on this approach is to instead use the flag
     `-falt-external-templates'; this flag causes template instances to
     be emitted in the translation unit that implements the header
     where they are first instantiated, rather than the one which
     implements the file where the templates are defined.  This header
     must be the same in all translation units, or things are likely to
     break.

     *Note Declarations and Definitions in One Header: C++ Interface,
     for more discussion of these pragmas.


File: gcc.info,  Node: Bound member functions,  Next: C++ Signatures,  Prev: Template Instantiation,  Up: C++ Extensions

5.6 Extracting the function pointer from a bound pointer to member function
===========================================================================

In C++, pointer to member functions (PMFs) are implemented using a wide
pointer of sorts to handle all the possible call mechanisms; the PMF
needs to store information about how to adjust the `this' pointer, and
if the function pointed to is virtual, where to find the vtable, and
where in the vtable to look for the member function.  If you are using
PMFs in an inner loop, you should really reconsider that decision.  If
that is not an option, you can extract the pointer to the function that
would be called for a given object/PMF pair and call it directly inside
the inner loop, to save a bit of time.

   Note that you will still be paying the penalty for the call through a
function pointer; on most modern architectures, such a call defeats the
branch prediction features of the CPU.  This is also true of normal
virtual function calls.

   The syntax for this extension is

     extern A a;
     extern int (A::*fp)();
     typedef int (*fptr)(A *);

     fptr p = (fptr)(a.*fp);

   You must specify `-Wno-pmf-conversions' to use this extension.


File: gcc.info,  Node: C++ Signatures,  Prev: Bound member functions,  Up: C++ Extensions

5.7 Type Abstraction using Signatures
=====================================

In GNU C++, you can use the keyword `signature' to define a completely
abstract class interface as a datatype.  You can connect this
abstraction with actual classes using signature pointers.  If you want
to use signatures, run the GNU compiler with the `-fhandle-signatures'
command-line option.  (With this option, the compiler reserves a second
keyword `sigof' as well, for a future extension.)

   Roughly, signatures are type abstractions or interfaces of classes.
Some other languages have similar facilities.  C++ signatures are
related to ML's signatures, Haskell's type classes, definition modules
in Modula-2, interface modules in Modula-3, abstract types in Emerald,
type modules in Trellis/Owl, categories in Scratchpad II, and types in
POOL-I.  For a more detailed discussion of signatures, see `Signatures:
A Language Extension for Improving Type Abstraction and Subtype
Polymorphism in C++' by Gerald Baumgartner and Vincent F. Russo (Tech
report CSD-TR-95-051, Dept. of Computer Sciences, Purdue University,
August 1995, a slightly improved version appeared in
_Software--Practice & Experience_, 25(8), pp. 863-889, August 1995).
You can get the tech report by anonymous FTP from `ftp.cs.purdue.edu'
in `pub/gb/Signature-design.ps.gz'.

   Syntactically, a signature declaration is a collection of member
function declarations and nested type declarations.  For example, this
signature declaration defines a new abstract type `S' with member
functions `int foo ()' and `int bar (int)':

     signature S
     {
       int foo ();
       int bar (int);
     };

   Since signature types do not include implementation definitions, you
cannot write an instance of a signature directly.  Instead, you can
define a pointer to any class that contains the required interfaces as a
"signature pointer".  Such a class "implements" the signature type.

   To use a class as an implementation of `S', you must ensure that the
class has public member functions `int foo ()' and `int bar (int)'.
The class can have other member functions as well, public or not; as
long as it offers what's declared in the signature, it is suitable as
an implementation of that signature type.

   For example, suppose that `C' is a class that meets the requirements
of signature `S' (`C' "conforms to" `S').  Then

     C obj;
     S * p = &obj;

defines a signature pointer `p' and initializes it to point to an
object of type `C'.  The member function call `int i = p->foo ();'
executes `obj.foo ()'.

   Abstract virtual classes provide somewhat similar facilities in
standard C++.  There are two main advantages to using signatures
instead:

  1. Subtyping becomes independent from inheritance.  A class or
     signature type `T' is a subtype of a signature type `S'
     independent of any inheritance hierarchy as long as all the member
     functions declared in `S' are also found in `T'.  So you can
     define a subtype hierarchy that is completely independent from any
     inheritance (implementation) hierarchy, instead of being forced to
     use types that mirror the class inheritance hierarchy.

  2. Signatures allow you to work with existing class hierarchies as
     implementations of a signature type.  If those class hierarchies
     are only available in compiled form, you're out of luck with
     abstract virtual classes, since an abstract virtual class cannot
     be retrofitted on top of existing class hierarchies.  So you would
     be required to write interface classes as subtypes of the abstract
     virtual class.

   There is one more detail about signatures.  A signature declaration
can contain member function _definitions_ as well as member function
declarations.  A signature member function with a full definition is
called a _default implementation_; classes need not contain that
particular interface in order to conform.  For example, a class `C' can
conform to the signature

     signature T
     {
       int f (int);
       int f0 () { return f (0); };
     };

whether or not `C' implements the member function `int f0 ()'.  If you
define `C::f0', that definition takes precedence; otherwise, the
default implementation `S::f0' applies.


File: gcc.info,  Node: Gcov,  Next: Trouble,  Prev: C++ Extensions,  Up: Top

6 `gcov': a Test Coverage Program
*********************************

`gcov' is a tool you can use in conjunction with GNU CC to test code
coverage in your programs.

   This chapter describes version 1.5 of `gcov'.

* Menu:

* Gcov Intro::         	        Introduction to gcov.
* Invoking Gcov::       	How to use gcov.
* Gcov and Optimization::       Using gcov with GCC optimization.
* Gcov Data Files::             The files used by gcov.


File: gcc.info,  Node: Gcov Intro,  Next: Invoking Gcov,  Up: Gcov

6.1 Introduction to `gcov'
==========================

`gcov' is a test coverage program.  Use it in concert with GNU CC to
analyze your programs to help create more efficient, faster running
code.  You can use `gcov' as a profiling tool to help discover where
your optimization efforts will best affect your code.  You can also use
`gcov' along with the other profiling tool, `gprof', to assess which
parts of your code use the greatest amount of computing time.

   Profiling tools help you analyze your code's performance.  Using a
profiler such as `gcov' or `gprof', you can find out some basic
performance statistics, such as:

   * how often each line of code executes

   * what lines of code are actually executed

   * how much computing time each section of code uses

   Once you know these things about how your code works when compiled,
you can look at each module to see which modules should be optimized.
`gcov' helps you determine where to work on optimization.

   Software developers also use coverage testing in concert with
testsuites, to make sure software is actually good enough for a release.
Testsuites can verify that a program works as expected; a coverage
program tests to see how much of the program is exercised by the
testsuite.  Developers can then determine what kinds of test cases need
to be added to the testsuites to create both better testing and a better
final product.

   You should compile your code without optimization if you plan to use
`gcov' because the optimization, by combining some lines of code into
one function, may not give you as much information as you need to look
for `hot spots' where the code is using a great deal of computer time.
Likewise, because `gcov' accumulates statistics by line (at the lowest
resolution), it works best with a programming style that places only
one statement on each line.  If you use complicated macros that expand
to loops or to other control structures, the statistics are less
helpful--they only report on the line where the macro call appears.  If
your complex macros behave like functions, you can replace them with
inline functions to solve this problem.

   `gcov' creates a logfile called `SOURCEFILE.gcov' which indicates
how many times each line of a source file `SOURCEFILE.c' has executed.
You can use these logfiles along with `gprof' to aid in fine-tuning the
performance of your programs.  `gprof' gives timing information you can
use along with the information you get from `gcov'.

   `gcov' works only on code compiled with GNU CC.  It is not
compatible with any other profiling or test coverage mechanism.


File: gcc.info,  Node: Invoking Gcov,  Next: Gcov and Optimization,  Prev: Gcov Intro,  Up: Gcov

6.2 Invoking gcov
=================

     gcov [-b] [-v] [-n] [-l] [-f] [-o directory] SOURCEFILE

`-b'
     Write branch frequencies to the output file, and write branch
     summary info to the standard output.  This option allows you to
     see how often each branch in your program was taken.

`-v'
     Display the `gcov' version number (on the standard error stream).

`-n'
     Do not create the `gcov' output file.

`-l'
     Create long file names for included source files.  For example, if
     the header file `x.h' contains code, and was included in the file
     `a.c', then running `gcov' on the file `a.c' will produce an
     output file called `a.c.x.h.gcov' instead of `x.h.gcov'.  This can
     be useful if `x.h' is included in multiple source files.

`-f'
     Output summaries for each function in addition to the file level
     summary.

`-o'
     The directory where the object files live.  Gcov will search for
     `.bb', `.bbg', and `.da' files in this directory.

   When using `gcov', you must first compile your program with two
special GNU CC options: `-fprofile-arcs -ftest-coverage'.  This tells
the compiler to generate additional information needed by gcov
(basically a flow graph of the program) and also includes additional
code in the object files for generating the extra profiling information
needed by gcov.  These additional files are placed in the directory
where the source code is located.

   Running the program will cause profile output to be generated.  For
each source file compiled with -fprofile-arcs, an accompanying `.da'
file will be placed in the source directory.

   Running `gcov' with your program's source file names as arguments
will now produce a listing of the code along with frequency of execution
for each line.  For example, if your program is called `tmp.c', this is
what you see when you use the basic `gcov' facility:

     $ gcc -fprofile-arcs -ftest-coverage tmp.c
     $ a.out
     $ gcov tmp.c
      87.50% of 8 source lines executed in file tmp.c
     Creating tmp.c.gcov.

   The file `tmp.c.gcov' contains output from `gcov'.  Here is a sample:

                     main()
                     {
                1      int i, total;

                1      total = 0;

               11      for (i = 0; i < 10; i++)
               10        total += i;

                1      if (total != 45)
           ######        printf ("Failure\n");
                       else
                1        printf ("Success\n");
                1    }

   When you use the `-b' option, your output looks like this:

     $ gcov -b tmp.c
      87.50% of 8 source lines executed in file tmp.c
      80.00% of 5 branches executed in file tmp.c
      80.00% of 5 branches taken at least once in file tmp.c
      50.00% of 2 calls executed in file tmp.c
     Creating tmp.c.gcov.

   Here is a sample of a resulting `tmp.c.gcov' file:

                     main()
                     {
                1      int i, total;

                1      total = 0;

               11      for (i = 0; i < 10; i++)
     branch 0 taken = 91%
     branch 1 taken = 100%
     branch 2 taken = 100%
               10        total += i;

                1      if (total != 45)
     branch 0 taken = 100%
           ######        printf ("Failure\n");
     call 0 never executed
     branch 1 never executed
                       else
                1        printf ("Success\n");
     call 0 returns = 100%
                1    }

   For each basic block, a line is printed after the last line of the
basic block describing the branch or call that ends the basic block.
There can be multiple branches and calls listed for a single source
line if there are multiple basic blocks that end on that line.  In this
case, the branches and calls are each given a number.  There is no
simple way to map these branches and calls back to source constructs.
In general, though, the lowest numbered branch or call will correspond
to the leftmost construct on the source line.

   For a branch, if it was executed at least once, then a percentage
indicating the number of times the branch was taken divided by the
number of times the branch was executed will be printed.  Otherwise, the
message "never executed" is printed.

   For a call, if it was executed at least once, then a percentage
indicating the number of times the call returned divided by the number
of times the call was executed will be printed.  This will usually be
100%, but may be less for functions call `exit' or `longjmp', and thus
may not return everytime they are called.

   The execution counts are cumulative.  If the example program were
executed again without removing the `.da' file, the count for the
number of times each line in the source was executed would be added to
the results of the previous run(s).  This is potentially useful in
several ways.  For example, it could be used to accumulate data over a
number of program runs as part of a test verification suite, or to
provide more accurate long-term information over a large number of
program runs.

   The data in the `.da' files is saved immediately before the program
exits.  For each source file compiled with -fprofile-arcs, the profiling
code first attempts to read in an existing `.da' file; if the file
doesn't match the executable (differing number of basic block counts) it
will ignore the contents of the file.  It then adds in the new execution
counts and finally writes the data to the file.


File: gcc.info,  Node: Gcov and Optimization,  Next: Gcov Data Files,  Prev: Invoking Gcov,  Up: Gcov

6.3 Using `gcov' with GCC Optimization
======================================

If you plan to use `gcov' to help optimize your code, you must first
compile your program with two special GNU CC options: `-fprofile-arcs
-ftest-coverage'.  Aside from that, you can use any other GNU CC
options; but if you want to prove that every single line in your
program was executed, you should not compile with optimization at the
same time.  On some machines the optimizer can eliminate some simple
code lines by combining them with other lines.  For example, code like
this:

     if (a != b)
       c = 1;
     else
       c = 0;

can be compiled into one instruction on some machines.  In this case,
there is no way for `gcov' to calculate separate execution counts for
each line because there isn't separate code for each line.  Hence the
`gcov' output looks like this if you compiled the program with
optimization:

           100  if (a != b)
           100    c = 1;
           100  else
           100    c = 0;

   The output shows that this block of code, combined by optimization,
executed 100 times.  In one sense this result is correct, because there
was only one instruction representing all four of these lines.  However,
the output does not indicate how many times the result was 0 and how
many times the result was 1.


File: gcc.info,  Node: Gcov Data Files,  Prev: Gcov and Optimization,  Up: Gcov

6.4 Brief description of `gcov' data files
==========================================

`gcov' uses three files for doing profiling.  The names of these files
are derived from the original _source_ file by substituting the file
suffix with either `.bb', `.bbg', or `.da'.  All of these files are
placed in the same directory as the source file, and contain data
stored in a platform-independent method.

   The `.bb' and `.bbg' files are generated when the source file is
compiled with the GNU CC `-ftest-coverage' option.  The `.bb' file
contains a list of source files (including headers), functions within
those files, and line numbers corresponding to each basic block in the
source file.

   The `.bb' file format consists of several lists of 4-byte integers
which correspond to the line numbers of each basic block in the file.
Each list is terminated by a line number of 0.  A line number of -1 is
used to designate that the source file name (padded to a 4-byte
boundary and followed by another -1) follows.  In addition, a line
number of -2 is used to designate that the name of a function (also
padded to a 4-byte boundary and followed by a -2) follows.

   The `.bbg' file is used to reconstruct the program flow graph for
the source file.  It contains a list of the program flow arcs (possible
branches taken from one basic block to another) for each function which,
in combination with the `.bb' file, enables gcov to reconstruct the
program flow.

   In the `.bbg' file, the format is:
             number of basic blocks for function #0 (4-byte number)
             total number of arcs for function #0 (4-byte number)
             count of arcs in basic block #0 (4-byte number)
             destination basic block of arc #0 (4-byte number)
             flag bits (4-byte number)
             destination basic block of arc #1 (4-byte number)
             flag bits (4-byte number)
             ...
             destination basic block of arc #N (4-byte number)
             flag bits (4-byte number)
             count of arcs in basic block #1 (4-byte number)
             destination basic block of arc #0 (4-byte number)
             flag bits (4-byte number)
             ...

   A -1 (stored as a 4-byte number) is used to separate each function's
list of basic blocks, and to verify that the file has been read
correctly.

   The `.da' file is generated when a program containing object files
built with the GNU CC `-fprofile-arcs' option is executed.  A separate
`.da' file is created for each source file compiled with this option,
and the name of the `.da' file is stored as an absolute pathname in the
resulting object file.  This path name is derived from the source file
name by substituting a `.da' suffix.

   The format of the `.da' file is fairly simple.  The first 8-byte
number is the number of counts in the file, followed by the counts
(stored as 8-byte numbers).  Each count corresponds to the number of
times each arc in the program is executed.  The counts are cumulative;
each time the program is executed, it attemps to combine the existing
`.da' files with the new counts for this invocation of the program.  It
ignores the contents of any `.da' files whose number of arcs doesn't
correspond to the current program, and merely overwrites them instead.

   All three of these files use the functions in `gcov-io.h' to store
integers; the functions in this header provide a machine-independent
mechanism for storing and retrieving data from a stream.


File: gcc.info,  Node: Trouble,  Next: Bugs,  Prev: Gcov,  Up: Top

7 Known Causes of Trouble with GCC
**********************************

This section describes known problems that affect users of GCC.  Most
of these are not GCC bugs per se--if they were, we would fix them.  But
the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.

* Menu:

* Actual Bugs::		      Bugs we will fix later.
* Installation Problems::     Problems that manifest when you install GCC.
* Cross-Compiler Problems::   Common problems of cross compiling with GCC.
* Interoperation::      Problems using GCC with other compilers,
			   and with certain linkers, assemblers and debuggers.
* External Bugs::	Problems compiling certain programs.
* Incompatibilities::   GCC is incompatible with traditional C.
* Fixed Headers::       GNU C uses corrected versions of system header files.
                           This is necessary, but doesn't always work smoothly.
* Standard Libraries::  GNU C uses the system C library, which might not be
                           compliant with the ISO/ANSI C standard.
* Disappointments::     Regrettable things we can't change, but not quite bugs.
* C++ Misunderstandings::     Common misunderstandings with GNU C++.
* Protoize Caveats::    Things to watch out for when using `protoize'.
* Non-bugs::		Things we think are right, but some others disagree.
* Warnings and Errors:: Which problems in your code get warnings,
                         and which get errors.


File: gcc.info,  Node: Actual Bugs,  Next: Installation Problems,  Up: Trouble

7.1 Actual Bugs We Haven't Fixed Yet
====================================

   * The `fixincludes' script interacts badly with automounters; if the
     directory of system header files is automounted, it tends to be
     unmounted while `fixincludes' is running.  This would seem to be a
     bug in the automounter.  We don't know any good way to work around
     it.

   * The `fixproto' script will sometimes add prototypes for the
     `sigsetjmp' and `siglongjmp' functions that reference the
     `jmp_buf' type before that type is defined.  To work around this,
     edit the offending file and place the typedef in front of the
     prototypes.

   * There are several obscure case of mis-using struct, union, and
     enum tags that are not detected as errors by the compiler.

   * When `-pedantic-errors' is specified, GCC will incorrectly give an
     error message when a function name is specified in an expression
     involving the comma operator.

   * Loop unrolling doesn't work properly for certain C++ programs.
     This is a bug in the C++ front end.  It sometimes emits incorrect
     debug info, and the loop unrolling code is unable to recover from
     this error.


File: gcc.info,  Node: Installation Problems,  Next: Cross-Compiler Problems,  Prev: Actual Bugs,  Up: Trouble

7.2 Installation Problems
=========================

This is a list of problems (and some apparent problems which don't
really mean anything is wrong) that show up during installation of GNU
CC.

   * On certain systems, defining certain environment variables such as
     `CC' can interfere with the functioning of `make'.

   * If you encounter seemingly strange errors when trying to build the
     compiler in a directory other than the source directory, it could
     be because you have previously configured the compiler in the
     source directory.  Make sure you have done all the necessary
     preparations.  *Note Other Dir::.

   * If you build GCC on a BSD system using a directory stored in a
     System V file system, problems may occur in running `fixincludes'
     if the System V file system doesn't support symbolic links.  These
     problems result in a failure to fix the declaration of `size_t' in
     `sys/types.h'.  If you find that `size_t' is a signed type and
     that type mismatches occur, this could be the cause.

     The solution is not to use such a directory for building GCC.

   * In previous versions of GCC, the `gcc' driver program looked for
     `as' and `ld' in various places; for example, in files beginning
     with `/usr/local/lib/gcc-'.  GCC version 2 looks for them in the
     directory `/usr/local/lib/gcc-lib/TARGET/VERSION'.

     Thus, to use a version of `as' or `ld' that is not the system
     default, for example `gas' or GNU `ld', you must put them in that
     directory (or make links to them from that directory).

   * Some commands executed when making the compiler may fail (return a
     non-zero status) and be ignored by `make'.  These failures, which
     are often due to files that were not found, are expected, and can
     safely be ignored.

   * It is normal to have warnings in compiling certain files about
     unreachable code and about enumeration type clashes.  These files'
     names begin with `insn-'.  Also, `real.c' may get some warnings
     that you can ignore.

   * Sometimes `make' recompiles parts of the compiler when installing
     the compiler.  In one case, this was traced down to a bug in
     `make'.  Either ignore the problem or switch to GNU Make.

   * If you have installed a program known as purify, you may find that
     it causes errors while linking `enquire', which is part of building
     GCC.  The fix is to get rid of the file `real-ld' which purify
     installs--so that GCC won't try to use it.

   * On GNU/Linux SLS 1.01, there is a problem with `libc.a': it does
     not contain the obstack functions.  However, GCC assumes that the
     obstack functions are in `libc.a' when it is the GNU C library.
     To work around this problem, change the `__GNU_LIBRARY__'
     conditional around line 31 to `#if 1'.

   * On some 386 systems, building the compiler never finishes because
     `enquire' hangs due to a hardware problem in the motherboard--it
     reports floating point exceptions to the kernel incorrectly.  You
     can install GCC except for `float.h' by patching out the command to
     run `enquire'.  You may also be able to fix the problem for real by
     getting a replacement motherboard.  This problem was observed in
     Revision E of the Micronics motherboard, and is fixed in Revision
     F.  It has also been observed in the MYLEX MXA-33 motherboard.

     If you encounter this problem, you may also want to consider
     removing the FPU from the socket during the compilation.
     Alternatively, if you are running SCO Unix, you can reboot and
     force the FPU to be ignored.  To do this, type `hd(40)unix auto
     ignorefpu'.

   * On some 386 systems, GCC crashes trying to compile `enquire.c'.
     This happens on machines that don't have a 387 FPU chip.  On 386
     machines, the system kernel is supposed to emulate the 387 when you
     don't have one.  The crash is due to a bug in the emulator.

     One of these systems is the Unix from Interactive Systems: 386/ix.
     On this system, an alternate emulator is provided, and it does
     work.  To use it, execute this command as super-user:

          ln /etc/emulator.rel1 /etc/emulator

     and then reboot the system.  (The default emulator file remains
     present under the name `emulator.dflt'.)

     Try using `/etc/emulator.att', if you have such a problem on the
     SCO system.

     Another system which has this problem is Esix.  We don't know
     whether it has an alternate emulator that works.

     On NetBSD 0.8, a similar problem manifests itself as these error
     messages:

          enquire.c: In function `fprop':
          enquire.c:2328: floating overflow

   * On SCO systems, when compiling GCC with the system's compiler, do
     not use `-O'.  Some versions of the system's compiler miscompile
     GCC with `-O'.

   * Sometimes on a Sun 4 you may observe a crash in the program
     `genflags' or `genoutput' while building GCC.  This is said to be
     due to a bug in `sh'.  You can probably get around it by running
     `genflags' or `genoutput' manually and then retrying the `make'.

   * On Solaris 2, executables of GCC version 2.0.2 are commonly
     available, but they have a bug that shows up when compiling current
     versions of GCC: undefined symbol errors occur during assembly if
     you use `-g'.

     The solution is to compile the current version of GCC without
     `-g'.  That makes a working compiler which you can use to recompile
     with `-g'.

   * Solaris 2 comes with a number of optional OS packages.  Some of
     these packages are needed to use GCC fully.  If you did not
     install all optional packages when installing Solaris, you will
     need to verify that the packages that GCC needs are installed.

     To check whether an optional package is installed, use the
     `pkginfo' command.  To add an optional package, use the `pkgadd'
     command.  For further details, see the Solaris documentation.

     For Solaris 2.0 and 2.1, GCC needs six packages: `SUNWarc',
     `SUNWbtool', `SUNWesu', `SUNWhea', `SUNWlibm', and `SUNWtoo'.

     For Solaris 2.2, GCC needs an additional seventh package:
     `SUNWsprot'.

   * On Solaris 2, trying to use the linker and other tools in
     `/usr/ucb' to install GCC has been observed to cause trouble.  For
     example, the linker may hang indefinitely.  The fix is to remove
     `/usr/ucb' from your `PATH'.

   * If you use the 1.31 version of the MIPS assembler (such as was
     shipped with Ultrix 3.1), you will need to use the
     -fno-delayed-branch switch when optimizing floating point code.
     Otherwise, the assembler will complain when the GCC compiler fills
     a branch delay slot with a floating point instruction, such as
     `add.d'.

   * If on a MIPS system you get an error message saying "does not have
     gp sections for all it's [sic] sectons [sic]", don't worry about
     it.  This happens whenever you use GAS with the MIPS linker, but
     there is not really anything wrong, and it is okay to use the
     output file.  You can stop such warnings by installing the GNU
     linker.

     It would be nice to extend GAS to produce the gp tables, but they
     are optional, and there should not be a warning about their
     absence.

   * In Ultrix 4.0 on the MIPS machine, `stdio.h' does not work with GNU
     CC at all unless it has been fixed with `fixincludes'.  This causes
     problems in building GCC.  Once GCC is installed, the problems go
     away.

     To work around this problem, when making the stage 1 compiler,
     specify this option to Make:

          GCC_FOR_TARGET="./xgcc -B./ -I./include"

     When making stage 2 and stage 3, specify this option:

          CFLAGS="-g -I./include"

   * Users have reported some problems with version 2.0 of the MIPS
     compiler tools that were shipped with Ultrix 4.1.  Version 2.10
     which came with Ultrix 4.2 seems to work fine.

     Users have also reported some problems with version 2.20 of the
     MIPS compiler tools that were shipped with RISC/os 4.x.  The
     earlier version 2.11 seems to work fine.

   * Some versions of the MIPS linker will issue an assertion failure
     when linking code that uses `alloca' against shared libraries on
     RISC-OS 5.0, and DEC's OSF/1 systems.  This is a bug in the
     linker, that is supposed to be fixed in future revisions.  To
     protect against this, GCC passes `-non_shared' to the linker
     unless you pass an explicit `-shared' or `-call_shared' switch.

   * On System V release 3, you may get this error message while
     linking:

          ld fatal: failed to write symbol name SOMETHING
           in strings table for file WHATEVER

     This probably indicates that the disk is full or your ULIMIT won't
     allow the file to be as large as it needs to be.

     This problem can also result because the kernel parameter `MAXUMEM'
     is too small.  If so, you must regenerate the kernel and make the
     value much larger.  The default value is reported to be 1024; a
     value of 32768 is said to work.  Smaller values may also work.

   * On System V, if you get an error like this,

          /usr/local/lib/bison.simple: In function `yyparse':
          /usr/local/lib/bison.simple:625: virtual memory exhausted

     that too indicates a problem with disk space, ULIMIT, or `MAXUMEM'.

   * Current GCC versions probably do not work on version 2 of the NeXT
     operating system.

   * On NeXTStep 3.0, the Objective C compiler does not work, due,
     apparently, to a kernel bug that it happens to trigger.  This
     problem does not happen on 3.1.

   * On the Tower models 4N0 and 6N0, by default a process is not
     allowed to have more than one megabyte of memory.  GCC cannot
     compile itself (or many other programs) with `-O' in that much
     memory.

     To solve this problem, reconfigure the kernel adding the following
     line to the configuration file:

          MAXUMEM = 4096

   * On HP 9000 series 300 or 400 running HP-UX release 8.0, there is a
     bug in the assembler that must be fixed before GCC can be built.
     This bug manifests itself during the first stage of compilation,
     while building `libgcc2.a':

          _floatdisf
          cc1: warning: `-g' option not supported on this version of GCC
          cc1: warning: `-g1' option not supported on this version of GCC
          ./xgcc: Internal compiler error: program as got fatal signal 11

     A patched version of the assembler is available by anonymous ftp
     from `altdorf.ai.mit.edu' as the file
     `archive/cph/hpux-8.0-assembler'.  If you have HP software support,
     the patch can also be obtained directly from HP, as described in
     the following note:

          This is the patched assembler, to patch SR#1653-010439, where
          the assembler aborts on floating point constants.

          The bug is not really in the assembler, but in the shared
          library version of the function "cvtnum(3c)".  The bug on
          "cvtnum(3c)" is SR#4701-078451.  Anyway, the attached
          assembler uses the archive library version of "cvtnum(3c)"
          and thus does not exhibit the bug.

     This patch is also known as PHCO_4484.

   * On HP-UX version 8.05, but not on 8.07 or more recent versions,
     the `fixproto' shell script triggers a bug in the system shell.
     If you encounter this problem, upgrade your operating system or
     use BASH (the GNU shell) to run `fixproto'.

   * Some versions of the Pyramid C compiler are reported to be unable
     to compile GCC.  You must use an older version of GCC for
     bootstrapping.  One indication of this problem is if you get a
     crash when GCC compiles the function `muldi3' in file `libgcc2.c'.

     You may be able to succeed by getting GCC version 1, installing it,
     and using it to compile GCC version 2.  The bug in the Pyramid C
     compiler does not seem to affect GCC version 1.

   * There may be similar problems on System V Release 3.1 on 386
     systems.

   * On the Intel Paragon (an i860 machine), if you are using operating
     system version 1.0, you will get warnings or errors about
     redefinition of `va_arg' when you build GCC.

     If this happens, then you need to link most programs with the
     library `iclib.a'.  You must also modify `stdio.h' as follows:
     before the lines

          #if     defined(__i860__) && !defined(_VA_LIST)
          #include <va_list.h>

     insert the line

          #if __PGC__

     and after the lines

          extern int  vprintf(const char *, va_list );
          extern int  vsprintf(char *, const char *, va_list );
          #endif

     insert the line

          #endif /* __PGC__ */

     These problems don't exist in operating system version 1.1.

   * On the Altos 3068, programs compiled with GCC won't work unless you
     fix a kernel bug.  This happens using system versions V.2.2 1.0gT1
     and V.2.2 1.0e and perhaps later versions as well.  See the file
     `README.ALTOS'.

   * You will get several sorts of compilation and linking errors on the
     we32k if you don't follow the special instructions.  *Note
     Configurations::.

   * A bug in the HP-UX 8.05 (and earlier) shell will cause the fixproto
     program to report an error of the form:

          ./fixproto: sh internal 1K buffer overflow

     To fix this, change the first line of the fixproto script to look
     like:

          #!/bin/ksh


File: gcc.info,  Node: Cross-Compiler Problems,  Next: Interoperation,  Prev: Installation Problems,  Up: Trouble

7.3 Cross-Compiler Problems
===========================

You may run into problems with cross compilation on certain machines,
for several reasons.

   * Cross compilation can run into trouble for certain machines because
     some target machines' assemblers require floating point numbers to
     be written as _integer_ constants in certain contexts.

     The compiler writes these integer constants by examining the
     floating point value as an integer and printing that integer,
     because this is simple to write and independent of the details of
     the floating point representation.  But this does not work if the
     compiler is running on a different machine with an incompatible
     floating point format, or even a different byte-ordering.

     In addition, correct constant folding of floating point values
     requires representing them in the target machine's format.  (The C
     standard does not quite require this, but in practice it is the
     only way to win.)

     It is now possible to overcome these problems by defining macros
     such as `REAL_VALUE_TYPE'.  But doing so is a substantial amount of
     work for each target machine.  *Note Cross-compilation::.

   * At present, the program `mips-tfile' which adds debug support to
     object files on MIPS systems does not work in a cross compile
     environment.


File: gcc.info,  Node: Interoperation,  Next: External Bugs,  Prev: Cross-Compiler Problems,  Up: Trouble

7.4 Interoperation
==================

This section lists various difficulties encountered in using GNU C or
GNU C++ together with other compilers or with the assemblers, linkers,
libraries and debuggers on certain systems.

   * Objective C does not work on the RS/6000.

   * GNU C++ does not do name mangling in the same way as other C++
     compilers.  This means that object files compiled with one compiler
     cannot be used with another.

     This effect is intentional, to protect you from more subtle
     problems.  Compilers differ as to many internal details of C++
     implementation, including: how class instances are laid out, how
     multiple inheritance is implemented, and how virtual function
     calls are handled.  If the name encoding were made the same, your
     programs would link against libraries provided from other
     compilers--but the programs would then crash when run.
     Incompatible libraries are then detected at link time, rather than
     at run time.

   * Older GDB versions sometimes fail to read the output of GCC version
     2.  If you have trouble, get GDB version 4.4 or later.

   * DBX rejects some files produced by GCC, though it accepts similar
     constructs in output from PCC.  Until someone can supply a coherent
     description of what is valid DBX input and what is not, there is
     nothing I can do about these problems.  You are on your own.

   * The GNU assembler (GAS) does not support PIC.  To generate PIC
     code, you must use some other assembler, such as `/bin/as'.

   * On some BSD systems, including some versions of Ultrix, use of
     profiling causes static variable destructors (currently used only
     in C++) not to be run.

   * Use of `-I/usr/include' may cause trouble.

     Many systems come with header files that won't work with GCC unless
     corrected by `fixincludes'.  The corrected header files go in a new
     directory; GCC searches this directory before `/usr/include'.  If
     you use `-I/usr/include', this tells GCC to search `/usr/include'
     earlier on, before the corrected headers.  The result is that you
     get the uncorrected header files.

     Instead, you should use these options (when compiling C programs):

          -I/usr/local/lib/gcc-lib/TARGET/VERSION/include -I/usr/include

     For C++ programs, GCC also uses a special directory that defines
     C++ interfaces to standard C subroutines.  This directory is meant
     to be searched _before_ other standard include directories, so
     that it takes precedence.  If you are compiling C++ programs and
     specifying include directories explicitly, use this option first,
     then the two options above:

          -I/usr/local/lib/g++-include

   * On some SGI systems, when you use `-lgl_s' as an option, it gets
     translated magically to `-lgl_s -lX11_s -lc_s'.  Naturally, this
     does not happen when you use GCC.  You must specify all three
     options explicitly.

   * On a Sparc, GCC aligns all values of type `double' on an 8-byte
     boundary, and it expects every `double' to be so aligned.  The Sun
     compiler usually gives `double' values 8-byte alignment, with one
     exception: function arguments of type `double' may not be aligned.

     As a result, if a function compiled with Sun CC takes the address
     of an argument of type `double' and passes this pointer of type
     `double *' to a function compiled with GCC, dereferencing the
     pointer may cause a fatal signal.

     One way to solve this problem is to compile your entire program
     with GNU CC.  Another solution is to modify the function that is
     compiled with Sun CC to copy the argument into a local variable;
     local variables are always properly aligned.  A third solution is
     to modify the function that uses the pointer to dereference it via
     the following function `access_double' instead of directly with
     `*':

          inline double
          access_double (double *unaligned_ptr)
          {
            union d2i { double d; int i[2]; };

            union d2i *p = (union d2i *) unaligned_ptr;
            union d2i u;

            u.i[0] = p->i[0];
            u.i[1] = p->i[1];

            return u.d;
          }

     Storing into the pointer can be done likewise with the same union.

   * On Solaris, the `malloc' function in the `libmalloc.a' library may
     allocate memory that is only 4 byte aligned.  Since GCC on the
     Sparc assumes that doubles are 8 byte aligned, this may result in a
     fatal signal if doubles are stored in memory allocated by the
     `libmalloc.a' library.

     The solution is to not use the `libmalloc.a' library.  Use instead
     `malloc' and related functions from `libc.a'; they do not have
     this problem.

   * Sun forgot to include a static version of `libdl.a' with some
     versions of SunOS (mainly 4.1).  This results in undefined symbols
     when linking static binaries (that is, if you use `-static').  If
     you see undefined symbols `_dlclose', `_dlsym' or `_dlopen' when
     linking, compile and link against the file `mit/util/misc/dlsym.c'
     from the MIT version of X windows.

   * The 128-bit long double format that the Sparc port supports
     currently works by using the architecturally defined quad-word
     floating point instructions.  Since there is no hardware that
     supports these instructions they must be emulated by the operating
     system.  Long doubles do not work in Sun OS versions 4.0.3 and
     earlier, because the kernel emulator uses an obsolete and
     incompatible format.  Long doubles do not work in Sun OS version
     4.1.1 due to a problem in a Sun library.  Long doubles do work on
     Sun OS versions 4.1.2 and higher, but GCC does not enable them by
     default.  Long doubles appear to work in Sun OS 5.x (Solaris 2.x).

   * On HP-UX version 9.01 on the HP PA, the HP compiler `cc' does not
     compile GCC correctly.  We do not yet know why.  However, GCC
     compiled on earlier HP-UX versions works properly on HP-UX 9.01
     and can compile itself properly on 9.01.

   * On the HP PA machine, ADB sometimes fails to work on functions
     compiled with GCC.  Specifically, it fails to work on functions
     that use `alloca' or variable-size arrays.  This is because GCC
     doesn't generate HP-UX unwind descriptors for such functions.  It
     may even be impossible to generate them.

   * Debugging (`-g') is not supported on the HP PA machine, unless you
     use the preliminary GNU tools (*note Installation::).

   * Taking the address of a label may generate errors from the HP-UX
     PA assembler.  GAS for the PA does not have this problem.

   * Using floating point parameters for indirect calls to static
     functions will not work when using the HP assembler.  There simply
     is no way for GCC to specify what registers hold arguments for
     static functions when using the HP assembler.  GAS for the PA does
     not have this problem.

   * In extremely rare cases involving some very large functions you may
     receive errors from the HP linker complaining about an out of
     bounds unconditional branch offset.  This used to occur more often
     in previous versions of GCC, but is now exceptionally rare.  If
     you should run into it, you can work around by making your
     function smaller.

   * GCC compiled code sometimes emits warnings from the HP-UX
     assembler of the form:

          (warning) Use of GR3 when
            frame >= 8192 may cause conflict.

     These warnings are harmless and can be safely ignored.

   * The current version of the assembler (`/bin/as') for the RS/6000
     has certain problems that prevent the `-g' option in GCC from
     working.  Note that `Makefile.in' uses `-g' by default when
     compiling `libgcc2.c'.

     IBM has produced a fixed version of the assembler.  The upgraded
     assembler unfortunately was not included in any of the AIX 3.2
     update PTF releases (3.2.2, 3.2.3, or 3.2.3e).  Users of AIX 3.1
     should request PTF U403044 from IBM and users of AIX 3.2 should
     request PTF U416277.  See the file `README.RS6000' for more
     details on these updates.

     You can test for the presense of a fixed assembler by using the
     command

          as -u < /dev/null

     If the command exits normally, the assembler fix already is
     installed.  If the assembler complains that "-u" is an unknown
     flag, you need to order the fix.

   * On the IBM RS/6000, compiling code of the form

          extern int foo;

          ... foo ...

          static int foo;

     will cause the linker to report an undefined symbol `foo'.
     Although this behavior differs from most other systems, it is not a
     bug because redefining an `extern' variable as `static' is
     undefined in ANSI C.

   * AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ("." vs "," for separating decimal
     fractions).  There have been problems reported where the library
     linked with GCC does not produce the same floating-point formats
     that the assembler accepts.  If you have this problem, set the
     LANG environment variable to "C" or "En_US".

   * Even if you specify `-fdollars-in-identifiers', you cannot
     successfully use `$' in identifiers on the RS/6000 due to a
     restriction in the IBM assembler.  GAS supports these identifiers.

   * On the RS/6000, XLC version 1.3.0.0 will miscompile `jump.c'.  XLC
     version 1.3.0.1 or later fixes this problem.  You can obtain
     XLC-1.3.0.2 by requesting PTF 421749 from IBM.

   * There is an assembler bug in versions of DG/UX prior to 5.4.2.01
     that occurs when the `fldcr' instruction is used.  GCC uses
     `fldcr' on the 88100 to serialize volatile memory references.  Use
     the option `-mno-serialize-volatile' if your version of the
     assembler has this bug.

   * On VMS, GAS versions 1.38.1 and earlier may cause spurious warning
     messages from the linker.  These warning messages complain of
     mismatched psect attributes.  You can ignore them.  *Note VMS
     Install::.

   * On NewsOS version 3, if you include both of the files `stddef.h'
     and `sys/types.h', you get an error because there are two typedefs
     of `size_t'.  You should change `sys/types.h' by adding these
     lines around the definition of `size_t':

          #ifndef _SIZE_T
          #define _SIZE_T
          ACTUAL TYPEDEF HERE
          #endif

   * On the Alliant, the system's own convention for returning
     structures and unions is unusual, and is not compatible with GCC
     no matter what options are used.

   * On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different
     convention for structure and union returning.  Use the option
     `-mhc-struct-return' to tell GCC to use a convention compatible
     with it.

   * On Ultrix, the Fortran compiler expects registers 2 through 5 to
     be saved by function calls.  However, the C compiler uses
     conventions compatible with BSD Unix: registers 2 through 5 may be
     clobbered by function calls.

     GCC uses the same convention as the Ultrix C compiler.  You can use
     these options to produce code compatible with the Fortran compiler:

          -fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5

   * On the WE32k, you may find that programs compiled with GCC do not
     work with the standard shared C library.  You may need to link with
     the ordinary C compiler.  If you do so, you must specify the
     following options:

          -L/usr/local/lib/gcc-lib/we32k-att-sysv/2.8.1 -lgcc -lc_s

     The first specifies where to find the library `libgcc.a' specified
     with the `-lgcc' option.

     GCC does linking by invoking `ld', just as `cc' does, and there is
     no reason why it _should_ matter which compilation program you use
     to invoke `ld'.  If someone tracks this problem down, it can
     probably be fixed easily.

   * On the Alpha, you may get assembler errors about invalid syntax as
     a result of floating point constants.  This is due to a bug in the
     C library functions `ecvt', `fcvt' and `gcvt'.  Given valid
     floating point numbers, they sometimes print `NaN'.

   * On Irix 4.0.5F (and perhaps in some other versions), an assembler
     bug sometimes reorders instructions incorrectly when optimization
     is turned on.  If you think this may be happening to you, try
     using the GNU assembler; GAS version 2.1 supports ECOFF on Irix.

     Or use the `-noasmopt' option when you compile GCC with itself,
     and then again when you compile your program.  (This is a temporary
     kludge to turn off assembler optimization on Irix.)  If this
     proves to be what you need, edit the assembler spec in the file
     `specs' so that it unconditionally passes `-O0' to the assembler,
     and never passes `-O2' or `-O3'.


File: gcc.info,  Node: External Bugs,  Next: Incompatibilities,  Prev: Interoperation,  Up: Trouble

7.5 Problems Compiling Certain Programs
=======================================

Certain programs have problems compiling.

   * Parse errors may occur compiling X11 on a Decstation running
     Ultrix 4.2 because of problems in DEC's versions of the X11 header
     files `X11/Xlib.h' and `X11/Xutil.h'.  People recommend adding
     `-I/usr/include/mit' to use the MIT versions of the header files,
     using the `-traditional' switch to turn off ANSI C, or fixing the
     header files by adding this:

          #ifdef __STDC__
          #define NeedFunctionPrototypes 0
          #endif

   * If you have trouble compiling Perl on a SunOS 4 system, it may be
     because Perl specifies `-I/usr/ucbinclude'.  This accesses the
     unfixed header files.  Perl specifies the options

          -traditional -Dvolatile=__volatile__
          -I/usr/include/sun -I/usr/ucbinclude
          -fpcc-struct-return

     most of which are unnecessary with GCC 2.4.5 and newer versions.
     You can make a properly working Perl by setting `ccflags' to
     `-fwritable-strings' (implied by the `-traditional' in the
     original options) and `cppflags' to empty in `config.sh', then
     typing `./doSH; make depend; make'.

   * On various 386 Unix systems derived from System V, including SCO,
     ISC, and ESIX, you may get error messages about running out of
     virtual memory while compiling certain programs.

     You can prevent this problem by linking GCC with the GNU malloc
     (which thus replaces the malloc that comes with the system).  GNU
     malloc is available as a separate package, and also in the file
     `src/gmalloc.c' in the GNU Emacs 19 distribution.

     If you have installed GNU malloc as a separate library package,
     use this option when you relink GCC:

          MALLOC=/usr/local/lib/libgmalloc.a

     Alternatively, if you have compiled `gmalloc.c' from Emacs 19, copy
     the object file to `gmalloc.o' and use this option when you relink
     GCC:

          MALLOC=gmalloc.o


File: gcc.info,  Node: Incompatibilities,  Next: Fixed Headers,  Prev: External Bugs,  Up: Trouble

7.6 Incompatibilities of GCC
============================

There are several noteworthy incompatibilities between GNU C and most
existing (non-ANSI) versions of C.  The `-traditional' option
eliminates many of these incompatibilities, _but not all_, by telling
GNU C to behave like the other C compilers.

   * GCC normally makes string constants read-only.  If several
     identical-looking string constants are used, GCC stores only one
     copy of the string.

     One consequence is that you cannot call `mktemp' with a string
     constant argument.  The function `mktemp' always alters the string
     its argument points to.

     Another consequence is that `sscanf' does not work on some systems
     when passed a string constant as its format control string or
     input.  This is because `sscanf' incorrectly tries to write into
     the string constant.  Likewise `fscanf' and `scanf'.

     The best solution to these problems is to change the program to use
     `char'-array variables with initialization strings for these
     purposes instead of string constants.  But if this is not possible,
     you can use the `-fwritable-strings' flag, which directs GCC to
     handle string constants the same way most C compilers do.
     `-traditional' also has this effect, among others.

   * `-2147483648' is positive.

     This is because 2147483648 cannot fit in the type `int', so
     (following the ANSI C rules) its data type is `unsigned long int'.
     Negating this value yields 2147483648 again.

   * GCC does not substitute macro arguments when they appear inside of
     string constants.  For example, the following macro in GCC

          #define foo(a) "a"

     will produce output `"a"' regardless of what the argument A is.

     The `-traditional' option directs GCC to handle such cases (among
     others) in the old-fashioned (non-ANSI) fashion.

   * When you use `setjmp' and `longjmp', the only automatic variables
     guaranteed to remain valid are those declared `volatile'.  This is
     a consequence of automatic register allocation.  Consider this
     function:

          jmp_buf j;

          foo ()
          {
            int a, b;

            a = fun1 ();
            if (setjmp (j))
              return a;

            a = fun2 ();
            /* `longjmp (j)' may occur in `fun3'. */
            return a + fun3 ();
          }

     Here `a' may or may not be restored to its first value when the
     `longjmp' occurs.  If `a' is allocated in a register, then its
     first value is restored; otherwise, it keeps the last value stored
     in it.

     If you use the `-W' option with the `-O' option, you will get a
     warning when GCC thinks such a problem might be possible.

     The `-traditional' option directs GNU C to put variables in the
     stack by default, rather than in registers, in functions that call
     `setjmp'.  This results in the behavior found in traditional C
     compilers.

   * Programs that use preprocessing directives in the middle of macro
     arguments do not work with GCC.  For example, a program like this
     will not work:

          foobar (
          #define luser
                  hack)

     ANSI C does not permit such a construct.  It would make sense to
     support it when `-traditional' is used, but it is too much work to
     implement.

   * Declarations of external variables and functions within a block
     apply only to the block containing the declaration.  In other
     words, they have the same scope as any other declaration in the
     same place.

     In some other C compilers, a `extern' declaration affects all the
     rest of the file even if it happens within a block.

     The `-traditional' option directs GNU C to treat all `extern'
     declarations as global, like traditional compilers.

   * In traditional C, you can combine `long', etc., with a typedef
     name, as shown here:

          typedef int foo;
          typedef long foo bar;

     In ANSI C, this is not allowed: `long' and other type modifiers
     require an explicit `int'.  Because this criterion is expressed by
     Bison grammar rules rather than C code, the `-traditional' flag
     cannot alter it.

   * PCC allows typedef names to be used as function parameters.  The
     difficulty described immediately above applies here too.

   * PCC allows whitespace in the middle of compound assignment
     operators such as `+='.  GCC, following the ANSI standard, does not
     allow this.  The difficulty described immediately above applies
     here too.

   * GCC complains about unterminated character constants inside of
     preprocessing conditionals that fail.  Some programs have English
     comments enclosed in conditionals that are guaranteed to fail; if
     these comments contain apostrophes, GCC will probably report an
     error.  For example, this code would produce an error:

          #if 0
          You can't expect this to work.
          #endif

     The best solution to such a problem is to put the text into an
     actual C comment delimited by `/*...*/'.  However, `-traditional'
     suppresses these error messages.

   * Many user programs contain the declaration `long time ();'.  In the
     past, the system header files on many systems did not actually
     declare `time', so it did not matter what type your program
     declared it to return.  But in systems with ANSI C headers, `time'
     is declared to return `time_t', and if that is not the same as
     `long', then `long time ();' is erroneous.

     The solution is to change your program to use `time_t' as the
     return type of `time'.

   * When compiling functions that return `float', PCC converts it to a
     double.  GCC actually returns a `float'.  If you are concerned
     with PCC compatibility, you should declare your functions to return
     `double'; you might as well say what you mean.

   * When compiling functions that return structures or unions, GCC
     output code normally uses a method different from that used on most
     versions of Unix.  As a result, code compiled with GCC cannot call
     a structure-returning function compiled with PCC, and vice versa.

     The method used by GCC is as follows: a structure or union which is
     1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or
     union with any other size is stored into an address supplied by
     the caller (usually in a special, fixed register, but on some
     machines it is passed on the stack).  The machine-description
     macros `STRUCT_VALUE' and `STRUCT_INCOMING_VALUE' tell GCC where
     to pass this address.

     By contrast, PCC on most target machines returns structures and
     unions of any size by copying the data into an area of static
     storage, and then returning the address of that storage as if it
     were a pointer value.  The caller must copy the data from that
     memory area to the place where the value is wanted.  GCC does not
     use this method because it is slower and nonreentrant.

     On some newer machines, PCC uses a reentrant convention for all
     structure and union returning.  GCC on most of these machines uses
     a compatible convention when returning structures and unions in
     memory, but still returns small structures and unions in registers.

     You can tell GCC to use a compatible convention for all structure
     and union returning with the option `-fpcc-struct-return'.

   * GNU C complains about program fragments such as `0x74ae-0x4000'
     which appear to be two hexadecimal constants separated by the minus
     operator.  Actually, this string is a single "preprocessing token".
     Each such token must correspond to one token in C.  Since this
     does not, GNU C prints an error message.  Although it may appear
     obvious that what is meant is an operator and two values, the ANSI
     C standard specifically requires that this be treated as erroneous.

     A "preprocessing token" is a "preprocessing number" if it begins
     with a digit and is followed by letters, underscores, digits,
     periods and `e+', `e-', `E+', or `E-' character sequences.

     To make the above program fragment valid, place whitespace in
     front of the minus sign.  This whitespace will end the
     preprocessing number.


File: gcc.info,  Node: Fixed Headers,  Next: Standard Libraries,  Prev: Incompatibilities,  Up: Trouble

7.7 Fixed Header Files
======================

GCC needs to install corrected versions of some system header files.
This is because most target systems have some header files that won't
work with GCC unless they are changed.  Some have bugs, some are
incompatible with ANSI C, and some depend on special features of other
compilers.

   Installing GCC automatically creates and installs the fixed header
files, by running a program called `fixincludes' (or for certain
targets an alternative such as `fixinc.svr4').  Normally, you don't
need to pay attention to this.  But there are cases where it doesn't do
the right thing automatically.

   * If you update the system's header files, such as by installing a
     new system version, the fixed header files of GCC are not
     automatically updated.  The easiest way to update them is to
     reinstall GCC.  (If you want to be clever, look in the makefile
     and you can find a shortcut.)

   * On some systems, in particular SunOS 4, header file directories
     contain machine-specific symbolic links in certain places.  This
     makes it possible to share most of the header files among hosts
     running the same version of SunOS 4 on different machine models.

     The programs that fix the header files do not understand this
     special way of using symbolic links; therefore, the directory of
     fixed header files is good only for the machine model used to
     build it.

     In SunOS 4, only programs that look inside the kernel will notice
     the difference between machine models.  Therefore, for most
     purposes, you need not be concerned about this.

     It is possible to make separate sets of fixed header files for the
     different machine models, and arrange a structure of symbolic
     links so as to use the proper set, but you'll have to do this by
     hand.

   * On Lynxos, GCC by default does not fix the header files.  This is
     because bugs in the shell cause the `fixincludes' script to fail.

     This means you will encounter problems due to bugs in the system
     header files.  It may be no comfort that they aren't GCC's fault,
     but it does mean that there's nothing for us to do about them.


File: gcc.info,  Node: Standard Libraries,  Next: Disappointments,  Prev: Fixed Headers,  Up: Trouble

7.8 Standard Libraries
======================

GCC by itself attempts to be what the ISO/ANSI C standard calls a
"conforming freestanding implementation".  This means all ANSI C
language features are available, as well as the contents of `float.h',
`limits.h', `stdarg.h', and `stddef.h'.  The rest of the C library is
supplied by the vendor of the operating system.  If that C library
doesn't conform to the C standards, then your programs might get
warnings (especially when using `-Wall') that you don't expect.

   For example, the `sprintf' function on SunOS 4.1.3 returns `char *'
while the C standard says that `sprintf' returns an `int'.  The
`fixincludes' program could make the prototype for this function match
the Standard, but that would be wrong, since the function will still
return `char *'.

   If you need a Standard compliant library, then you need to find one,
as GCC does not provide one.  The GNU C library (called `glibc') has
been ported to a number of operating systems, and provides ANSI/ISO,
POSIX, BSD and SystemV compatibility.  You could also ask your operating
system vendor if newer libraries are available.

