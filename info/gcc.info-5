This is gcc.info, produced by makeinfo version 4.13 from
/Users/lasse/projects/amiga/m68k-amigaos-toolchain/sources/gcc-2.95.3/gcc/gcc.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* gcc: (gcc).                  The GNU Compiler Collection.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of the GNU compiler.

   Published by the Free Software Foundation 59 Temple Place - Suite 330
Boston, MA 02111-1307 USA

   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Funding
for Free Software" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Funding for Free Software", and this permission notice,
may be included in translations approved by the Free Software Foundation
instead of in the original English.


File: gcc.info,  Node: Initialization,  Next: Macros for Initialization,  Prev: Label Output,  Up: Assembler Format

17.16.5 How Initialization Functions Are Handled
------------------------------------------------

The compiled code for certain languages includes "constructors" (also
called "initialization routines")--functions to initialize data in the
program when the program is started.  These functions need to be called
before the program is "started"--that is to say, before `main' is
called.

   Compiling some languages generates "destructors" (also called
"termination routines") that should be called when the program
terminates.

   To make the initialization and termination functions work, the
compiler must output something in the assembler code to cause those
functions to be called at the appropriate time.  When you port the
compiler to a new system, you need to specify how to do this.

   There are two major ways that GCC currently supports the execution of
initialization and termination functions.  Each way has two variants.
Much of the structure is common to all four variations.

   The linker must build two lists of these functions--a list of
initialization functions, called `__CTOR_LIST__', and a list of
termination functions, called `__DTOR_LIST__'.

   Each list always begins with an ignored function pointer (which may
hold 0, -1, or a count of the function pointers after it, depending on
the environment).  This is followed by a series of zero or more function
pointers to constructors (or destructors), followed by a function
pointer containing zero.

   Depending on the operating system and its executable file format,
either `crtstuff.c' or `libgcc2.c' traverses these lists at startup
time and exit time.  Constructors are called in reverse order of the
list; destructors in forward order.

   The best way to handle static constructors works only for object file
formats which provide arbitrarily-named sections.  A section is set
aside for a list of constructors, and another for a list of destructors.
Traditionally these are called `.ctors' and `.dtors'.  Each object file
that defines an initialization function also puts a word in the
constructor section to point to that function.  The linker accumulates
all these words into one contiguous `.ctors' section.  Termination
functions are handled similarly.

   To use this method, you need appropriate definitions of the macros
`ASM_OUTPUT_CONSTRUCTOR' and `ASM_OUTPUT_DESTRUCTOR'.  Usually you can
get them by including `svr4.h'.

   When arbitrary sections are available, there are two variants,
depending upon how the code in `crtstuff.c' is called.  On systems that
support an "init" section which is executed at program startup, parts
of `crtstuff.c' are compiled into that section.  The program is linked
by the `gcc' driver like this:

     ld -o OUTPUT_FILE crtbegin.o ... crtend.o -lgcc

   The head of a function (`__do_global_ctors') appears in the init
section of `crtbegin.o'; the remainder of the function appears in the
init section of `crtend.o'.  The linker will pull these two parts of
the section together, making a whole function.  If any of the user's
object files linked into the middle of it contribute code, then that
code will be executed as part of the body of `__do_global_ctors'.

   To use this variant, you must define the `INIT_SECTION_ASM_OP' macro
properly.

   If no init section is available, do not define
`INIT_SECTION_ASM_OP'.  Then `__do_global_ctors' is built into the text
section like all other functions, and resides in `libgcc.a'.  When GCC
compiles any function called `main', it inserts a procedure call to
`__main' as the first executable code after the function prologue.  The
`__main' function, also defined in `libgcc2.c', simply calls
`__do_global_ctors'.

   In file formats that don't support arbitrary sections, there are
again two variants.  In the simplest variant, the GNU linker (GNU `ld')
and an `a.out' format must be used.  In this case,
`ASM_OUTPUT_CONSTRUCTOR' is defined to produce a `.stabs' entry of type
`N_SETT', referencing the name `__CTOR_LIST__', and with the address of
the void function containing the initialization code as its value.  The
GNU linker recognizes this as a request to add the value to a "set";
the values are accumulated, and are eventually placed in the executable
as a vector in the format described above, with a leading (ignored)
count and a trailing zero element.  `ASM_OUTPUT_DESTRUCTOR' is handled
similarly.  Since no init section is available, the absence of
`INIT_SECTION_ASM_OP' causes the compilation of `main' to call `__main'
as above, starting the initialization process.

   The last variant uses neither arbitrary sections nor the GNU linker.
This is preferable when you want to do dynamic linking and when using
file formats which the GNU linker does not support, such as `ECOFF'.  In
this case, `ASM_OUTPUT_CONSTRUCTOR' does not produce an `N_SETT'
symbol; initialization and termination functions are recognized simply
by their names.  This requires an extra program in the linkage step,
called `collect2'.  This program pretends to be the linker, for use
with GNU CC; it does its job by running the ordinary linker, but also
arranges to include the vectors of initialization and termination
functions.  These functions are called via `__main' as described above.

   Choosing among these configuration options has been simplified by a
set of operating-system-dependent files in the `config' subdirectory.
These files define all of the relevant parameters.  Usually it is
sufficient to include one into your specific machine-dependent
configuration file.  These files are:

`aoutos.h'
     For operating systems using the `a.out' format.

`next.h'
     For operating systems using the `MachO' format.

`svr3.h'
     For System V Release 3 and similar systems using `COFF' format.

`svr4.h'
     For System V Release 4 and similar systems using `ELF' format.

`vms.h'
     For the VMS operating system.

   The following section describes the specific macros that control and
customize the handling of initialization and termination functions.


File: gcc.info,  Node: Macros for Initialization,  Next: Instruction Output,  Prev: Initialization,  Up: Assembler Format

17.16.6 Macros Controlling Initialization Routines
--------------------------------------------------

Here are the macros that control how the compiler handles initialization
and termination functions:

`INIT_SECTION_ASM_OP'
     If defined, a C string constant for the assembler operation to
     identify the following data as initialization code.  If not
     defined, GNU CC will assume such a section does not exist.  When
     you are using special sections for initialization and termination
     functions, this macro also controls how `crtstuff.c' and
     `libgcc2.c' arrange to run the initialization functions.

`HAS_INIT_SECTION'
     If defined, `main' will not call `__main' as described above.
     This macro should be defined for systems that control the contents
     of the init section on a symbol-by-symbol basis, such as OSF/1,
     and should not be defined explicitly for systems that support
     `INIT_SECTION_ASM_OP'.

`LD_INIT_SWITCH'
     If defined, a C string constant for a switch that tells the linker
     that the following symbol is an initialization routine.

`LD_FINI_SWITCH'
     If defined, a C string constant for a switch that tells the linker
     that the following symbol is a finalization routine.

`INVOKE__main'
     If defined, `main' will call `__main' despite the presence of
     `INIT_SECTION_ASM_OP'.  This macro should be defined for systems
     where the init section is not actually run automatically, but is
     still useful for collecting the lists of constructors and
     destructors.

`ASM_OUTPUT_CONSTRUCTOR (STREAM, NAME)'
     Define this macro as a C statement to output on the stream STREAM
     the assembler code to arrange to call the function named NAME at
     initialization time.

     Assume that NAME is the name of a C function generated
     automatically by the compiler.  This function takes no arguments.
     Use the function `assemble_name' to output the name NAME; this
     performs any system-specific syntactic transformations such as
     adding an underscore.

     If you don't define this macro, nothing special is output to
     arrange to call the function.  This is correct when the function
     will be called in some other manner--for example, by means of the
     `collect2' program, which looks through the symbol table to find
     these functions by their names.

`ASM_OUTPUT_DESTRUCTOR (STREAM, NAME)'
     This is like `ASM_OUTPUT_CONSTRUCTOR' but used for termination
     functions rather than initialization functions.

     When `ASM_OUTPUT_CONSTRUCTOR' and `ASM_OUTPUT_DESTRUCTOR' are
     defined, the initializaiton routine generated for the generated
     object file will have static linkage.

   If your system uses `collect2' as the means of processing
constructors, then that program normally uses `nm' to scan an object
file for constructor functions to be called.  On such systems you must
not define `ASM_OUTPUT_CONSTRUCTOR' and `ASM_OUTPUT_DESTRUCTOR' as the
object file's initialization routine must have global scope.

   On certain kinds of systems, you can define these macros to make
`collect2' work faster (and, in some cases, make it work at all):

`OBJECT_FORMAT_COFF'
     Define this macro if the system uses COFF (Common Object File
     Format) object files, so that `collect2' can assume this format
     and scan object files directly for dynamic constructor/destructor
     functions.

`OBJECT_FORMAT_ROSE'
     Define this macro if the system uses ROSE format object files, so
     that `collect2' can assume this format and scan object files
     directly for dynamic constructor/destructor functions.

     These macros are effective only in a native compiler; `collect2' as
     part of a cross compiler always uses `nm' for the target machine.

`REAL_NM_FILE_NAME'
     Define this macro as a C string constant containing the file name
     to use to execute `nm'.  The default is to search the path
     normally for `nm'.

     If your system supports shared libraries and has a program to list
     the dynamic dependencies of a given library or executable, you can
     define these macros to enable support for running initialization
     and termination functions in shared libraries:

`LDD_SUFFIX'
     Define this macro to a C string constant containing the name of the
     program which lists dynamic dependencies, like `"ldd"' under SunOS
     4.

`PARSE_LDD_OUTPUT (PTR)'
     Define this macro to be C code that extracts filenames from the
     output of the program denoted by `LDD_SUFFIX'.  PTR is a variable
     of type `char *' that points to the beginning of a line of output
     from `LDD_SUFFIX'.  If the line lists a dynamic dependency, the
     code must advance PTR to the beginning of the filename on that
     line.  Otherwise, it must set PTR to `NULL'.



File: gcc.info,  Node: Instruction Output,  Next: Dispatch Tables,  Prev: Macros for Initialization,  Up: Assembler Format

17.16.7 Output of Assembler Instructions
----------------------------------------

This describes assembler instruction output.

`REGISTER_NAMES'
     A C initializer containing the assembler's names for the machine
     registers, each one as a C string constant.  This is what
     translates register numbers in the compiler into assembler
     language.

`ADDITIONAL_REGISTER_NAMES'
     If defined, a C initializer for an array of structures containing
     a name and a register number.  This macro defines additional names
     for hard registers, thus allowing the `asm' option in declarations
     to refer to registers using alternate names.

`ASM_OUTPUT_OPCODE (STREAM, PTR)'
     Define this macro if you are using an unusual assembler that
     requires different names for the machine instructions.

     The definition is a C statement or statements which output an
     assembler instruction opcode to the stdio stream STREAM.  The
     macro-operand PTR is a variable of type `char *' which points to
     the opcode name in its "internal" form--the form that is written
     in the machine description.  The definition should output the
     opcode name to STREAM, performing any translation you desire, and
     increment the variable PTR to point at the end of the opcode so
     that it will not be output twice.

     In fact, your macro definition may process less than the entire
     opcode name, or more than the opcode name; but if you want to
     process text that includes `%'-sequences to substitute operands,
     you must take care of the substitution yourself.  Just be sure to
     increment PTR over whatever text should not be output normally.

     If you need to look at the operand values, they can be found as the
     elements of `recog_operand'.

     If the macro definition does nothing, the instruction is output in
     the usual way.

`FINAL_PRESCAN_INSN (INSN, OPVEC, NOPERANDS)'
     If defined, a C statement to be executed just prior to the output
     of assembler code for INSN, to modify the extracted operands so
     they will be output differently.

     Here the argument OPVEC is the vector containing the operands
     extracted from INSN, and NOPERANDS is the number of elements of
     the vector which contain meaningful data for this insn.  The
     contents of this vector are what will be used to convert the insn
     template into assembler code, so you can change the assembler
     output by changing the contents of the vector.

     This macro is useful when various assembler syntaxes share a single
     file of instruction patterns; by defining this macro differently,
     you can cause a large class of instructions to be output
     differently (such as with rearranged operands).  Naturally,
     variations in assembler syntax affecting individual insn patterns
     ought to be handled by writing conditional output routines in
     those patterns.

     If this macro is not defined, it is equivalent to a null statement.

`FINAL_PRESCAN_LABEL'
     If defined, `FINAL_PRESCAN_INSN' will be called on each
     `CODE_LABEL'.  In that case, OPVEC will be a null pointer and
     NOPERANDS will be zero.

`PRINT_OPERAND (STREAM, X, CODE)'
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand X.  X is an RTL
     expression.

     CODE is a value that can be used to specify one of several ways of
     printing the operand.  It is used when identical operands must be
     printed differently depending on the context.  CODE comes from the
     `%' specification that was used to request printing of the
     operand.  If the specification was just `%DIGIT' then CODE is 0;
     if the specification was `%LTR DIGIT' then CODE is the ASCII code
     for LTR.

     If X is a register, this macro should print the register's name.
     The names can be found in an array `reg_names' whose type is `char
     *[]'.  `reg_names' is initialized from `REGISTER_NAMES'.

     When the machine description has a specification `%PUNCT' (a `%'
     followed by a punctuation character), this macro is called with a
     null pointer for X and the punctuation character for CODE.

`PRINT_OPERAND_PUNCT_VALID_P (CODE)'
     A C expression which evaluates to true if CODE is a valid
     punctuation character for use in the `PRINT_OPERAND' macro.  If
     `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no
     punctuation characters (except for the standard one, `%') are used
     in this way.

`PRINT_OPERAND_ADDRESS (STREAM, X)'
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand that is a memory
     reference whose address is X.  X is an RTL expression.

     On some machines, the syntax for a symbolic address depends on the
     section that the address refers to.  On these machines, define the
     macro `ENCODE_SECTION_INFO' to store the information into the
     `symbol_ref', and then check for it here.  *Note Assembler
     Format::.

`DBR_OUTPUT_SEQEND(FILE)'
     A C statement, to be executed after all slot-filler instructions
     have been output.  If necessary, call `dbr_sequence_length' to
     determine the number of slots filled in a sequence (zero if not
     currently outputting a sequence), to decide how many no-ops to
     output, or whatever.

     Don't define this macro if it has nothing to do, but it is helpful
     in reading assembly output if the extent of the delay sequence is
     made explicit (e.g. with white space).

     Note that output routines for instructions with delay slots must be
     prepared to deal with not being output as part of a sequence (i.e.
     when the scheduling pass is not run, or when no slot fillers could
     be found.)  The variable `final_sequence' is null when not
     processing a sequence, otherwise it contains the `sequence' rtx
     being output.

`REGISTER_PREFIX'
`LOCAL_LABEL_PREFIX'
`USER_LABEL_PREFIX'
`IMMEDIATE_PREFIX'
     If defined, C string expressions to be used for the `%R', `%L',
     `%U', and `%I' options of `asm_fprintf' (see `final.c').  These
     are useful when a single `md' file must support multiple assembler
     formats.  In that case, the various `tm.h' files can define these
     macros differently.

`ASSEMBLER_DIALECT'
     If your target supports multiple dialects of assembler language
     (such as different opcodes), define this macro as a C expression
     that gives the numeric index of the assembler language dialect to
     use, with zero as the first variant.

     If this macro is defined, you may use constructs of the form
     `{option0|option1|option2...}' in the output templates of patterns
     (*note Output Template::) or in the first argument of
     `asm_fprintf'.  This construct outputs `option0', `option1' or
     `option2', etc., if the value of `ASSEMBLER_DIALECT' is zero, one
     or two, etc.  Any special characters within these strings retain
     their usual meaning.

     If you do not define this macro, the characters `{', `|' and `}'
     do not have any special meaning when used in templates or operands
     to `asm_fprintf'.

     Define the macros `REGISTER_PREFIX', `LOCAL_LABEL_PREFIX',
     `USER_LABEL_PREFIX' and `IMMEDIATE_PREFIX' if you can express the
     variations in assembler language syntax with that mechanism.
     Define `ASSEMBLER_DIALECT' and use the `{option0|option1}' syntax
     if the syntax variant are larger and involve such things as
     different opcodes or operand order.

`ASM_OUTPUT_REG_PUSH (STREAM, REGNO)'
     A C expression to output to STREAM some assembler code which will
     push hard register number REGNO onto the stack.  The code need not
     be optimal, since this macro is used only when profiling.

`ASM_OUTPUT_REG_POP (STREAM, REGNO)'
     A C expression to output to STREAM some assembler code which will
     pop hard register number REGNO off of the stack.  The code need
     not be optimal, since this macro is used only when profiling.


File: gcc.info,  Node: Dispatch Tables,  Next: Exception Region Output,  Prev: Instruction Output,  Up: Assembler Format

17.16.8 Output of Dispatch Tables
---------------------------------

This concerns dispatch tables.

`ASM_OUTPUT_ADDR_DIFF_ELT (STREAM, BODY, VALUE, REL)'
     A C statement to output to the stdio stream STREAM an assembler
     pseudo-instruction to generate a difference between two labels.
     VALUE and REL are the numbers of two internal labels.  The
     definitions of these labels are output using
     `ASM_OUTPUT_INTERNAL_LABEL', and they must be printed in the same
     way here.  For example,

          fprintf (STREAM, "\t.word L%d-L%d\n",
                   VALUE, REL)

     You must provide this macro on machines where the addresses in a
     dispatch table are relative to the table's own address.  If
     defined, GNU CC will also use this macro on all machines when
     producing PIC.  BODY is the body of the ADDR_DIFF_VEC; it is
     provided so that the mode and flags can be read.

`ASM_OUTPUT_ADDR_VEC_ELT (STREAM, VALUE)'
     This macro should be provided on machines where the addresses in a
     dispatch table are absolute.

     The definition should be a C statement to output to the stdio
     stream STREAM an assembler pseudo-instruction to generate a
     reference to a label.  VALUE is the number of an internal label
     whose definition is output using `ASM_OUTPUT_INTERNAL_LABEL'.  For
     example,

          fprintf (STREAM, "\t.word L%d\n", VALUE)

`ASM_OUTPUT_CASE_LABEL (STREAM, PREFIX, NUM, TABLE)'
     Define this if the label before a jump-table needs to be output
     specially.  The first three arguments are the same as for
     `ASM_OUTPUT_INTERNAL_LABEL'; the fourth argument is the jump-table
     which follows (a `jump_insn' containing an `addr_vec' or
     `addr_diff_vec').

     This feature is used on system V to output a `swbeg' statement for
     the table.

     If this macro is not defined, these labels are output with
     `ASM_OUTPUT_INTERNAL_LABEL'.

`ASM_OUTPUT_CASE_END (STREAM, NUM, TABLE)'
     Define this if something special must be output at the end of a
     jump-table.  The definition should be a C statement to be executed
     after the assembler code for the table is written.  It should write
     the appropriate code to stdio stream STREAM.  The argument TABLE
     is the jump-table insn, and NUM is the label-number of the
     preceding label.

     If this macro is not defined, nothing special is output at the end
     of the jump-table.


File: gcc.info,  Node: Exception Region Output,  Next: Alignment Output,  Prev: Dispatch Tables,  Up: Assembler Format

17.16.9 Assembler Commands for Exception Regions
------------------------------------------------

This describes commands marking the start and the end of an exception
region.

`ASM_OUTPUT_EH_REGION_BEG ()'
     A C expression to output text to mark the start of an exception
     region.

     This macro need not be defined on most platforms.

`ASM_OUTPUT_EH_REGION_END ()'
     A C expression to output text to mark the end of an exception
     region.

     This macro need not be defined on most platforms.

`EXCEPTION_SECTION ()'
     A C expression to switch to the section in which the main
     exception table is to be placed (*note Sections::).  The default
     is a section named `.gcc_except_table' on machines that support
     named sections via `ASM_OUTPUT_SECTION_NAME', otherwise if `-fpic'
     or `-fPIC' is in effect, the `data_section', otherwise the
     `readonly_data_section'.

`EH_FRAME_SECTION_ASM_OP'
     If defined, a C string constant for the assembler operation to
     switch to the section for exception handling frame unwind
     information.  If not defined, GNU CC will provide a default
     definition if the target supports named sections.  `crtstuff.c'
     uses this macro to switch to the appropriate section.

     You should define this symbol if your target supports DWARF 2 frame
     unwind information and the default definition does not work.

`OMIT_EH_TABLE ()'
     A C expression that is nonzero if the normal exception table output
     should be omitted.

     This macro need not be defined on most platforms.

`EH_TABLE_LOOKUP ()'
     Alternate runtime support for looking up an exception at runtime
     and finding the associated handler, if the default method won't
     work.

     This macro need not be defined on most platforms.

`DOESNT_NEED_UNWINDER'
     A C expression that decides whether or not the current function
     needs to have a function unwinder generated for it.  See the file
     `except.c' for details on when to define this, and how.

`MASK_RETURN_ADDR'
     An rtx used to mask the return address found via RETURN_ADDR_RTX,
     so that it does not contain any extraneous set bits in it.

`DWARF2_UNWIND_INFO'
     Define this macro to 0 if your target supports DWARF 2 frame unwind
     information, but it does not yet work with exception handling.
     Otherwise, if your target supports this information (if it defines
     `INCOMING_RETURN_ADDR_RTX' and either `UNALIGNED_INT_ASM_OP' or
     `OBJECT_FORMAT_ELF'), GCC will provide a default definition of 1.

     If this macro is defined to 1, the DWARF 2 unwinder will be the
     default exception handling mechanism; otherwise, setjmp/longjmp
     will be used by default.

     If this macro is defined to anything, the DWARF 2 unwinder will be
     used instead of inline unwinders and __unwind_function in the
     non-setjmp case.



File: gcc.info,  Node: Alignment Output,  Prev: Exception Region Output,  Up: Assembler Format

17.16.10 Assembler Commands for Alignment
-----------------------------------------

This describes commands for alignment.

`LABEL_ALIGN_AFTER_BARRIER (LABEL)'
     The alignment (log base 2) to put in front of LABEL, which follows
     a BARRIER.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

`LOOP_ALIGN (LABEL)'
     The alignment (log base 2) to put in front of LABEL, which follows
     a NOTE_INSN_LOOP_BEG note.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

`LABEL_ALIGN (LABEL)'
     The alignment (log base 2) to put in front of LABEL.  If
     LABEL_ALIGN_AFTER_BARRIER / LOOP_ALIGN specify a different
     alignment, the maximum of the specified values is used.

`ASM_OUTPUT_SKIP (STREAM, NBYTES)'
     A C statement to output to the stdio stream STREAM an assembler
     instruction to advance the location counter by NBYTES bytes.
     Those bytes should be zero when loaded.  NBYTES will be a C
     expression of type `int'.

`ASM_NO_SKIP_IN_TEXT'
     Define this macro if `ASM_OUTPUT_SKIP' should not be used in the
     text section because it fails to put zeros in the bytes that are
     skipped.  This is true on many Unix systems, where the pseudo-op
     to skip bytes produces no-op instructions rather than zeros when
     used in the text section.

`ASM_OUTPUT_ALIGN (STREAM, POWER)'
     A C statement to output to the stdio stream STREAM an assembler
     command to advance the location counter to a multiple of 2 to the
     POWER bytes.  POWER will be a C expression of type `int'.

`ASM_OUTPUT_MAX_SKIP_ALIGN (STREAM, POWER, MAX_SKIP)'
     A C statement to output to the stdio stream STREAM an assembler
     command to advance the location counter to a multiple of 2 to the
     POWER bytes, but only if MAX_SKIP or fewer bytes are needed to
     satisfy the alignment request.  POWER and MAX_SKIP will be a C
     expression of type `int'.


File: gcc.info,  Node: Debugging Info,  Next: Cross-compilation,  Prev: Assembler Format,  Up: Target Macros

17.17 Controlling Debugging Information Format
==============================================

This describes how to specify debugging information.

* Menu:

* All Debuggers::      Macros that affect all debugging formats uniformly.
* DBX Options::        Macros enabling specific options in DBX format.
* DBX Hooks::          Hook macros for varying DBX format.
* File Names and DBX:: Macros controlling output of file names in DBX format.
* SDB and DWARF::      Macros for SDB (COFF) and DWARF formats.


File: gcc.info,  Node: All Debuggers,  Next: DBX Options,  Up: Debugging Info

17.17.1 Macros Affecting All Debugging Formats
----------------------------------------------

These macros affect all debugging formats.

`DBX_REGISTER_NUMBER (REGNO)'
     A C expression that returns the DBX register number for the
     compiler register number REGNO.  In simple cases, the value of this
     expression may be REGNO itself.  But sometimes there are some
     registers that the compiler knows about and DBX does not, or vice
     versa.  In such cases, some register may need to have one number in
     the compiler and another for DBX.

     If two registers have consecutive numbers inside GNU CC, and they
     can be used as a pair to hold a multiword value, then they _must_
     have consecutive numbers after renumbering with
     `DBX_REGISTER_NUMBER'.  Otherwise, debuggers will be unable to
     access such a pair, because they expect register pairs to be
     consecutive in their own numbering scheme.

     If you find yourself defining `DBX_REGISTER_NUMBER' in way that
     does not preserve register pairs, then what you must do instead is
     redefine the actual register numbering scheme.

`DEBUGGER_AUTO_OFFSET (X)'
     A C expression that returns the integer offset value for an
     automatic variable having address X (an RTL expression).  The
     default computation assumes that X is based on the frame-pointer
     and gives the offset from the frame-pointer.  This is required for
     targets that produce debugging output for DBX or COFF-style
     debugging output for SDB and allow the frame-pointer to be
     eliminated when the `-g' options is used.

`DEBUGGER_ARG_OFFSET (OFFSET, X)'
     A C expression that returns the integer offset value for an
     argument having address X (an RTL expression).  The nominal offset
     is OFFSET.

`PREFERRED_DEBUGGING_TYPE'
     A C expression that returns the type of debugging output GNU CC
     should produce when the user specifies just `-g'.  Define this if
     you have arranged for GNU CC to support more than one format of
     debugging output.  Currently, the allowable values are `DBX_DEBUG',
     `SDB_DEBUG', `DWARF_DEBUG', `DWARF2_DEBUG', and `XCOFF_DEBUG'.

     When the user specifies `-ggdb', GNU CC normally also uses the
     value of this macro to select the debugging output format, but
     with two exceptions.  If `DWARF2_DEBUGGING_INFO' is defined and
     `LINKER_DOES_NOT_WORK_WITH_DWARF2' is not defined, GNU CC uses the
     value `DWARF2_DEBUG'.  Otherwise, if `DBX_DEBUGGING_INFO' is
     defined, GNU CC uses `DBX_DEBUG'.

     The value of this macro only affects the default debugging output;
     the user can always get a specific type of output by using
     `-gstabs', `-gcoff', `-gdwarf-1', `-gdwarf-2', or `-gxcoff'.


File: gcc.info,  Node: DBX Options,  Next: DBX Hooks,  Prev: All Debuggers,  Up: Debugging Info

17.17.2 Specific Options for DBX Output
---------------------------------------

These are specific options for DBX output.

`DBX_DEBUGGING_INFO'
     Define this macro if GNU CC should produce debugging output for DBX
     in response to the `-g' option.

`XCOFF_DEBUGGING_INFO'
     Define this macro if GNU CC should produce XCOFF format debugging
     output in response to the `-g' option.  This is a variant of DBX
     format.

`DEFAULT_GDB_EXTENSIONS'
     Define this macro to control whether GNU CC should by default
     generate GDB's extended version of DBX debugging information
     (assuming DBX-format debugging information is enabled at all).  If
     you don't define the macro, the default is 1: always generate the
     extended information if there is any occasion to.

`DEBUG_SYMS_TEXT'
     Define this macro if all `.stabs' commands should be output while
     in the text section.

`ASM_STABS_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabs' to define an ordinary debugging symbol.  If you don't
     define this macro, `.stabs' is used.  This macro applies only to
     DBX debugging information format.

`ASM_STABD_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabd' to define a debugging symbol whose value is the current
     location.  If you don't define this macro, `.stabd' is used.  This
     macro applies only to DBX debugging information format.

`ASM_STABN_OP'
     A C string constant naming the assembler pseudo op to use instead
     of `.stabn' to define a debugging symbol with no name.  If you
     don't define this macro, `.stabn' is used.  This macro applies
     only to DBX debugging information format.

`DBX_NO_XREFS'
     Define this macro if DBX on your system does not support the
     construct `xsTAGNAME'.  On some systems, this construct is used to
     describe a forward reference to a structure named TAGNAME.  On
     other systems, this construct is not supported at all.

`DBX_CONTIN_LENGTH'
     A symbol name in DBX-format debugging information is normally
     continued (split into two separate `.stabs' directives) when it
     exceeds a certain length (by default, 80 characters).  On some
     operating systems, DBX requires this splitting; on others,
     splitting must not be done.  You can inhibit splitting by defining
     this macro with the value zero.  You can override the default
     splitting-length by defining this macro as an expression for the
     length you desire.

`DBX_CONTIN_CHAR'
     Normally continuation is indicated by adding a `\' character to
     the end of a `.stabs' string when a continuation follows.  To use
     a different character instead, define this macro as a character
     constant for the character you want to use.  Do not define this
     macro if backslash is correct for your system.

`DBX_STATIC_STAB_DATA_SECTION'
     Define this macro if it is necessary to go to the data section
     before outputting the `.stabs' pseudo-op for a non-global static
     variable.

`DBX_TYPE_DECL_STABS_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a typedef.  The default is `N_LSYM'.

`DBX_STATIC_CONST_VAR_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a static variable located in the text section.  DBX format does not
     provide any "right" way to do this.  The default is `N_FUN'.

`DBX_REGPARM_STABS_CODE'
     The value to use in the "code" field of the `.stabs' directive for
     a parameter passed in registers.  DBX format does not provide any
     "right" way to do this.  The default is `N_RSYM'.

`DBX_REGPARM_STABS_LETTER'
     The letter to use in DBX symbol data to identify a symbol as a
     parameter passed in registers.  DBX format does not customarily
     provide any way to do this.  The default is `'P''.

`DBX_MEMPARM_STABS_LETTER'
     The letter to use in DBX symbol data to identify a symbol as a
     stack parameter.  The default is `'p''.

`DBX_FUNCTION_FIRST'
     Define this macro if the DBX information for a function and its
     arguments should precede the assembler code for the function.
     Normally, in DBX format, the debugging information entirely
     follows the assembler code.

`DBX_LBRAC_FIRST'
     Define this macro if the `N_LBRAC' symbol for a block should
     precede the debugging information for variables and functions
     defined in that block.  Normally, in DBX format, the `N_LBRAC'
     symbol comes first.

`DBX_BLOCKS_FUNCTION_RELATIVE'
     Define this macro if the value of a symbol describing the scope of
     a block (`N_LBRAC' or `N_RBRAC') should be relative to the start
     of the enclosing function.  Normally, GNU C uses an absolute
     address.

`DBX_USE_BINCL'
     Define this macro if GNU C should generate `N_BINCL' and `N_EINCL'
     stabs for included header files, as on Sun systems.  This macro
     also directs GNU C to output a type number as a pair of a file
     number and a type number within the file.  Normally, GNU C does not
     generate `N_BINCL' or `N_EINCL' stabs, and it outputs a single
     number for a type number.


File: gcc.info,  Node: DBX Hooks,  Next: File Names and DBX,  Prev: DBX Options,  Up: Debugging Info

17.17.3 Open-Ended Hooks for DBX Format
---------------------------------------

These are hooks for DBX format.

`DBX_OUTPUT_LBRAC (STREAM, NAME)'
     Define this macro to say how to output to STREAM the debugging
     information for the start of a scope level for variable names.  The
     argument NAME is the name of an assembler symbol (for use with
     `assemble_name') whose value is the address where the scope begins.

`DBX_OUTPUT_RBRAC (STREAM, NAME)'
     Like `DBX_OUTPUT_LBRAC', but for the end of a scope level.

`DBX_OUTPUT_ENUM (STREAM, TYPE)'
     Define this macro if the target machine requires special handling
     to output an enumeration type.  The definition should be a C
     statement (sans semicolon) to output the appropriate information
     to STREAM for the type TYPE.

`DBX_OUTPUT_FUNCTION_END (STREAM, FUNCTION)'
     Define this macro if the target machine requires special output at
     the end of the debugging information for a function.  The
     definition should be a C statement (sans semicolon) to output the
     appropriate information to STREAM.  FUNCTION is the
     `FUNCTION_DECL' node for the function.

`DBX_OUTPUT_STANDARD_TYPES (SYMS)'
     Define this macro if you need to control the order of output of the
     standard data types at the beginning of compilation.  The argument
     SYMS is a `tree' which is a chain of all the predefined global
     symbols, including names of data types.

     Normally, DBX output starts with definitions of the types for
     integers and characters, followed by all the other predefined
     types of the particular language in no particular order.

     On some machines, it is necessary to output different particular
     types first.  To do this, define `DBX_OUTPUT_STANDARD_TYPES' to
     output those symbols in the necessary order.  Any predefined types
     that you don't explicitly output will be output afterward in no
     particular order.

     Be careful not to define this macro so that it works only for C.
     There are no global variables to access most of the built-in
     types, because another language may have another set of types.
     The way to output a particular type is to look through SYMS to see
     if you can find it.  Here is an example:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)),
                           "long int"))
                dbxout_symbol (decl);
            ...
          }

     This does nothing if the expected type does not exist.

     See the function `init_decl_processing' in `c-decl.c' to find the
     names to use for all the built-in C types.

     Here is another way of finding a particular type:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (TREE_CODE (decl) == TYPE_DECL
                  && (TREE_CODE (TREE_TYPE (decl))
                      == INTEGER_CST)
                  && TYPE_PRECISION (TREE_TYPE (decl)) == 16
                  && TYPE_UNSIGNED (TREE_TYPE (decl)))
                /* This must be `unsigned short'.  */
                dbxout_symbol (decl);
            ...
          }

`NO_DBX_FUNCTION_END'
     Some stabs encapsulation formats (in particular ECOFF), cannot
     handle the `.stabs "",N_FUN,,0,0,Lscope-function-1' gdb dbx
     extention construct.  On those machines, define this macro to turn
     this feature off without disturbing the rest of the gdb extensions.



File: gcc.info,  Node: File Names and DBX,  Next: SDB and DWARF,  Prev: DBX Hooks,  Up: Debugging Info

17.17.4 File Names in DBX Format
--------------------------------

This describes file names in DBX format.

`DBX_WORKING_DIRECTORY'
     Define this if DBX wants to have the current directory recorded in
     each object file.

     Note that the working directory is always recorded if GDB
     extensions are enabled.

`DBX_OUTPUT_MAIN_SOURCE_FILENAME (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the main source
     file--the file specified as the input file for compilation.  This
     macro is called only once, at the beginning of compilation.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

`DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that the current directory during
     compilation is named NAME.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

`DBX_OUTPUT_MAIN_SOURCE_FILE_END (STREAM, NAME)'
     A C statement to output DBX debugging information at the end of
     compilation of the main source file NAME.

     If you don't define this macro, nothing special is output at the
     end of compilation, which is correct for most machines.

`DBX_OUTPUT_SOURCE_FILENAME (STREAM, NAME)'
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the current source
     file.  This output is generated each time input shifts to a
     different source file as a result of `#include', the end of an
     included file, or a `#line' command.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.


File: gcc.info,  Node: SDB and DWARF,  Prev: File Names and DBX,  Up: Debugging Info

17.17.5 Macros for SDB and DWARF Output
---------------------------------------

Here are macros for SDB and DWARF output.

`SDB_DEBUGGING_INFO'
     Define this macro if GNU CC should produce COFF-style debugging
     output for SDB in response to the `-g' option.

`DWARF_DEBUGGING_INFO'
     Define this macro if GNU CC should produce dwarf format debugging
     output in response to the `-g' option.

`DWARF2_DEBUGGING_INFO'
     Define this macro if GNU CC should produce dwarf version 2 format
     debugging output in response to the `-g' option.

     To support optional call frame debugging information, you must also
     define `INCOMING_RETURN_ADDR_RTX' and either set
     `RTX_FRAME_RELATED_P' on the prologue insns if you use RTL for the
     prologue, or call `dwarf2out_def_cfa' and `dwarf2out_reg_save' as
     appropriate from `FUNCTION_PROLOGUE' if you don't.

`DWARF2_FRAME_INFO'
     Define this macro to a nonzero value if GNU CC should always output
     Dwarf 2 frame information.  If `DWARF2_UNWIND_INFO' (*note
     Exception Region Output:: is nonzero, GNU CC will output this
     information not matter how you define `DWARF2_FRAME_INFO'.

`LINKER_DOES_NOT_WORK_WITH_DWARF2'
     Define this macro if the linker does not work with Dwarf version 2.
     Normally, if the user specifies only `-ggdb' GNU CC will use Dwarf
     version 2 if available; this macro disables this.  See the
     description of the `PREFERRED_DEBUGGING_TYPE' macro for more
     details.

`PUT_SDB_...'
     Define these macros to override the assembler syntax for the
     special SDB assembler directives.  See `sdbout.c' for a list of
     these macros and their arguments.  If the standard syntax is used,
     you need not define them yourself.

`SDB_DELIM'
     Some assemblers do not support a semicolon as a delimiter, even
     between SDB assembler directives.  In that case, define this macro
     to be the delimiter to use (usually `\n').  It is not necessary to
     define a new set of `PUT_SDB_OP' macros if this is the only change
     required.

`SDB_GENERATE_FAKE'
     Define this macro to override the usual method of constructing a
     dummy name for anonymous structure and union types.  See
     `sdbout.c' for more information.

`SDB_ALLOW_UNKNOWN_REFERENCES'
     Define this macro to allow references to unknown structure, union,
     or enumeration tags to be emitted.  Standard COFF does not allow
     handling of unknown references, MIPS ECOFF has support for it.

`SDB_ALLOW_FORWARD_REFERENCES'
     Define this macro to allow references to structure, union, or
     enumeration tags that have not yet been seen to be handled.  Some
     assemblers choke if forward tags are used, while some require it.


File: gcc.info,  Node: Cross-compilation,  Next: Misc,  Prev: Debugging Info,  Up: Target Macros

17.18 Cross Compilation and Floating Point
==========================================

While all modern machines use 2's complement representation for
integers, there are a variety of representations for floating point
numbers.  This means that in a cross-compiler the representation of
floating point numbers in the compiled program may be different from
that used in the machine doing the compilation.

   Because different representation systems may offer different amounts
of range and precision, the cross compiler cannot safely use the host
machine's floating point arithmetic.  Therefore, floating point
constants must be represented in the target machine's format.  This
means that the cross compiler cannot use `atof' to parse a floating
point constant; it must have its own special routine to use instead.
Also, constant folding must emulate the target machine's arithmetic (or
must not be done at all).

   The macros in the following table should be defined only if you are
cross compiling between different floating point formats.

   Otherwise, don't define them.  Then default definitions will be set
up which use `double' as the data type, `==' to test for equality, etc.

   You don't need to worry about how many times you use an operand of
any of these macros.  The compiler never uses operands which have side
effects.

`REAL_VALUE_TYPE'
     A macro for the C data type to be used to hold a floating point
     value in the target machine's format.  Typically this would be a
     `struct' containing an array of `int'.

`REAL_VALUES_EQUAL (X, Y)'
     A macro for a C expression which compares for equality the two
     values, X and Y, both of type `REAL_VALUE_TYPE'.

`REAL_VALUES_LESS (X, Y)'
     A macro for a C expression which tests whether X is less than Y,
     both values being of type `REAL_VALUE_TYPE' and interpreted as
     floating point numbers in the target machine's representation.

`REAL_VALUE_LDEXP (X, SCALE)'
     A macro for a C expression which performs the standard library
     function `ldexp', but using the target machine's floating point
     representation.  Both X and the value of the expression have type
     `REAL_VALUE_TYPE'.  The second argument, SCALE, is an integer.

`REAL_VALUE_FIX (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to a signed integer.  X has
     type `REAL_VALUE_TYPE'.

`REAL_VALUE_UNSIGNED_FIX (X)'
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to an unsigned integer.  X
     has type `REAL_VALUE_TYPE'.

`REAL_VALUE_RNDZINT (X)'
     A macro whose definition is a C expression to round the
     target-machine floating point value X towards zero to an integer
     value (but still as a floating point number).  X has type
     `REAL_VALUE_TYPE', and so does the value.

`REAL_VALUE_UNSIGNED_RNDZINT (X)'
     A macro whose definition is a C expression to round the
     target-machine floating point value X towards zero to an unsigned
     integer value (but still represented as a floating point number).
     X has type `REAL_VALUE_TYPE', and so does the value.

`REAL_VALUE_ATOF (STRING, MODE)'
     A macro for a C expression which converts STRING, an expression of
     type `char *', into a floating point number in the target machine's
     representation for mode MODE.  The value has type
     `REAL_VALUE_TYPE'.

`REAL_INFINITY'
     Define this macro if infinity is a possible floating point value,
     and therefore division by 0 is legitimate.

`REAL_VALUE_ISINF (X)'
     A macro for a C expression which determines whether X, a floating
     point value, is infinity.  The value has type `int'.  By default,
     this is defined to call `isinf'.

`REAL_VALUE_ISNAN (X)'
     A macro for a C expression which determines whether X, a floating
     point value, is a "nan" (not-a-number).  The value has type `int'.
     By default, this is defined to call `isnan'.

   Define the following additional macros if you want to make floating
point constant folding work while cross compiling.  If you don't define
them, cross compilation is still possible, but constant folding will
not happen for floating point values.

`REAL_ARITHMETIC (OUTPUT, CODE, X, Y)'
     A macro for a C statement which calculates an arithmetic operation
     of the two floating point values X and Y, both of type
     `REAL_VALUE_TYPE' in the target machine's representation, to
     produce a result of the same type and representation which is
     stored in OUTPUT (which will be a variable).

     The operation to be performed is specified by CODE, a tree code
     which will always be one of the following: `PLUS_EXPR',
     `MINUS_EXPR', `MULT_EXPR', `RDIV_EXPR', `MAX_EXPR', `MIN_EXPR'.

     The expansion of this macro is responsible for checking for
     overflow.  If overflow happens, the macro expansion should execute
     the statement `return 0;', which indicates the inability to
     perform the arithmetic operation requested.

`REAL_VALUE_NEGATE (X)'
     A macro for a C expression which returns the negative of the
     floating point value X.  Both X and the value of the expression
     have type `REAL_VALUE_TYPE' and are in the target machine's
     floating point representation.

     There is no way for this macro to report overflow, since overflow
     can't happen in the negation operation.

`REAL_VALUE_TRUNCATE (MODE, X)'
     A macro for a C expression which converts the floating point value
     X to mode MODE.

     Both X and the value of the expression are in the target machine's
     floating point representation and have type `REAL_VALUE_TYPE'.
     However, the value should have an appropriate bit pattern to be
     output properly as a floating constant whose precision accords
     with mode MODE.

     There is no way for this macro to report overflow.

`REAL_VALUE_TO_INT (LOW, HIGH, X)'
     A macro for a C expression which converts a floating point value X
     into a double-precision integer which is then stored into LOW and
     HIGH, two variables of type INT.

`REAL_VALUE_FROM_INT (X, LOW, HIGH, MODE)'
     A macro for a C expression which converts a double-precision
     integer found in LOW and HIGH, two variables of type INT, into a
     floating point value which is then stored into X.  The value is in
     the target machine's representation for mode MODE and has the type
     `REAL_VALUE_TYPE'.


File: gcc.info,  Node: Misc,  Prev: Cross-compilation,  Up: Target Macros

17.19 Miscellaneous Parameters
==============================

Here are several miscellaneous parameters.

`PREDICATE_CODES'
     Define this if you have defined special-purpose predicates in the
     file `MACHINE.c'.  This macro is called within an initializer of an
     array of structures.  The first field in the structure is the name
     of a predicate and the second field is an array of rtl codes.  For
     each predicate, list all rtl codes that can be in expressions
     matched by the predicate.  The list should have a trailing comma.
     Here is an example of two entries in the list for a typical RISC
     machine:

          #define PREDICATE_CODES \
            {"gen_reg_rtx_operand", {SUBREG, REG}},  \
            {"reg_or_short_cint_operand", {SUBREG, REG, CONST_INT}},

     Defining this macro does not affect the generated code (however,
     incorrect definitions that omit an rtl code that may be matched by
     the predicate can cause the compiler to malfunction).  Instead, it
     allows the table built by `genrecog' to be more compact and
     efficient, thus speeding up the compiler.  The most important
     predicates to include in the list specified by this macro are
     those used in the most insn patterns.

`CASE_VECTOR_MODE'
     An alias for a machine mode name.  This is the machine mode that
     elements of a jump-table should have.

`CASE_VECTOR_SHORTEN_MODE (MIN_OFFSET, MAX_OFFSET, BODY)'
     Optional: return the preferred mode for an `addr_diff_vec' when
     the minimum and maximum offset are known.  If you define this, it
     enables extra code in branch shortening to deal with
     `addr_diff_vec'.  To make this work, you also have to define
     INSN_ALIGN and make the alignment for `addr_diff_vec' explicit.
     The BODY argument is provided so that the offset_unsigned and scale
     flags can be updated.

`CASE_VECTOR_PC_RELATIVE'
     Define this macro to be a C expression to indicate when jump-tables
     should contain relative addresses.  If jump-tables never contain
     relative addresses, then you need not define this macro.

`CASE_DROPS_THROUGH'
     Define this if control falls through a `case' insn when the index
     value is out of range.  This means the specified default-label is
     actually ignored by the `case' insn proper.

`CASE_VALUES_THRESHOLD'
     Define this to be the smallest number of different values for
     which it is best to use a jump-table instead of a tree of
     conditional branches.  The default is four for machines with a
     `casesi' instruction and five otherwise.  This is best for most
     machines.

`WORD_REGISTER_OPERATIONS'
     Define this macro if operations between registers with integral
     mode smaller than a word are always performed on the entire
     register.  Most RISC machines have this property and most CISC
     machines do not.

`LOAD_EXTEND_OP (MODE)'
     Define this macro to be a C expression indicating when insns that
     read memory in MODE, an integral mode narrower than a word, set the
     bits outside of MODE to be either the sign-extension or the
     zero-extension of the data read.  Return `SIGN_EXTEND' for values
     of MODE for which the insn sign-extends, `ZERO_EXTEND' for which
     it zero-extends, and `NIL' for other modes.

     This macro is not called with MODE non-integral or with a width
     greater than or equal to `BITS_PER_WORD', so you may return any
     value in this case.  Do not define this macro if it would always
     return `NIL'.  On machines where this macro is defined, you will
     normally define it as the constant `SIGN_EXTEND' or `ZERO_EXTEND'.

`SHORT_IMMEDIATES_SIGN_EXTEND'
     Define this macro if loading short immediate values into registers
     sign extends.

`IMPLICIT_FIX_EXPR'
     An alias for a tree code that should be used by default for
     conversion of floating point values to fixed point.  Normally,
     `FIX_ROUND_EXPR' is used.

`FIXUNS_TRUNC_LIKE_FIX_TRUNC'
     Define this macro if the same instructions that convert a floating
     point number to a signed fixed point number also convert validly
     to an unsigned one.

`EASY_DIV_EXPR'
     An alias for a tree code that is the easiest kind of division to
     compile code for in the general case.  It may be `TRUNC_DIV_EXPR',
     `FLOOR_DIV_EXPR', `CEIL_DIV_EXPR' or `ROUND_DIV_EXPR'.  These four
     division operators differ in how they round the result to an
     integer.  `EASY_DIV_EXPR' is used when it is permissible to use
     any of those kinds of division and the choice should be made on
     the basis of efficiency.

`MOVE_MAX'
     The maximum number of bytes that a single instruction can move
     quickly between memory and registers or between two memory
     locations.

`MAX_MOVE_MAX'
     The maximum number of bytes that a single instruction can move
     quickly between memory and registers or between two memory
     locations.  If this is undefined, the default is `MOVE_MAX'.
     Otherwise, it is the constant value that is the largest value that
     `MOVE_MAX' can have at run-time.

`SHIFT_COUNT_TRUNCATED'
     A C expression that is nonzero if on this machine the number of
     bits actually used for the count of a shift operation is equal to
     the number of bits needed to represent the size of the object
     being shifted.  When this macro is non-zero, the compiler will
     assume that it is safe to omit a sign-extend, zero-extend, and
     certain bitwise `and' instructions that truncates the count of a
     shift operation.  On machines that have instructions that act on
     bitfields at variable positions, which may include `bit test'
     instructions, a nonzero `SHIFT_COUNT_TRUNCATED' also enables
     deletion of truncations of the values that serve as arguments to
     bitfield instructions.

     If both types of instructions truncate the count (for shifts) and
     position (for bitfield operations), or if no variable-position
     bitfield instructions exist, you should define this macro.

     However, on some machines, such as the 80386 and the 680x0,
     truncation only applies to shift operations and not the (real or
     pretended) bitfield operations.  Define `SHIFT_COUNT_TRUNCATED' to
     be zero on such machines.  Instead, add patterns to the `md' file
     that include the implied truncation of the shift instructions.

     You need not define this macro if it would always have the value
     of zero.

`TRULY_NOOP_TRUNCATION (OUTPREC, INPREC)'
     A C expression which is nonzero if on this machine it is safe to
     "convert" an integer of INPREC bits to one of OUTPREC bits (where
     OUTPREC is smaller than INPREC) by merely operating on it as if it
     had only OUTPREC bits.

     On many machines, this expression can be 1.

     When `TRULY_NOOP_TRUNCATION' returns 1 for a pair of sizes for
     modes for which `MODES_TIEABLE_P' is 0, suboptimal code can result.
     If this is the case, making `TRULY_NOOP_TRUNCATION' return 0 in
     such cases may improve things.

`STORE_FLAG_VALUE'
     A C expression describing the value returned by a comparison
     operator with an integral mode and stored by a store-flag
     instruction (`sCOND') when the condition is true.  This
     description must apply to _all_ the `sCOND' patterns and all the
     comparison operators whose results have a `MODE_INT' mode.

     A value of 1 or -1 means that the instruction implementing the
     comparison operator returns exactly 1 or -1 when the comparison is
     true and 0 when the comparison is false.  Otherwise, the value
     indicates which bits of the result are guaranteed to be 1 when the
     comparison is true.  This value is interpreted in the mode of the
     comparison operation, which is given by the mode of the first
     operand in the `sCOND' pattern.  Either the low bit or the sign
     bit of `STORE_FLAG_VALUE' be on.  Presently, only those bits are
     used by the compiler.

     If `STORE_FLAG_VALUE' is neither 1 or -1, the compiler will
     generate code that depends only on the specified bits.  It can also
     replace comparison operators with equivalent operations if they
     cause the required bits to be set, even if the remaining bits are
     undefined.  For example, on a machine whose comparison operators
     return an `SImode' value and where `STORE_FLAG_VALUE' is defined as
     `0x80000000', saying that just the sign bit is relevant, the
     expression

          (ne:SI (and:SI X (const_int POWER-OF-2)) (const_int 0))

     can be converted to

          (ashift:SI X (const_int N))

     where N is the appropriate shift count to move the bit being
     tested into the sign bit.

     There is no way to describe a machine that always sets the
     low-order bit for a true value, but does not guarantee the value
     of any other bits, but we do not know of any machine that has such
     an instruction.  If you are trying to port GNU CC to such a
     machine, include an instruction to perform a logical-and of the
     result with 1 in the pattern for the comparison operators and let
     us know (*note How to Report Bugs: Bug Reporting.).

     Often, a machine will have multiple instructions that obtain a
     value from a comparison (or the condition codes).  Here are rules
     to guide the choice of value for `STORE_FLAG_VALUE', and hence the
     instructions to be used:

        * Use the shortest sequence that yields a valid definition for
          `STORE_FLAG_VALUE'.  It is more efficient for the compiler to
          "normalize" the value (convert it to, e.g., 1 or 0) than for
          the comparison operators to do so because there may be
          opportunities to combine the normalization with other
          operations.

        * For equal-length sequences, use a value of 1 or -1, with -1
          being slightly preferred on machines with expensive jumps and
          1 preferred on other machines.

        * As a second choice, choose a value of `0x80000001' if
          instructions exist that set both the sign and low-order bits
          but do not define the others.

        * Otherwise, use a value of `0x80000000'.

     Many machines can produce both the value chosen for
     `STORE_FLAG_VALUE' and its negation in the same number of
     instructions.  On those machines, you should also define a pattern
     for those cases, e.g., one matching

          (set A (neg:M (ne:M B C)))

     Some machines can also perform `and' or `plus' operations on
     condition code values with less instructions than the corresponding
     `sCOND' insn followed by `and' or `plus'.  On those machines,
     define the appropriate patterns.  Use the names `incscc' and
     `decscc', respectively, for the patterns which perform `plus' or
     `minus' operations on condition code values.  See `rs6000.md' for
     some examples.  The GNU Superoptizer can be used to find such
     instruction sequences on other machines.

     You need not define `STORE_FLAG_VALUE' if the machine has no
     store-flag instructions.

`FLOAT_STORE_FLAG_VALUE'
     A C expression that gives a non-zero floating point value that is
     returned when comparison operators with floating-point results are
     true.  Define this macro on machine that have comparison
     operations that return floating-point values.  If there are no
     such operations, do not define this macro.

`Pmode'
     An alias for the machine mode for pointers.  On most machines,
     define this to be the integer mode corresponding to the width of a
     hardware pointer; `SImode' on 32-bit machine or `DImode' on 64-bit
     machines.  On some machines you must define this to be one of the
     partial integer modes, such as `PSImode'.

     The width of `Pmode' must be at least as large as the value of
     `POINTER_SIZE'.  If it is not equal, you must define the macro
     `POINTERS_EXTEND_UNSIGNED' to specify how pointers are extended to
     `Pmode'.

`FUNCTION_MODE'
     An alias for the machine mode used for memory references to
     functions being called, in `call' RTL expressions.  On most
     machines this should be `QImode'.

`INTEGRATE_THRESHOLD (DECL)'
     A C expression for the maximum number of instructions above which
     the function DECL should not be inlined.  DECL is a
     `FUNCTION_DECL' node.

     The default definition of this macro is 64 plus 8 times the number
     of arguments that the function accepts.  Some people think a larger
     threshold should be used on RISC machines.

`SCCS_DIRECTIVE'
     Define this if the preprocessor should ignore `#sccs' directives
     and print no error message.

`NO_IMPLICIT_EXTERN_C'
     Define this macro if the system header files support C++ as well
     as C.  This macro inhibits the usual method of using system header
     files in C++, which is to pretend that the file's contents are
     enclosed in `extern "C" {...}'.

`HANDLE_PRAGMA (GETC, UNGETC, NAME)'
     Define this macro if you want to implement any pragmas.  If
     defined, it is a C expression whose value is 1 if the pragma was
     handled by the macro, zero otherwise.  The argument GETC is a
     function of type `int (*)(void)' which will return the next
     character in the input stream, or EOF if no characters are left.
     The argument UNGETC is a function of type `void (*)(int)' which
     will push a character back into the input stream.  The argument
     NAME is the word following #pragma in the input stream.  The input
     stream pointer will be pointing just beyond the end of this word.
     The input stream should be left undistrubed if the expression
     returns zero, otherwise it should be pointing at the next
     character after the end of the pragma.  Any characters remaining
     on the line will be ignored.

     It is generally a bad idea to implement new uses of `#pragma'.  The
     only reason to define this macro is for compatibility with other
     compilers that do support `#pragma' for the sake of any user
     programs which already use it.

     If the pragma can be implemented by atttributes then the macro
     `INSERT_ATTRIBUTES' might be a useful one to define as well.

     Note: older versions of this macro only had two arguments: STREAM
     and TOKEN.  The macro was changed in order to allow it to work
     when gcc is built both with and without a cpp library.

`HANDLE_SYSV_PRAGMA'
     Define this macro (to a value of 1) if you want the System V style
     pragmas `#pragma pack(<n>)' and `#pragma weak <name> [=<value>]'
     to be supported by gcc.

     The pack pragma specifies the maximum alignment (in bytes) of
     fields within a structure, in much the same way as the
     `__aligned__' and `__packed__' `__attribute__'s do.  A pack value
     of zero resets the behaviour to the default.

     The weak pragma only works if `SUPPORTS_WEAK' and
     `ASM_WEAKEN_LABEL' are defined.  If enabled it allows the creation
     of specifically named weak labels, optionally with a value.

`HANDLE_PRAGMA_PACK_PUSH_POP'
     Define this macro (to a value of 1) if you want to support the
     Win32 style pragmas `#pragma pack(push,<n>)' and `#pragma
     pack(pop)'.  The pack(push,<n>) pragma specifies the maximum
     alignment (in bytes) of fields within a structure, in much the
     same way as the `__aligned__' and `__packed__' `__attribute__'s
     do.  A pack value of zero resets the behaviour to the default.
     Successive invocations of this pragma cause the previous values to
     be stacked, so that invocations of `#pragma pack(pop)' will return
     to the previous value.

`VALID_MACHINE_DECL_ATTRIBUTE (DECL, ATTRIBUTES, IDENTIFIER, ARGS)'
     If defined, a C expression whose value is nonzero if IDENTIFIER
     with arguments ARGS is a valid machine specific attribute for DECL.
     The attributes in ATTRIBUTES have previously been assigned to DECL.

`VALID_MACHINE_TYPE_ATTRIBUTE (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)'
     If defined, a C expression whose value is nonzero if IDENTIFIER
     with arguments ARGS is a valid machine specific attribute for TYPE.
     The attributes in ATTRIBUTES have previously been assigned to TYPE.

`COMP_TYPE_ATTRIBUTES (TYPE1, TYPE2)'
     If defined, a C expression whose value is zero if the attributes on
     TYPE1 and TYPE2 are incompatible, one if they are compatible, and
     two if they are nearly compatible (which causes a warning to be
     generated).

`SET_DEFAULT_TYPE_ATTRIBUTES (TYPE)'
     If defined, a C statement that assigns default attributes to newly
     defined TYPE.

`MERGE_MACHINE_TYPE_ATTRIBUTES (TYPE1, TYPE2)'
     Define this macro if the merging of type attributes needs special
     handling.  If defined, the result is a list of the combined
     TYPE_ATTRIBUTES of TYPE1 and TYPE2.  It is assumed that comptypes
     has already been called and returned 1.

`MERGE_MACHINE_DECL_ATTRIBUTES (OLDDECL, NEWDECL)'
     Define this macro if the merging of decl attributes needs special
     handling.  If defined, the result is a list of the combined
     DECL_MACHINE_ATTRIBUTES of OLDDECL and NEWDECL.  NEWDECL is a
     duplicate declaration of OLDDECL.  Examples of when this is needed
     are when one attribute overrides another, or when an attribute is
     nullified by a subsequent definition.

`INSERT_ATTRIBUTES (NODE, ATTR_PTR, PREFIX_PTR)'
     Define this macro if you want to be able to add attributes to a
     decl when it is being created.  This is normally useful for
     backends which wish to implement a pragma by using the attributes
     which correspond to the pragma's effect.  The NODE argument is the
     decl which is being created.  The ATTR_PTR argument is a pointer
     to the attribute list for this decl.  The PREFIX_PTR is a pointer
     to the list of attributes that have appeared after the specifiers
     and modifiers of the declaration, but before the declaration
     proper.

`SET_DEFAULT_DECL_ATTRIBUTES (DECL, ATTRIBUTES)'
     If defined, a C statement that assigns default attributes to newly
     defined DECL.

`DOLLARS_IN_IDENTIFIERS'
     Define this macro to control use of the character `$' in identifier
     names.  0 means `$' is not allowed by default; 1 means it is
     allowed.  1 is the default; there is no need to define this macro
     in that case.  This macro controls the compiler proper; it does
     not affect the preprocessor.

`NO_DOLLAR_IN_LABEL'
     Define this macro if the assembler does not accept the character
     `$' in label names.  By default constructors and destructors in
     G++ have `$' in the identifiers.  If this macro is defined, `.' is
     used instead.

`NO_DOT_IN_LABEL'
     Define this macro if the assembler does not accept the character
     `.' in label names.  By default constructors and destructors in G++
     have names that use `.'.  If this macro is defined, these names
     are rewritten to avoid `.'.

`DEFAULT_MAIN_RETURN'
     Define this macro if the target system expects every program's
     `main' function to return a standard "success" value by default
     (if no other value is explicitly returned).

     The definition should be a C statement (sans semicolon) to
     generate the appropriate rtl instructions.  It is used only when
     compiling the end of `main'.

`HAVE_ATEXIT'
     Define this if the target system supports the function `atexit'
     from the ANSI C standard.  If this is not defined, and
     `INIT_SECTION_ASM_OP' is not defined, a default `exit' function
     will be provided to support C++.

`EXIT_BODY'
     Define this if your `exit' function needs to do something besides
     calling an external function `_cleanup' before terminating with
     `_exit'.  The `EXIT_BODY' macro is only needed if neither
     `HAVE_ATEXIT' nor `INIT_SECTION_ASM_OP' are defined.

`INSN_SETS_ARE_DELAYED (INSN)'
     Define this macro as a C expression that is nonzero if it is safe
     for the delay slot scheduler to place instructions in the delay
     slot of INSN, even if they appear to use a resource set or
     clobbered in INSN.  INSN is always a `jump_insn' or an `insn'; GNU
     CC knows that every `call_insn' has this behavior.  On machines
     where some `insn' or `jump_insn' is really a function call and
     hence has this behavior, you should define this macro.

     You need not define this macro if it would always return zero.

`INSN_REFERENCES_ARE_DELAYED (INSN)'
     Define this macro as a C expression that is nonzero if it is safe
     for the delay slot scheduler to place instructions in the delay
     slot of INSN, even if they appear to set or clobber a resource
     referenced in INSN.  INSN is always a `jump_insn' or an `insn'.
     On machines where some `insn' or `jump_insn' is really a function
     call and its operands are registers whose use is actually in the
     subroutine it calls, you should define this macro.  Doing so
     allows the delay slot scheduler to move instructions which copy
     arguments into the argument registers into the delay slot of INSN.

     You need not define this macro if it would always return zero.

`MACHINE_DEPENDENT_REORG (INSN)'
     In rare cases, correct code generation requires extra machine
     dependent processing between the second jump optimization pass and
     delayed branch scheduling.  On those machines, define this macro
     as a C statement to act on the code starting at INSN.

`MULTIPLE_SYMBOL_SPACES'
     Define this macro if in some cases global symbols from one
     translation unit may not be bound to undefined symbols in another
     translation unit without user intervention.  For instance, under
     Microsoft Windows symbols must be explicitly imported from shared
     libraries (DLLs).

`ISSUE_RATE'
     A C expression that returns how many instructions can be issued at
     the same time if the machine is a superscalar machine.  This is
     only used by the `Haifa' scheduler, and not the traditional
     scheduler.

`MD_SCHED_INIT (FILE, VERBOSE)'
     A C statement which is executed by the `Haifa' scheduler at the
     beginning of each block of instructions that are to be scheduled.
     FILE is either a null pointer, or a stdio stream to write any
     debug output to.  VERBOSE is the verbose level provided by
     `-fsched-verbose-'N.

`MD_SCHED_REORDER (FILE, VERBOSE, READY, N_READY)'
     A C statement which is executed by the `Haifa' scheduler after it
     has scheduled the ready list to allow the machine description to
     reorder it (for example to combine two small instructions together
     on `VLIW' machines).  FILE is either a null pointer, or a stdio
     stream to write any debug output to.  VERBOSE is the verbose level
     provided by `-fsched-verbose-'N.  READY is a pointer to the ready
     list of instructions that are ready to be scheduled.  N_READY is
     the number of elements in the ready list.  The scheduler reads the
     ready list in reverse order, starting with READY[N_READY-1] and
     going to READY[0].

`MD_SCHED_VARIABLE_ISSUE (FILE, VERBOSE, INSN, MORE)'
     A C statement which is executed by the `Haifa' scheduler after it
     has scheduled an insn from the ready list.  FILE is either a null
     pointer, or a stdio stream to write any debug output to.  VERBOSE
     is the verbose level provided by `-fsched-verbose-'N.  INSN is the
     instruction that was scheduled.  MORE is the number of
     instructions that can be issued in the current cycle.  The
     `MD_SCHED_VARIABLE_ISSUE' macro is responsible for updating the
     value of MORE (typically by MORE-).

`MAX_INTEGER_COMPUTATION_MODE'
     Define this to the largest integer machine mode which can be used
     for operations other than load, store and copy operations.

     You need only define this macro if the target holds values larger
     than `word_mode' in general purpose registers.  Most targets
     should not define this macro.

`MATH_LIBRARY'
     Define this macro as a C string constant for the linker argument
     to link in the system math library, or `""' if the target does not
     have a separate math library.

     You need only define this macro if the default of `"-lm"' is wrong.


File: gcc.info,  Node: Config,  Next: Fragments,  Prev: Target Macros,  Up: Top

18 The Configuration File
*************************

The configuration file `xm-MACHINE.h' contains macro definitions that
describe the machine and system on which the compiler is running,
unlike the definitions in `MACHINE.h', which describe the machine for
which the compiler is producing output.  Most of the values in
`xm-MACHINE.h' are actually the same on all machines that GCC runs on,
so large parts of all configuration files are identical.  But there are
some macros that vary:

`USG'
     Define this macro if the host system is System V.

`VMS'
     Define this macro if the host system is VMS.

`FATAL_EXIT_CODE'
     A C expression for the status code to be returned when the compiler
     exits after serious errors.

`SUCCESS_EXIT_CODE'
     A C expression for the status code to be returned when the compiler
     exits without serious errors.

`HOST_WORDS_BIG_ENDIAN'
     Defined if the host machine stores words of multi-word values in
     big-endian order.  (GCC does not depend on the host byte ordering
     within a word.)

`HOST_FLOAT_WORDS_BIG_ENDIAN'
     Define this macro to be 1 if the host machine stores `DFmode',
     `XFmode' or `TFmode' floating point numbers in memory with the
     word containing the sign bit at the lowest address; otherwise,
     define it to be zero.

     This macro need not be defined if the ordering is the same as for
     multi-word integers.

`HOST_FLOAT_FORMAT'
     A numeric code distinguishing the floating point format for the
     host machine.  See `TARGET_FLOAT_FORMAT' in *note Storage Layout::
     for the alternatives and default.

`HOST_BITS_PER_CHAR'
     A C expression for the number of bits in `char' on the host
     machine.

`HOST_BITS_PER_SHORT'
     A C expression for the number of bits in `short' on the host
     machine.

`HOST_BITS_PER_INT'
     A C expression for the number of bits in `int' on the host machine.

`HOST_BITS_PER_LONG'
     A C expression for the number of bits in `long' on the host
     machine.

`ONLY_INT_FIELDS'
     Define this macro to indicate that the host compiler only supports
     `int' bit fields, rather than other integral types, including
     `enum', as do most C compilers.

`OBSTACK_CHUNK_SIZE'
     A C expression for the size of ordinary obstack chunks.  If you
     don't define this, a usually-reasonable default is used.

`OBSTACK_CHUNK_ALLOC'
     The function used to allocate obstack chunks.  If you don't define
     this, `xmalloc' is used.

`OBSTACK_CHUNK_FREE'
     The function used to free obstack chunks.  If you don't define
     this, `free' is used.

`USE_C_ALLOCA'
     Define this macro to indicate that the compiler is running with the
     `alloca' implemented in C.  This version of `alloca' can be found
     in the file `alloca.c'; to use it, you must also alter the
     `Makefile' variable `ALLOCA'.  (This is done automatically for the
     systems on which we know it is needed.)

     If you do define this macro, you should probably do it as follows:

          #ifndef __GNUC__
          #define USE_C_ALLOCA
          #else
          #define alloca __builtin_alloca
          #endif

     so that when the compiler is compiled with GCC it uses the more
     efficient built-in `alloca' function.

`FUNCTION_CONVERSION_BUG'
     Define this macro to indicate that the host compiler does not
     properly handle converting a function value to a
     pointer-to-function when it is used in an expression.

`MULTIBYTE_CHARS'
     Define this macro to enable support for multibyte characters in the
     input to GCC.  This requires that the host system support the ANSI
     C library functions for converting multibyte characters to wide
     characters.

`POSIX'
     Define this if your system is POSIX.1 compliant.

`NO_SYS_SIGLIST'
     Define this if your system _does not_ provide the variable
     `sys_siglist'.

     Some systems do provide this variable, but with a different name
     such as `_sys_siglist'.  On these systems, you can define
     `sys_siglist' as a macro which expands into the name actually
     provided.

     Autoconf normally defines `SYS_SIGLIST_DECLARED' when it finds a
     declaration of `sys_siglist' in the system header files.  However,
     when you define `sys_siglist' to a different name autoconf will
     not automatically define `SYS_SIGLIST_DECLARED'.  Therefore, if
     you define `sys_siglist', you should also define
     `SYS_SIGLIST_DECLARED'.

`USE_PROTOTYPES'
     Define this to be 1 if you know that the host compiler supports
     prototypes, even if it doesn't define __STDC__, or define it to be
     0 if you do not want any prototypes used in compiling GCC.  If
     `USE_PROTOTYPES' is not defined, it will be determined
     automatically whether your compiler supports prototypes by
     checking if `__STDC__' is defined.

`NO_MD_PROTOTYPES'
     Define this if you wish suppression of prototypes generated from
     the machine description file, but to use other prototypes within
     GCC.  If `USE_PROTOTYPES' is defined to be 0, or the host compiler
     does not support prototypes, this macro has no effect.

`MD_CALL_PROTOTYPES'
     Define this if you wish to generate prototypes for the `gen_call'
     or `gen_call_value' functions generated from the machine
     description file.  If `USE_PROTOTYPES' is defined to be 0, or the
     host compiler does not support prototypes, or `NO_MD_PROTOTYPES'
     is defined, this macro has no effect.  As soon as all of the
     machine descriptions are modified to have the appropriate number
     of arguments, this macro will be removed.

`PATH_SEPARATOR'
     Define this macro to be a C character constant representing the
     character used to separate components in paths.  The default value
     is the colon character

`DIR_SEPARATOR'
     If your system uses some character other than slash to separate
     directory names within a file specification, define this macro to
     be a C character constant specifying that character.  When GCC
     displays file names, the character you specify will be used.  GCC
     will test for both slash and the character you specify when
     parsing filenames.

`OBJECT_SUFFIX'
     Define this macro to be a C string representing the suffix for
     object files on your machine.  If you do not define this macro,
     GCC will use `.o' as the suffix for object files.

`EXECUTABLE_SUFFIX'
     Define this macro to be a C string representing the suffix for
     executable files on your machine.  If you do not define this
     macro, GCC will use the null string as the suffix for object files.

`COLLECT_EXPORT_LIST'
     If defined, `collect2' will scan the individual object files
     specified on its command line and create an export list for the
     linker.  Define this macro for systems like AIX, where the linker
     discards object files that are not referenced from `main' and uses
     export lists.

   In addition, configuration files for system V define `bcopy',
`bzero' and `bcmp' as aliases.  Some files define `alloca' as a macro
when compiled with GCC, in order to take advantage of the benefit of
GCC's built-in `alloca'.


File: gcc.info,  Node: Fragments,  Next: Funding,  Prev: Config,  Up: Top

19 Makefile Fragments
*********************

When you configure GCC using the `configure' script (*note
Installation::), it will construct the file `Makefile' from the
template file `Makefile.in'.  When it does this, it will incorporate
makefile fragment files from the `config' directory, named `t-TARGET'
and `x-HOST'.  If these files do not exist, it means nothing needs to
be added for a given target or host.

* Menu:

* Target Fragment:: Writing the `t-TARGET' file.
* Host Fragment::   Writing the `x-HOST' file.


File: gcc.info,  Node: Target Fragment,  Next: Host Fragment,  Up: Fragments

19.1 The Target Makefile Fragment
=================================

The target makefile fragment, `t-TARGET', defines special target
dependent variables and targets used in the `Makefile':

`LIBGCC1'
     The rule to use to build `libgcc1.a'.  If your target does not
     need to use the functions in `libgcc1.a', set this to empty.
     *Note Interface::.

`CROSS_LIBGCC1'
     The rule to use to build `libgcc1.a' when building a cross
     compiler.  If your target does not need to use the functions in
     `libgcc1.a', set this to empty.  *Note Cross Runtime::.

`LIBGCC2_CFLAGS'
     Compiler flags to use when compiling `libgcc2.c'.

`LIB2FUNCS_EXTRA'
     A list of source file names to be compiled or assembled and
     inserted into `libgcc.a'.

`CRTSTUFF_T_CFLAGS'
     Special flags used when compiling `crtstuff.c'.  *Note
     Initialization::.

`CRTSTUFF_T_CFLAGS_S'
     Special flags used when compiling `crtstuff.c' for shared linking.
     Used if you use `crtbeginS.o' and `crtendS.o' in `EXTRA-PARTS'.
     *Note Initialization::.

`MULTILIB_OPTIONS'
     For some targets, invoking GCC in different ways produces objects
     that can not be linked together.  For example, for some targets GCC
     produces both big and little endian code.  For these targets, you
     must arrange for multiple versions of `libgcc.a' to be compiled,
     one for each set of incompatible options.  When GCC invokes the
     linker, it arranges to link in the right version of `libgcc.a',
     based on the command line options used.

     The `MULTILIB_OPTIONS' macro lists the set of options for which
     special versions of `libgcc.a' must be built.  Write options that
     are mutually incompatible side by side, separated by a slash.
     Write options that may be used together separated by a space.  The
     build procedure will build all combinations of compatible options.

     For example, if you set `MULTILIB_OPTIONS' to `m68000/m68020
     msoft-float', `Makefile' will build special versions of `libgcc.a'
     using the following sets of options:  `-m68000', `-m68020',
     `-msoft-float', `-m68000 -msoft-float', and `-m68020 -msoft-float'.

`MULTILIB_DIRNAMES'
     If `MULTILIB_OPTIONS' is used, this variable specifies the
     directory names that should be used to hold the various libraries.
     Write one element in `MULTILIB_DIRNAMES' for each element in
     `MULTILIB_OPTIONS'.  If `MULTILIB_DIRNAMES' is not used, the
     default value will be `MULTILIB_OPTIONS', with all slashes treated
     as spaces.

     For example, if `MULTILIB_OPTIONS' is set to `m68000/m68020
     msoft-float', then the default value of `MULTILIB_DIRNAMES' is
     `m68000 m68020 msoft-float'.  You may specify a different value if
     you desire a different set of directory names.

`MULTILIB_MATCHES'
     Sometimes the same option may be written in two different ways.
     If an option is listed in `MULTILIB_OPTIONS', GCC needs to know
     about any synonyms.  In that case, set `MULTILIB_MATCHES' to a
     list of items of the form `option=option' to describe all relevant
     synonyms.  For example, `m68000=mc68000 m68020=mc68020'.

`MULTILIB_EXCEPTIONS'
     Sometimes when there are multiple sets of `MULTILIB_OPTIONS' being
     specified, there are combinations that should not be built.  In
     that case, set `MULTILIB_EXCEPTIONS' to be all of the switch
     exceptions in shell case syntax that should not be built.

     For example, in the PowerPC embedded ABI support, it was not
     desirable to build libraries that compiled with the
     `-mcall-aixdesc' option and either of the `-mcall-aixdesc' or
     `-mlittle' options at the same time, and therefore
     `MULTILIB_EXCEPTIONS' is set to `*mrelocatable/*mcall-aixdesc*
     *mlittle/*mcall-aixdesc*'.

`MULTILIB_EXTRA_OPTS'
     Sometimes it is desirable that when building multiple versions of
     `libgcc.a' certain options should always be passed on to the
     compiler.  In that case, set `MULTILIB_EXTRA_OPTS' to be the list
     of options to be used for all builds.


File: gcc.info,  Node: Host Fragment,  Prev: Target Fragment,  Up: Fragments

19.2 The Host Makefile Fragment
===============================

The host makefile fragment, `x-HOST', defines special host dependent
variables and targets used in the `Makefile':

`CC'
     The compiler to use when building the first stage.

`CLIB'
     Additional host libraries to link with.

`OLDCC'
     The compiler to use when building `libgcc1.a' for a native
     compilation.

`OLDAR'
     The version of `ar' to use when building `libgcc1.a' for a native
     compilation.

`INSTALL'
     The install program to use.


File: gcc.info,  Node: Funding,  Next: GNU/Linux,  Prev: Fragments,  Up: Top

Funding Free Software
*********************

If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.

   Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers--the Free Software Foundation, and others.

   The way to convince distributors to do this is to demand it and
expect it from them.  So when you compare distributors, judge them
partly by how much they give to free software development.  Show
distributors they must compete to be the one who gives the most.

   To make this approach work, you must insist on numbers that you can
compare, such as, "We will donate ten dollars to the Frobnitz project
for each disk sold."  Don't be satisfied with a vague promise, such as
"A portion of the profits are donated," since it doesn't give a basis
for comparison.

   Even a precise fraction "of the profits from this disk" is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.
If the price you pay is $50, ten percent of the profit is probably less
than a dollar; it might be a few cents, or nothing at all.

   Some redistributors do development work themselves.  This is useful
too; but to keep everyone honest, you need to inquire how much they do,
and what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection
contribute more; major new features or packages contribute the most.

   By establishing the idea that supporting further development is "the
proper thing to do" when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.

     Copyright (C) 1994 Free Software Foundation, Inc.
     Verbatim copying and redistribution of this section is permitted
     without royalty; alteration is not permitted.


File: gcc.info,  Node: GNU/Linux,  Next: Copying,  Prev: Funding,  Up: Top

Linux and the GNU Project
*************************

Many computer users run a modified version of the GNU system every day,
without realizing it.  Through a peculiar turn of events, the version
of GNU which is widely used today is more often known as "Linux", and
many users are not aware of the extent of its connection with the GNU
Project.

   There really is a Linux; it is a kernel, and these people are using
it.  But you can't use a kernel by itself; a kernel is useful only as
part of a whole system.  The system in which Linux is typically used is
a modified variant of the GNU system--in other words, a Linux-based GNU
system.

   Many users are not fully aware of the distinction between the kernel,
which is Linux, and the whole system, which they also call "Linux".
The ambiguous use of the name doesn't promote understanding.

   Programmers generally know that Linux is a kernel.  But since they
have generally heard the whole system called "Linux" as well, they
often envisage a history which fits that name.  For example, many
believe that once Linus Torvalds finished writing the kernel, his
friends looked around for other free software, and for no particular
reason most everything necessary to make a Unix-like system was already
available.

   What they found was no accident--it was the GNU system.  The
available free software added up to a complete system because the GNU
Project had been working since 1984 to make one.  The GNU Manifesto had
set forth the goal of developing a free Unix-like system, called GNU.
By the time Linux was written, the system was almost finished.

   Most free software projects have the goal of developing a particular
program for a particular job.  For example, Linus Torvalds set out to
write a Unix-like kernel (Linux); Donald Knuth set out to write a text
formatter (TeX); Bob Scheifler set out to develop a window system (X
Windows).  It's natural to measure the contribution of this kind of
project by specific programs that came from the project.

   If we tried to measure the GNU Project's contribution in this way,
what would we conclude?  One CD-ROM vendor found that in their "Linux
distribution", GNU software was the largest single contingent, around
28% of the total source code, and this included some of the essential
major components without which there could be no system.  Linux itself
was about 3%.  So if you were going to pick a name for the system based
on who wrote the programs in the system, the most appropriate single
choice would be "GNU".

   But we don't think that is the right way to consider the question.
The GNU Project was not, is not, a project to develop specific software
packages.  It was not a project to develop a C compiler, although we
did.  It was not a project to develop a text editor, although we
developed one.  The GNU Project's aim was to develop _a complete free
Unix-like system_.

   Many people have made major contributions to the free software in the
system, and they all deserve credit.  But the reason it is _a
system_--and not just a collection of useful programs--is because the
GNU Project set out to make it one.  We wrote the programs that were
needed to make a _complete_ free system.  We wrote essential but
unexciting major components, such as the assembler and linker, because
you can't have a system without them.  A complete system needs more
than just programming tools, so we wrote other components as well, such
as the Bourne Again SHell, the PostScript interpreter Ghostscript, and
the GNU C library.

   By the early 90s we had put together the whole system aside from the
kernel (and we were also working on a kernel, the GNU Hurd, which runs
on top of Mach).  Developing this kernel has been a lot harder than we
expected, and we are still working on finishing it.

   Fortunately, you don't have to wait for it, because Linux is working
now.  When Linus Torvalds wrote Linux, he filled the last major gap.
People could then put Linux together with the GNU system to make a
complete free system: a Linux-based GNU system (or GNU/Linux system,
for short).

   Putting them together sounds simple, but it was not a trivial job.
The GNU C library (called glibc for short) needed substantial changes.
Integrating a complete system as a distribution that would work "out of
the box" was a big job, too.  It required addressing the issue of how
to install and boot the system--a problem we had not tackled, because
we hadn't yet reached that point.  The people who developed the various
system distributions made a substantial contribution.

   The GNU Project supports GNU/Linux systems as well as _the_ GNU
system--even with funds.  We funded the rewriting of the Linux-related
extensions to the GNU C library, so that now they are well integrated,
and the newest GNU/Linux systems use the current library release with
no changes.  We also funded an early stage of the development of Debian
GNU/Linux.

   We use Linux-based GNU systems today for most of our work, and we
hope you use them too.  But please don't confuse the public by using the
name "Linux" ambiguously.  Linux is the kernel, one of the essential
major components of the system.  The system as a whole is more or less
the GNU system.


File: gcc.info,  Node: Copying,  Next: Contributors,  Prev: GNU/Linux,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY
 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS
How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YYYY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) YYYY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: gcc.info,  Node: Contributors,  Next: Index,  Prev: Copying,  Up: Top

Contributors to GCC
*******************

In addition to Richard Stallman, several people have written parts of
GCC.

   * The idea of using RTL and some of the optimization ideas came from
     the program PO written at the University of Arizona by Jack
     Davidson and Christopher Fraser.  See "Register Allocation and
     Exhaustive Peephole Optimization", Software Practice and
     Experience 14 (9), Sept. 1984, 857-866.

   * Paul Rubin wrote most of the preprocessor.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the Vax machine description.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Jim Wilson implemented loop strength reduction and some other loop
     optimizations.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Michael Tiemann of Cygnus Support wrote the front end for C++, as
     well as the support for inline functions and instruction
     scheduling.  Also the descriptions of the National Semiconductor
     32000 series cpu, the SPARC cpu and part of the Motorola 88000 cpu.

   * Gerald Baumgartner added the signature extension to the C++
     front-end.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Randy Smith finished the Sun FPA support.

   * Robert Brown implemented the support for Encore 32000 systems.

   * David Kashtan of SRI adapted GCC to VMS.

   * Alex Crain provided changes for the 3b1.

   * Greg Satz and Chris Hanson assisted in making GCC work on HP-UX for
     the 9000 series 300.

   * William Schelter did most of the work on the Intel 80386 support.

   * Christopher Smith did the port for Convex machines.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Dario Dariol contributed the four varieties of sample programs
     that print a copy of their source.

   * Alain Lichnewsky ported GCC to the Mips cpu.

   * Devon Bowen, Dale Wiles and Kevin Zachmann ported GCC to the Tahoe.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Gary Miller ported GCC to Charles River Data Systems machines.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to
     better support RISC processors including changes to common
     subexpression elimination, strength reduction, function calling
     sequence handling, and condition code support, in addition to
     generalizing the code for frame pointer elimination.

   * Richard Kenner and Michael Tiemann jointly developed reorg.c, the
     delay slot scheduler.

   * Mike Meissner and Tom Wood of Data General finished the port to the
     Motorola 88000.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * NeXT, Inc. donated the front end that supports the Objective C
     language.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Mike Meissner at the Open Software Foundation finished the port to
     the MIPS cpu, including adding ECOFF debug support, and worked on
     the Intel port for the Intel 80386 cpu.  Later at Cygnus Support,
     he worked on the rs6000 and PowerPC ports.

   * Ron Guilmette implemented the `protoize' and `unprotoize' tools,
     the support for Dwarf symbolic debugging information, and much of
     the support for System V Release 4.  He has also worked heavily on
     the Intel 386 and 860 support.

   * Torbjorn Granlund implemented multiply- and divide-by-constant
     optimization, improved long long support, and improved leaf
     function register allocation.

   * Mike Stump implemented the support for Elxsi 64 bit CPU.

   * John Wehle added the machine description for the Western Electric
     32000 processor used in several 3b series machines (no relation to
     the National Semiconductor 32000 processor).

   * Holger Teutsch provided the support for the Clipper cpu.

   * Kresten Krab Thorup wrote the run time support for the Objective C
     language.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating
     point numbers wider than 64 bits.

   * David Edelsohn contributed the changes to RS/6000 port to make it
     support the PowerPC and POWER2 architectures.

   * Steve Chamberlain wrote the support for the Hitachi SH processor.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.


File: gcc.info,  Node: Index,  Prev: Contributors,  Up: Top

Index
*****

 [index ]
* Menu:

* ! in constraint:                       Multi-Alternative.   (line  47)
* # in constraint:                       Modifiers.           (line  57)
* # in template:                         Output Template.     (line  67)
* #pragma:                               Misc.                (line 322)
* #pragma implementation, implied:       C++ Interface.       (line  59)
* #pragma, reason for not using:         Function Attributes. (line 342)
* $:                                     Dollar Signs.        (line   6)
* % in constraint:                       Modifiers.           (line  42)
* % in template:                         Output Template.     (line   6)
* & in constraint:                       Modifiers.           (line  22)
* ':                                     Incompatibilities.   (line 122)
* (nil):                                 RTL Objects.         (line  59)
* * in constraint:                       Modifiers.           (line  62)
* * in template:                         Output Statement.    (line  29)
* + in constraint:                       Modifiers.           (line  12)
* -lgcc, use with -nodefaultlibs:        Link Options.        (line  78)
* -lgcc, use with -nostdlib:             Link Options.        (line  78)
* -nodefaultlibs and unresolved references: Link Options.     (line  78)
* -nostdlib and unresolved references:   Link Options.        (line  78)
* .sdata/.sdata2 references (PowerPC):   RS/6000 and PowerPC Options.
                                                              (line 407)
* //:                                    C++ Comments.        (line   6)
* /f in RTL dump:                        Flags.               (line  22)
* /i in RTL dump:                        Flags.               (line  48)
* /s in RTL dump:                        Flags.               (line  14)
* /u in RTL dump:                        Flags.               (line  73)
* /v in RTL dump:                        Flags.               (line  10)
* 0 in constraint:                       Simple Constraints.  (line 117)
* < in constraint:                       Simple Constraints.  (line  39)
* <?:                                    Min and Max.         (line  10)
* = in constraint:                       Modifiers.           (line   8)
* > in constraint:                       Simple Constraints.  (line  43)
* >?:                                    Min and Max.         (line  14)
* ? in constraint:                       Multi-Alternative.   (line  41)
* ?: extensions <1>:                     Lvalues.             (line   6)
* ?: extensions:                         Conditionals.        (line   6)
* ?: side effect:                        Conditionals.        (line  20)
* \:                                     Output Template.     (line  47)
* _ in variables in macros:              Naming Types.        (line  21)
* __bb:                                  Profiling.           (line 105)
* __bb_init_func:                        Profiling.           (line  34)
* __bb_init_trace_func:                  Profiling.           (line 134)
* __bb_trace_func:                       Profiling.           (line 105)
* __bb_trace_ret:                        Profiling.           (line 134)
* __builtin_apply:                       Constructing Calls.  (line  24)
* __builtin_apply_args:                  Constructing Calls.  (line  14)
* __builtin_args_info:                   Varargs.             (line  41)
* __builtin_classify_type:               Varargs.             (line  75)
* __builtin_constant_p:                  Other Builtins.      (line  23)
* __builtin_frame_address:               Return Address.      (line  26)
* __builtin_next_arg:                    Varargs.             (line  65)
* __builtin_return:                      Constructing Calls.  (line  42)
* __builtin_return_address:              Return Address.      (line   9)
* __builtin_saveregs:                    Varargs.             (line  23)
* __CTOR_LIST__:                         Initialization.      (line  25)
* __DTOR_LIST__:                         Initialization.      (line  25)
* __extension__:                         Alternate Keywords.  (line  29)
* __main:                                Collect2.            (line  15)
* abort <1>:                             C Dialect Options.   (line  78)
* abort:                                 Portability.         (line  20)
* abs <1>:                               Arithmetic.          (line 147)
* abs:                                   C Dialect Options.   (line  78)
* abs and attributes:                    Expressions.         (line  64)
* absM2 instruction pattern:             Standard Names.      (line 204)
* absolute value:                        Arithmetic.          (line 147)
* access to operands:                    Accessors.           (line   6)
* accessors:                             Accessors.           (line   6)
* ACCUMULATE_OUTGOING_ARGS:              Stack Arguments.     (line  35)
* ACCUMULATE_OUTGOING_ARGS and stack frames: Function Entry.  (line  78)
* ADDITIONAL_REGISTER_NAMES:             Instruction Output.  (line  14)
* addM3 instruction pattern:             Standard Names.      (line 139)
* addr_diff_vec:                         Side Effects.        (line 253)
* addr_diff_vec, length of:              Insn Lengths.        (line  26)
* addr_vec:                              Side Effects.        (line 248)
* addr_vec, length of:                   Insn Lengths.        (line  26)
* address:                               RTL Template.        (line 250)
* address constraints:                   Simple Constraints.  (line 144)
* address of a label:                    Labels as Values.    (line   6)
* ADDRESS_COST:                          Costs.               (line  48)
* address_operand:                       Simple Constraints.  (line 148)
* addressing modes:                      Addressing Modes.    (line   6)
* addressof:                             Regs and Memory.     (line 250)
* ADJUST_COST:                           Costs.               (line 257)
* ADJUST_FIELD_ALIGN:                    Storage Layout.      (line 168)
* ADJUST_INSN_LENGTH:                    Insn Lengths.        (line  40)
* ADJUST_PRIORITY:                       Costs.               (line 265)
* aggregates as return values:           Aggregate Return.    (line   6)
* alias attribute:                       Function Attributes. (line 201)
* aliasing of parameters:                Code Gen Options.    (line 300)
* aligned attribute <1>:                 Variable Attributes. (line  19)
* aligned attribute:                     Type Attributes.     (line  27)
* alignment:                             Alignment.           (line   6)
* ALL_REGS:                              Register Classes.    (line  17)
* Alliant:                               Interoperation.      (line 240)
* alloca:                                C Dialect Options.   (line  78)
* alloca and SunOS:                      Installation.        (line 494)
* alloca vs variable-length arrays:      Variable Length.     (line  25)
* alloca, for SunOS:                     Sun Install.         (line  20)
* alloca, for Unos:                      Configurations.      (line 508)
* allocate_stack instruction pattern:    Standard Names.      (line 659)
* ALLOCATE_TRAMPOLINE:                   Trampolines.         (line  63)
* ALTER_HARD_SUBREG:                     Values in Registers. (line  22)
* alternate keywords:                    Alternate Keywords.  (line   6)
* AMD29K options:                        AMD29K Options.      (line   6)
* analysis, data flow:                   Passes.              (line 196)
* and:                                   Arithmetic.          (line 114)
* and and attributes:                    Expressions.         (line  50)
* and, canonicalization of:              Insn Canonicalizations.
                                                              (line  42)
* andM3 instruction pattern:             Standard Names.      (line 145)
* ANSI support:                          C Dialect Options.   (line   9)
* apostrophes:                           Incompatibilities.   (line 122)
* APPLY_RESULT_SIZE:                     Scalar Return.       (line  88)
* ARC Options:                           ARC Options.         (line   6)
* ARG_POINTER_CFA_OFFSET:                Frame Layout.        (line 119)
* ARG_POINTER_REGNUM:                    Frame Registers.     (line  40)
* ARG_POINTER_REGNUM and virtual registers: Regs and Memory.  (line  65)
* arg_pointer_rtx:                       Frame Registers.     (line  85)
* ARGS_GROW_DOWNWARD:                    Frame Layout.        (line  20)
* argument passing:                      Interface.           (line  37)
* arguments in frame (88k):              M88K Options.        (line  59)
* arguments in registers:                Register Arguments.  (line   6)
* arguments on stack:                    Stack Arguments.     (line   6)
* arithmetic libraries:                  Interface.           (line  72)
* arithmetic shift:                      Arithmetic.          (line 129)
* arithmetic simplifications:            Passes.              (line  46)
* arithmetic, in RTL:                    Arithmetic.          (line   6)
* ARM options:                           ARM Options.         (line   6)
* arrays of length zero:                 Zero Length.         (line   6)
* arrays of variable length:             Variable Length.     (line   6)
* arrays, non-lvalue:                    Subscripting.        (line   6)
* ashift:                                Arithmetic.          (line 129)
* ashift and attributes:                 Expressions.         (line  64)
* ashiftrt:                              Arithmetic.          (line 137)
* ashiftrt and attributes:               Expressions.         (line  64)
* ashlM3 instruction pattern:            Standard Names.      (line 190)
* ashrM3 instruction pattern:            Standard Names.      (line 197)
* asm expressions:                       Extended Asm.        (line   6)
* ASM_APP_OFF:                           File Framework.      (line  58)
* ASM_APP_ON:                            File Framework.      (line  51)
* ASM_BYTE_OP:                           Data Output.         (line  43)
* ASM_CLOSE_PAREN:                       Data Output.         (line 125)
* ASM_COMMENT_START:                     File Framework.      (line  46)
* ASM_DECLARE_FUNCTION_NAME:             Label Output.        (line  15)
* ASM_DECLARE_FUNCTION_SIZE:             Label Output.        (line  26)
* ASM_DECLARE_OBJECT_NAME:               Label Output.        (line  36)
* ASM_FILE_END:                          File Framework.      (line  20)
* ASM_FILE_START:                        File Framework.      (line   8)
* ASM_FINAL_SPEC:                        Driver.              (line 109)
* ASM_FINISH_DECLARE_OBJECT:             Label Output.        (line  47)
* ASM_FORMAT_PRIVATE_NAME:               Label Output.        (line 168)
* asm_fprintf:                           Instruction Output.  (line 129)
* ASM_GENERATE_INTERNAL_LABEL:           Label Output.        (line 152)
* ASM_GLOBALIZE_LABEL:                   Label Output.        (line  57)
* ASM_IDENTIFY_GCC:                      File Framework.      (line  31)
* asm_input:                             Side Effects.        (line 235)
* ASM_NO_SKIP_IN_TEXT:                   Alignment Output.    (line  35)
* asm_noperands:                         Insns.               (line 233)
* ASM_OPEN_PAREN:                        Data Output.         (line 125)
* asm_operands, RTL sharing:             Sharing.             (line  44)
* asm_operands, usage:                   Assembler.           (line   6)
* ASM_OUTPUT_ADDR_DIFF_ELT:              Dispatch Tables.     (line   8)
* ASM_OUTPUT_ADDR_VEC_ELT:               Dispatch Tables.     (line  25)
* ASM_OUTPUT_ALIGN:                      Alignment Output.    (line  42)
* ASM_OUTPUT_ALIGNED_BSS:                Uninitialized Data.  (line  62)
* ASM_OUTPUT_ALIGNED_COMMON:             Uninitialized Data.  (line  22)
* ASM_OUTPUT_ALIGNED_DECL_COMMON:        Uninitialized Data.  (line  29)
* ASM_OUTPUT_ALIGNED_DECL_LOCAL:         Uninitialized Data.  (line  97)
* ASM_OUTPUT_ALIGNED_LOCAL:              Uninitialized Data.  (line  90)
* ASM_OUTPUT_ASCII:                      Data Output.         (line  48)
* ASM_OUTPUT_BSS:                        Uninitialized Data.  (line  42)
* ASM_OUTPUT_BYTE:                       Data Output.         (line  39)
* ASM_OUTPUT_CASE_END:                   Dispatch Tables.     (line  50)
* ASM_OUTPUT_CASE_LABEL:                 Dispatch Tables.     (line  37)
* ASM_OUTPUT_CHAR:                       Data Output.         (line  22)
* ASM_OUTPUT_COMMON:                     Uninitialized Data.  (line   9)
* ASM_OUTPUT_CONSTRUCTOR:                Macros for Initialization.
                                                              (line  40)
* ASM_OUTPUT_DEF:                        Label Output.        (line 186)
* ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL: Label Output.    (line 193)
* ASM_OUTPUT_DESTRUCTOR:                 Macros for Initialization.
                                                              (line  57)
* ASM_OUTPUT_DOUBLE:                     Data Output.         (line   8)
* ASM_OUTPUT_DOUBLE_INT:                 Data Output.         (line  22)
* ASM_OUTPUT_EH_REGION_BEG:              Exception Region Output.
                                                              (line   9)
* ASM_OUTPUT_EH_REGION_END:              Exception Region Output.
                                                              (line  15)
* ASM_OUTPUT_EXTERNAL:                   Label Output.        (line 107)
* ASM_OUTPUT_EXTERNAL_LIBCALL:           Label Output.        (line 117)
* ASM_OUTPUT_FLOAT:                      Data Output.         (line   8)
* ASM_OUTPUT_IDENT:                      File Framework.      (line  88)
* ASM_OUTPUT_INT:                        Data Output.         (line  22)
* ASM_OUTPUT_INTERNAL_LABEL:             Label Output.        (line 134)
* ASM_OUTPUT_LABEL:                      Label Output.        (line   8)
* ASM_OUTPUT_LABELREF:                   Label Output.        (line 127)
* ASM_OUTPUT_LOCAL:                      Uninitialized Data.  (line  77)
* ASM_OUTPUT_LONG_DOUBLE:                Data Output.         (line   8)
* ASM_OUTPUT_MAX_SKIP_ALIGN:             Alignment Output.    (line  47)
* ASM_OUTPUT_MI_THUNK:                   Function Entry.      (line 177)
* ASM_OUTPUT_OPCODE:                     Instruction Output.  (line  20)
* ASM_OUTPUT_POOL_EPILOGUE:              Data Output.         (line 107)
* ASM_OUTPUT_POOL_PROLOGUE:              Data Output.         (line  65)
* ASM_OUTPUT_QUADRUPLE_INT:              Data Output.         (line  22)
* ASM_OUTPUT_REG_POP:                    Instruction Output.  (line 169)
* ASM_OUTPUT_REG_PUSH:                   Instruction Output.  (line 164)
* ASM_OUTPUT_SECTION_NAME:               File Framework.      (line  93)
* ASM_OUTPUT_SHARED_BSS:                 Uninitialized Data.  (line  72)
* ASM_OUTPUT_SHARED_COMMON:              Uninitialized Data.  (line  37)
* ASM_OUTPUT_SHARED_LOCAL:               Uninitialized Data.  (line 105)
* ASM_OUTPUT_SHORT:                      Data Output.         (line  22)
* ASM_OUTPUT_SKIP:                       Alignment Output.    (line  29)
* ASM_OUTPUT_SOURCE_FILENAME:            File Framework.      (line  65)
* ASM_OUTPUT_SOURCE_LINE:                File Framework.      (line  80)
* ASM_OUTPUT_SPECIAL_POOL_ENTRY:         Data Output.         (line  76)
* ASM_OUTPUT_WEAK_ALIAS:                 Label Output.        (line 204)
* ASM_SPEC:                              Driver.              (line 101)
* ASM_STABD_OP:                          DBX Options.         (line  34)
* ASM_STABN_OP:                          DBX Options.         (line  40)
* ASM_STABS_OP:                          DBX Options.         (line  28)
* ASM_WEAKEN_LABEL:                      Label Output.        (line  65)
* assemble_name:                         Label Output.        (line   8)
* assembler format:                      File Framework.      (line   6)
* assembler instructions:                Extended Asm.        (line   6)
* assembler instructions in RTL:         Assembler.           (line   6)
* assembler names for identifiers:       Asm Labels.          (line   6)
* assembler syntax, 88k:                 M88K Options.        (line 101)
* ASSEMBLER_DIALECT:                     Instruction Output.  (line 139)
* assembly code, invalid:                Bug Criteria.        (line  12)
* assigning attribute values to insns:   Tagging Insns.       (line   6)
* asterisk in template:                  Output Statement.    (line  29)
* atof:                                  Cross-compilation.   (line  12)
* attr <1>:                              Tagging Insns.       (line  54)
* attr:                                  Expressions.         (line 154)
* attr_flag:                             Expressions.         (line 119)
* attribute expressions:                 Expressions.         (line   6)
* attribute of types:                    Type Attributes.     (line   6)
* attribute of variables:                Variable Attributes. (line   6)
* attribute specifications:              Attr Example.        (line   6)
* attribute specifications example:      Attr Example.        (line   6)
* attributes, defining:                  Defining Attributes. (line   6)
* autoincrement addressing, availability: Portability.        (line  20)
* autoincrement/decrement addressing:    Simple Constraints.  (line  21)
* autoincrement/decrement analysis:      Passes.              (line 202)
* automatic inline for C++ member fns:   Inline.              (line  42)
* AVOID_CCMODE_COPIES:                   Values in Registers. (line 106)
* backslash:                             Output Template.     (line  47)
* backtrace for bug reports:             Bug Reporting.       (line 161)
* barrier:                               Insns.               (line 129)
* BASE_REG_CLASS:                        Register Classes.    (line 103)
* basic blocks:                          Passes.              (line 196)
* bcmp:                                  Config.              (line 180)
* bCOND instruction pattern:             Standard Names.      (line 417)
* bcopy, implicit usage:                 Library Calls.       (line  92)
* BIGGEST_ALIGNMENT:                     Storage Layout.      (line 152)
* BIGGEST_FIELD_ALIGNMENT:               Storage Layout.      (line 163)
* Bison parser generator:                Installation.        (line  39)
* bit fields:                            Bit Fields.          (line   6)
* bit shift overflow (88k):              M88K Options.        (line 167)
* BITFIELD_NBYTES_LIMITED:               Storage Layout.      (line 302)
* BITS_BIG_ENDIAN:                       Storage Layout.      (line  11)
* BITS_BIG_ENDIAN, effect on sign_extract: Bit Fields.        (line  11)
* BITS_PER_UNIT:                         Storage Layout.      (line  50)
* BITS_PER_WORD:                         Storage Layout.      (line  54)
* bitwise complement:                    Arithmetic.          (line 110)
* bitwise exclusive-or:                  Arithmetic.          (line 124)
* bitwise inclusive-or:                  Arithmetic.          (line 119)
* bitwise logical-and:                   Arithmetic.          (line 114)
* BLKmode:                               Machine Modes.       (line  73)
* BLKmode, and function return values:   Calls.               (line  23)
* BLOCK_PROFILER:                        Profiling.           (line  80)
* BLOCK_PROFILER_CODE:                   Profiling.           (line 157)
* bound pointer to member function:      Bound member functions.
                                                              (line   6)
* BRANCH_COST:                           Costs.               (line 131)
* break_out_memory_refs:                 Addressing Modes.    (line 135)
* BSS_SECTION_ASM_OP:                    Sections.            (line  32)
* bug criteria:                          Bug Criteria.        (line   6)
* bug report mailing lists:              Bug Lists.           (line   6)
* bugs:                                  Bugs.                (line   6)
* bugs, known:                           Trouble.             (line   6)
* builtin functions:                     C Dialect Options.   (line  78)
* builtin_longjmp instruction pattern:   Standard Names.      (line 756)
* BUILTIN_SETJMP_FRAME_VALUE:            Frame Layout.        (line  75)
* builtin_setjmp_receiver instruction pattern: Standard Names.
                                                              (line 746)
* builtin_setjmp_setup instruction pattern: Standard Names.   (line 735)
* byte writes (29k):                     AMD29K Options.      (line  17)
* byte_mode:                             Machine Modes.       (line 198)
* BYTES_BIG_ENDIAN:                      Storage Layout.      (line  23)
* bzero:                                 Config.              (line 180)
* bzero, implicit usage:                 Library Calls.       (line  92)
* C compilation options:                 Invoking GCC.        (line  17)
* C intermediate output, nonexistent:    G++ and GCC.         (line  38)
* C language extensions:                 C Extensions.        (line   6)
* C language, traditional:               C Dialect Options.   (line 115)
* C statements for assembler output:     Output Statement.    (line   6)
* C++:                                   G++ and GCC.         (line  16)
* c++:                                   Invoking G++.        (line  12)
* C++ comments:                          C++ Comments.        (line   6)
* C++ compilation options:               Invoking GCC.        (line  23)
* C++ interface and implementation headers: C++ Interface.    (line   6)
* C++ language extensions:               C++ Extensions.      (line   6)
* C++ member fns, automatically inline:  Inline.              (line  42)
* C++ misunderstandings:                 C++ Misunderstandings.
                                                              (line   6)
* C++ named return value:                Naming Results.      (line   6)
* C++ options, command line:             C++ Dialect Options. (line   6)
* C++ pragmas, effect on inlining:       C++ Interface.       (line  82)
* C++ runtime library:                   Installation.        (line 504)
* C++ signatures:                        C++ Signatures.      (line   6)
* C++ source file suffixes:              Invoking G++.        (line   6)
* C++ static data, declaring and defining: Static Definitions.
                                                              (line   6)
* C++ subtype polymorphism:              C++ Signatures.      (line   6)
* C++ type abstraction:                  C++ Signatures.      (line   6)
* C_INCLUDE_PATH:                        Environment Variables.
                                                              (line  98)
* call:                                  Side Effects.        (line  73)
* call instruction pattern:              Standard Names.      (line 439)
* call usage:                            Calls.               (line  10)
* call-clobbered register:               Register Basics.     (line  46)
* call-saved register:                   Register Basics.     (line  46)
* call-used register:                    Register Basics.     (line  46)
* call_insn:                             Insns.               (line  93)
* call_insn and /u:                      Flags.               (line 132)
* CALL_INSN_FUNCTION_USAGE:              Insns.               (line  99)
* call_pop instruction pattern:          Standard Names.      (line 467)
* CALL_USED_REGISTERS:                   Register Basics.     (line  34)
* call_used_regs:                        Register Basics.     (line  52)
* call_value instruction pattern:        Standard Names.      (line 459)
* call_value_pop instruction pattern:    Standard Names.      (line 467)
* CALLER_SAVE_PROFITABLE:                Caller Saves.        (line  18)
* calling conventions:                   Stack and Calling.   (line   6)
* calling functions in RTL:              Calls.               (line   6)
* calling functions through the function vector on the H8/300 processors: Function Attributes.
                                                              (line 278)
* CAN_DEBUG_WITHOUT_FP:                  Run-time Target.     (line 140)
* CAN_ELIMINATE:                         Elimination.         (line  70)
* canonicalization of instructions:      Insn Canonicalizations.
                                                              (line   6)
* CANONICALIZE_COMPARISON:               Condition Code.      (line 101)
* canonicalize_funcptr_for_compare instruction pattern: Standard Names.
                                                              (line 590)
* case labels in initializers:           Labeled Elements.    (line   6)
* case ranges:                           Case Ranges.         (line   6)
* case sensitivity and VMS:              VMS Misc.            (line  27)
* CASE_DROPS_THROUGH:                    Misc.                (line  48)
* CASE_VALUES_THRESHOLD:                 Misc.                (line  53)
* CASE_VECTOR_MODE:                      Misc.                (line  30)
* CASE_VECTOR_PC_RELATIVE:               Misc.                (line  43)
* CASE_VECTOR_SHORTEN_MODE:              Misc.                (line  34)
* casesi instruction pattern:            Standard Names.      (line 547)
* cast to a union:                       Cast to Union.       (line   6)
* casts as lvalues:                      Lvalues.             (line   6)
* catgets:                               Installation.        (line 268)
* CC:                                    Host Fragment.       (line   9)
* cc0:                                   Regs and Memory.     (line 178)
* cc0, RTL sharing:                      Sharing.             (line  29)
* cc0_rtx:                               Regs and Memory.     (line 204)
* CC1_SPEC:                              Driver.              (line  86)
* CC1PLUS_SPEC:                          Driver.              (line  93)
* cc_status:                             Condition Code.      (line   8)
* CC_STATUS_MDEP:                        Condition Code.      (line  18)
* CC_STATUS_MDEP_INIT:                   Condition Code.      (line  24)
* CCmode:                                Machine Modes.       (line  66)
* CDImode:                               Machine Modes.       (line  92)
* change_address:                        Standard Names.      (line  43)
* CHAR_TYPE_SIZE:                        Type Layout.         (line  44)
* CHECK_FLOAT_VALUE:                     Storage Layout.      (line 350)
* check_stack instruction pattern:       Standard Names.      (line 688)
* CHImode:                               Machine Modes.       (line  92)
* class definitions, register:           Register Classes.    (line   6)
* class preference constraints:          Class Preferences.   (line   6)
* CLASS_LIKELY_SPILLED_P:                Register Classes.    (line 316)
* CLASS_MAX_NREGS:                       Register Classes.    (line 333)
* classes of RTX codes:                  RTL Classes.         (line   6)
* CLEAR_INSN_CACHE:                      Trampolines.         (line 115)
* CLIB:                                  Host Fragment.       (line  12)
* clobber:                               Side Effects.        (line  87)
* clrstrM instruction pattern:           Standard Names.      (line 272)
* cmpM instruction pattern:              Standard Names.      (line 226)
* cmpstrM instruction pattern:           Standard Names.      (line 285)
* code generation conventions:           Code Gen Options.    (line   6)
* code generation RTL sequences:         Expander Definitions.
                                                              (line   6)
* code motion:                           Passes.              (line 170)
* code_label:                            Insns.               (line 111)
* code_label and /i:                     Flags.               (line 137)
* CODE_LABEL_NUMBER:                     Insns.               (line 111)
* codes, RTL expression:                 RTL Objects.         (line  33)
* COImode:                               Machine Modes.       (line  92)
* COLLECT_EXPORT_LIST:                   Config.              (line 173)
* combiner pass:                         Regs and Memory.     (line 144)
* command options:                       Invoking GCC.        (line   6)
* comments, C++ style:                   C++ Comments.        (line   6)
* common subexpression elimination:      Passes.              (line 149)
* COMP_TYPE_ATTRIBUTES:                  Misc.                (line 343)
* compare:                               Arithmetic.          (line  30)
* compare, canonicalization of:          Insn Canonicalizations.
                                                              (line  25)
* comparison of signed and unsigned values, warning: Warning Options.
                                                              (line 382)
* compilation in a separate directory:   Other Dir.           (line   6)
* compiler bugs, reporting:              Bug Reporting.       (line   6)
* compiler compared to C++ preprocessor: G++ and GCC.         (line  38)
* compiler options, C++:                 C++ Dialect Options. (line   6)
* compiler passes and files:             Passes.              (line   6)
* compiler version, specifying:          Target Options.      (line   6)
* COMPILER_PATH:                         Environment Variables.
                                                              (line  81)
* complement, bitwise:                   Arithmetic.          (line 110)
* complex numbers:                       Complex.             (line   6)
* compound expressions as lvalues:       Lvalues.             (line   6)
* computed gotos:                        Labels as Values.    (line   6)
* computing the length of an insn:       Insn Lengths.        (line   6)
* cond:                                  Comparisons.         (line  85)
* cond and attributes:                   Expressions.         (line  37)
* condition code register:               Regs and Memory.     (line 178)
* condition code status:                 Condition Code.      (line   6)
* condition codes:                       Comparisons.         (line  17)
* conditional expressions as lvalues:    Lvalues.             (line   6)
* conditional expressions, extensions:   Conditionals.        (line   6)
* CONDITIONAL_REGISTER_USAGE:            Register Basics.     (line  52)
* conditions, in patterns:               Patterns.            (line  39)
* configuration file:                    Config.              (line   6)
* configurations supported by GNU CC:    Configurations.      (line   6)
* conflicting types:                     Disappointments.     (line  21)
* const applied to function:             Function Attributes. (line   6)
* const function attribute:              Function Attributes. (line  60)
* const0_rtx:                            Constants.           (line  13)
* CONST0_RTX:                            Constants.           (line  58)
* CONST1_RTX:                            Constants.           (line  58)
* const1_rtx:                            Constants.           (line  13)
* const2_rtx:                            Constants.           (line  13)
* CONST2_RTX:                            Constants.           (line  58)
* CONST_CALL_P:                          Flags.               (line 132)
* CONST_COSTS:                           Costs.               (line   9)
* const_double:                          Constants.           (line  29)
* const_double, RTL sharing:             Sharing.             (line  31)
* CONST_DOUBLE_CHAIN:                    Constants.           (line  36)
* CONST_DOUBLE_LOW:                      Constants.           (line  45)
* CONST_DOUBLE_MEM:                      Constants.           (line  36)
* CONST_DOUBLE_OK_FOR_LETTER_P:          Register Classes.    (line 369)
* const_int:                             Constants.           (line   8)
* const_int and attribute tests:         Expressions.         (line  47)
* const_int and attributes:              Expressions.         (line  10)
* const_int, RTL sharing:                Sharing.             (line  23)
* CONST_OK_FOR_LETTER_P:                 Register Classes.    (line 360)
* const_string:                          Constants.           (line  65)
* const_string and attributes:           Expressions.         (line  20)
* const_true_rtx:                        Constants.           (line  23)
* constant attributes:                   Constant Attributes. (line   6)
* constant folding:                      Passes.              (line  46)
* constant folding and floating point:   Cross-compilation.   (line  93)
* constant propagation:                  Passes.              (line 149)
* CONSTANT_ADDRESS_P:                    Addressing Modes.    (line  17)
* CONSTANT_AFTER_FUNCTION_P:             Data Output.         (line 101)
* CONSTANT_ALIGNMENT:                    Storage Layout.      (line 194)
* CONSTANT_P:                            Addressing Modes.    (line  23)
* CONSTANT_POOL_ADDRESS_P:               Flags.               (line 125)
* CONSTANT_POOL_BEFORE_FUNCTION:         Data Output.         (line  57)
* constants in constraints:              Simple Constraints.  (line  57)
* constm1_rtx:                           Constants.           (line  13)
* constraint modifier characters:        Modifiers.           (line   6)
* constraint, matching:                  Simple Constraints.  (line 122)
* constraints:                           Constraints.         (line   6)
* constraints, machine specific:         Machine Constraints. (line   6)
* constructing calls:                    Constructing Calls.  (line   6)
* constructor expressions:               Constructors.        (line   6)
* constructor function attribute:        Function Attributes. (line 176)
* constructors vs goto:                  Destructors and Goto.
                                                              (line  10)
* constructors, automatic calls:         Collect2.            (line  15)
* constructors, output of:               Initialization.      (line   6)
* contributors:                          Contributors.        (line   6)
* controlling register usage:            Register Basics.     (line  68)
* controlling the compilation driver:    Driver.              (line   6)
* conventions, run-time:                 Interface.           (line   6)
* conversions:                           Conversions.         (line   6)
* Convex options:                        Convex Options.      (line   6)
* copy propagation:                      Passes.              (line 158)
* copy_rtx:                              Addressing Modes.    (line 186)
* copy_rtx_if_shared:                    Sharing.             (line  63)
* core dump:                             Bug Criteria.        (line   9)
* cos:                                   C Dialect Options.   (line  78)
* costs of instructions:                 Costs.               (line   6)
* COSTS_N_INSNS:                         Costs.               (line  23)
* CPLUS_INCLUDE_PATH:                    Environment Variables.
                                                              (line  98)
* CPP_PREDEFINES:                        Run-time Target.     (line   8)
* CPP_SPEC:                              Driver.              (line  52)
* CQImode:                               Machine Modes.       (line  92)
* cross compilation and floating point:  Cross-compilation.   (line   6)
* cross compiling:                       Target Options.      (line   6)
* cross-compiler, installation:          Cross-Compiler.      (line   6)
* cross-jumping:                         Passes.              (line 292)
* CROSS_LIBGCC1:                         Target Fragment.     (line  14)
* CRTSTUFF_T_CFLAGS:                     Target Fragment.     (line  26)
* CRTSTUFF_T_CFLAGS_S:                   Target Fragment.     (line  30)
* CSImode:                               Machine Modes.       (line  92)
* CTImode:                               Machine Modes.       (line  92)
* CUMULATIVE_ARGS:                       Register Arguments.  (line 119)
* current_function_epilogue_delay_list:  Function Entry.      (line 167)
* current_function_is_leaf:              Leaf Functions.      (line  51)
* current_function_outgoing_args_size:   Stack Arguments.     (line  35)
* current_function_pops_args:            Function Entry.      (line 142)
* current_function_pretend_args_size:    Function Entry.      (line  53)
* current_function_uses_only_leaf_regs:  Leaf Functions.      (line  51)
* d in constraint:                       Simple Constraints.  (line  51)
* data flow analysis:                    Passes.              (line 196)
* DATA_ALIGNMENT:                        Storage Layout.      (line 180)
* data_section:                          Sections.            (line  58)
* DATA_SECTION_ASM_OP:                   Sections.            (line  22)
* DBR_OUTPUT_SEQEND:                     Instruction Output.  (line 111)
* dbr_sequence_length:                   Instruction Output.  (line 111)
* DBX:                                   Interoperation.      (line  29)
* DBX_BLOCKS_FUNCTION_RELATIVE:          DBX Options.         (line 109)
* DBX_CONTIN_CHAR:                       DBX Options.         (line  62)
* DBX_CONTIN_LENGTH:                     DBX Options.         (line  52)
* DBX_DEBUGGING_INFO:                    DBX Options.         (line   8)
* DBX_FUNCTION_FIRST:                    DBX Options.         (line  97)
* DBX_LBRAC_FIRST:                       DBX Options.         (line 103)
* DBX_MEMPARM_STABS_LETTER:              DBX Options.         (line  93)
* DBX_NO_XREFS:                          DBX Options.         (line  46)
* DBX_OUTPUT_ENUM:                       DBX Hooks.           (line  17)
* DBX_OUTPUT_FUNCTION_END:               DBX Hooks.           (line  23)
* DBX_OUTPUT_LBRAC:                      DBX Hooks.           (line   8)
* DBX_OUTPUT_MAIN_SOURCE_DIRECTORY:      File Names and DBX.  (line  24)
* DBX_OUTPUT_MAIN_SOURCE_FILE_END:       File Names and DBX.  (line  32)
* DBX_OUTPUT_MAIN_SOURCE_FILENAME:       File Names and DBX.  (line  15)
* DBX_OUTPUT_RBRAC:                      DBX Hooks.           (line  14)
* DBX_OUTPUT_SOURCE_FILENAME:            File Names and DBX.  (line  39)
* DBX_OUTPUT_STANDARD_TYPES:             DBX Hooks.           (line  30)
* DBX_REGISTER_NUMBER:                   All Debuggers.       (line   8)
* DBX_REGPARM_STABS_CODE:                DBX Options.         (line  83)
* DBX_REGPARM_STABS_LETTER:              DBX Options.         (line  88)
* DBX_STATIC_CONST_VAR_CODE:             DBX Options.         (line  78)
* DBX_STATIC_STAB_DATA_SECTION:          DBX Options.         (line  69)
* DBX_TYPE_DECL_STABS_CODE:              DBX Options.         (line  74)
* DBX_USE_BINCL:                         DBX Options.         (line 115)
* DBX_WORKING_DIRECTORY:                 File Names and DBX.  (line   8)
* DCmode:                                Machine Modes.       (line  87)
* De Morgan's law:                       Insn Canonicalizations.
                                                              (line  42)
* dead code:                             Passes.              (line 117)
* dead_or_set_p:                         Peephole Definitions.
                                                              (line  75)
* deallocating variable length arrays:   Variable Length.     (line  21)
* debug_rtx:                             Bug Reporting.       (line 179)
* DEBUG_SYMS_TEXT:                       DBX Options.         (line  24)
* DEBUGGER_ARG_OFFSET:                   All Debuggers.       (line  36)
* DEBUGGER_AUTO_OFFSET:                  All Debuggers.       (line  27)
* debugging information generation:      Passes.              (line 329)
* debugging information options:         Debugging Options.   (line   6)
* debugging, 88k OCS:                    M88K Options.        (line  34)
* declaration scope:                     Incompatibilities.   (line  92)
* declarations inside expressions:       Statement Exprs.     (line   6)
* declarations, RTL:                     RTL Declarations.    (line   6)
* declaring attributes of functions:     Function Attributes. (line   6)
* declaring static data in C++:          Static Definitions.  (line   6)
* default implementation, signature member function: C++ Signatures.
                                                              (line  79)
* DEFAULT_CALLER_SAVES:                  Caller Saves.        (line  10)
* DEFAULT_GDB_EXTENSIONS:                DBX Options.         (line  17)
* DEFAULT_MAIN_RETURN:                   Misc.                (line 401)
* DEFAULT_PCC_STRUCT_RETURN:             Aggregate Return.    (line  33)
* DEFAULT_RTX_COSTS:                     Costs.               (line  34)
* DEFAULT_SHORT_ENUMS:                   Type Layout.         (line  84)
* DEFAULT_SIGNED_CHAR:                   Type Layout.         (line  78)
* DEFAULT_VTABLE_THUNKS:                 Storage Layout.      (line 388)
* define_asm_attributes:                 Tagging Insns.       (line  73)
* define_attr:                           Defining Attributes. (line   6)
* define_delay:                          Delay Slots.         (line  25)
* define_expand:                         Expander Definitions.
                                                              (line  11)
* define_function_unit:                  Function Units.      (line  33)
* define_insn:                           Patterns.            (line   6)
* define_insn example:                   Example.             (line   6)
* define_peephole:                       Expander Definitions.
                                                              (line  20)
* define_split:                          Insn Splitting.      (line  32)
* defining attributes and their values:  Defining Attributes. (line   6)
* defining jump instruction patterns:    Jump Patterns.       (line   6)
* defining peephole optimizers:          Peephole Definitions.
                                                              (line   6)
* defining RTL sequences for code generation: Expander Definitions.
                                                              (line   6)
* defining static data in C++:           Static Definitions.  (line   6)
* delay slots, defining:                 Delay Slots.         (line   6)
* DELAY_SLOTS_FOR_EPILOGUE:              Function Entry.      (line 148)
* delayed branch scheduling:             Passes.              (line 299)
* dependencies for make as output:       Environment Variables.
                                                              (line 106)
* dependencies, make:                    Preprocessor Options.
                                                              (line  85)
* DEPENDENCIES_OUTPUT:                   Environment Variables.
                                                              (line 106)
* Dependent Patterns:                    Dependent Patterns.  (line   6)
* destructor function attribute:         Function Attributes. (line 176)
* destructors vs goto:                   Destructors and Goto.
                                                              (line   6)
* destructors, output of:                Initialization.      (line   6)
* detecting -traditional:                C Dialect Options.   (line 181)
* DFmode:                                Machine Modes.       (line  52)
* dialect options:                       C Dialect Options.   (line   6)
* digits in constraint:                  Simple Constraints.  (line 117)
* DImode:                                Machine Modes.       (line  42)
* DIR_SEPARATOR:                         Config.              (line 155)
* directory options:                     Directory Options.   (line   6)
* disabling certain registers:           Register Basics.     (line  68)
* dispatch table:                        Dispatch Tables.     (line   8)
* div:                                   Arithmetic.          (line  81)
* div and attributes:                    Expressions.         (line  64)
* DIVDI3_LIBCALL:                        Library Calls.       (line  44)
* divide instruction, 88k:               M88K Options.        (line 139)
* division:                              Arithmetic.          (line  95)
* divM3 instruction pattern:             Standard Names.      (line 145)
* divmodM4 instruction pattern:          Standard Names.      (line 170)
* DIVSI3_LIBCALL:                        Library Calls.       (line  14)
* DOESNT_NEED_UNWINDER:                  Exception Region Output.
                                                              (line  52)
* dollar signs in identifier names:      Dollar Signs.        (line   6)
* DOLLARS_IN_IDENTIFIERS:                Misc.                (line 382)
* DONE:                                  Expander Definitions.
                                                              (line  74)
* DONT_REDUCE_ADDR:                      Costs.               (line 179)
* double-word arithmetic:                Long Long.           (line   6)
* DOUBLE_TYPE_SIZE:                      Type Layout.         (line  61)
* downward funargs:                      Nested Functions.    (line   6)
* driver:                                Driver.              (line   6)
* DW bit (29k):                          AMD29K Options.      (line   9)
* DWARF2_DEBUGGING_INFO:                 SDB and DWARF.       (line  16)
* DWARF2_FRAME_INFO:                     SDB and DWARF.       (line  26)
* DWARF2_UNWIND_INFO:                    Exception Region Output.
                                                              (line  61)
* DWARF_DEBUGGING_INFO:                  SDB and DWARF.       (line  12)
* DYNAMIC_CHAIN_ADDRESS:                 Frame Layout.        (line  58)
* E in constraint:                       Simple Constraints.  (line  76)
* earlyclobber operand:                  Modifiers.           (line  22)
* EASY_DIV_EXPR:                         Misc.                (line  94)
* EDOM, implicit usage:                  Library Calls.       (line  73)
* eh_epilogue instruction pattern:       Standard Names.      (line 762)
* EH_FRAME_SECTION_ASM_OP:               Exception Region Output.
                                                              (line  29)
* EH_TABLE_LOOKUP:                       Exception Region Output.
                                                              (line  45)
* eight bit data on the H8/300 and H8/300H: Function Attributes.
                                                              (line 295)
* ELIGIBLE_FOR_EPILOGUE_DELAY:           Function Entry.      (line 154)
* ELIMINABLE_REGS:                       Elimination.         (line  43)
* empty constraints:                     No Constraints.      (line  13)
* EMPTY_FIELD_BOUNDARY:                  Storage Layout.      (line 219)
* ENCODE_SECTION_INFO:                   Sections.            (line 104)
* ENCODE_SECTION_INFO and address validation: Addressing Modes.
                                                              (line  78)
* ENCODE_SECTION_INFO usage:             Instruction Output.  (line 105)
* ENDFILE_SPEC:                          Driver.              (line 150)
* endianness:                            Portability.         (line  20)
* enum machine_mode:                     Machine Modes.       (line   6)
* enum reg_class:                        Register Classes.    (line  64)
* environment variables:                 Environment Variables.
                                                              (line   6)
* epilogue:                              Function Entry.      (line   6)
* epilogue instruction pattern:          Standard Names.      (line 795)
* EPILOGUE_USES:                         Function Entry.      (line  98)
* eq:                                    Comparisons.         (line  49)
* eq and attributes:                     Expressions.         (line  64)
* eq_attr:                               Expressions.         (line  85)
* equal:                                 Comparisons.         (line  49)
* errno, implicit usage:                 Library Calls.       (line  86)
* error messages:                        Warnings and Errors. (line   6)
* escape sequences, traditional:         C Dialect Options.   (line 148)
* exception_receiver instruction pattern: Standard Names.     (line 726)
* EXCEPTION_SECTION:                     Exception Region Output.
                                                              (line  21)
* exclamation point:                     Multi-Alternative.   (line  47)
* exclusive-or, bitwise:                 Arithmetic.          (line 124)
* EXECUTABLE_SUFFIX:                     Config.              (line 168)
* exit:                                  C Dialect Options.   (line  78)
* exit status and VMS:                   VMS Misc.            (line   6)
* EXIT_BODY:                             Misc.                (line 417)
* EXIT_IGNORE_STACK:                     Function Entry.      (line  87)
* EXPAND_BUILTIN_SAVEREGS:               Varargs.             (line  91)
* expander definitions:                  Expander Definitions.
                                                              (line   6)
* explicit register variables:           Explicit Reg Vars.   (line   6)
* expr_list:                             Insns.               (line 497)
* expression codes:                      RTL Objects.         (line  33)
* expressions containing statements:     Statement Exprs.     (line   6)
* expressions, compound, as lvalues:     Lvalues.             (line   6)
* expressions, conditional, as lvalues:  Lvalues.             (line   6)
* expressions, constructor:              Constructors.        (line   6)
* extended asm:                          Extended Asm.        (line   6)
* extendMN2 instruction pattern:         Standard Names.      (line 338)
* extensible constraints:                Simple Constraints.  (line 153)
* extensions, ?: <1>:                    Lvalues.             (line   6)
* extensions, ?::                        Conditionals.        (line   6)
* extensions, C language:                C Extensions.        (line   6)
* extensions, C++ language:              C++ Extensions.      (line   6)
* extern int target_flags:               Run-time Target.     (line  27)
* external declaration scope:            Incompatibilities.   (line  92)
* EXTRA_CC_MODES:                        Condition Code.      (line  67)
* EXTRA_CC_NAMES:                        Condition Code.      (line  76)
* EXTRA_CONSTRAINT:                      Register Classes.    (line 384)
* EXTRA_SECTION_FUNCTIONS:               Sections.            (line  58)
* EXTRA_SECTIONS:                        Sections.            (line  53)
* EXTRA_SPECS:                           Driver.              (line 157)
* extv instruction pattern:              Standard Names.      (line 347)
* extzv instruction pattern:             Standard Names.      (line 361)
* F in constraint:                       Simple Constraints.  (line  81)
* fabs:                                  C Dialect Options.   (line  78)
* FAIL:                                  Expander Definitions.
                                                              (line  80)
* fatal signal:                          Bug Criteria.        (line   9)
* FATAL_EXIT_CODE:                       Config.              (line  20)
* features, optional, in system conventions: Run-time Target. (line  30)
* ffs <1>:                               Arithmetic.          (line 154)
* ffs:                                   C Dialect Options.   (line  78)
* ffsM2 instruction pattern:             Standard Names.      (line 213)
* file name suffix:                      Overall Options.     (line  12)
* file names:                            Link Options.        (line  10)
* files and passes of the compiler:      Passes.              (line   6)
* final pass:                            Passes.              (line 317)
* FINAL_PRESCAN_INSN:                    Instruction Output.  (line  45)
* FINAL_PRESCAN_LABEL:                   Instruction Output.  (line  67)
* FINAL_REG_PARM_STACK_SPACE:            Stack Arguments.     (line  59)
* final_scan_insn:                       Function Entry.      (line 167)
* final_sequence:                        Instruction Output.  (line 122)
* FINALIZE_PIC:                          PIC.                 (line  29)
* FIRST_INSN_ADDRESS:                    Insn Lengths.        (line  35)
* FIRST_PARM_OFFSET:                     Frame Layout.        (line  42)
* FIRST_PARM_OFFSET and virtual registers: Regs and Memory.   (line  65)
* FIRST_PSEUDO_REGISTER:                 Register Basics.     (line   8)
* FIRST_STACK_REG:                       Stack Registers.     (line  17)
* FIRST_VIRTUAL_REGISTER:                Regs and Memory.     (line  51)
* fix:                                   Conversions.         (line  68)
* fix_truncMN2 instruction pattern:      Standard Names.      (line 325)
* fixed register:                        Register Basics.     (line  15)
* FIXED_REGISTERS:                       Register Basics.     (line  15)
* fixed_regs:                            Register Basics.     (line  52)
* fixMN2 instruction pattern:            Standard Names.      (line 308)
* FIXUNS_TRUNC_LIKE_FIX_TRUNC:           Misc.                (line  89)
* fixuns_truncMN2 instruction pattern:   Standard Names.      (line 329)
* fixunsMN2 instruction pattern:         Standard Names.      (line 314)
* flags in RTL expression:               Flags.               (line   6)
* float:                                 Conversions.         (line  49)
* float as function value type:          Incompatibilities.   (line 146)
* FLOAT_ARG_TYPE:                        Library Calls.       (line 105)
* float_extend:                          Conversions.         (line  34)
* FLOAT_STORE_FLAG_VALUE:                Misc.                (line 238)
* float_truncate:                        Conversions.         (line  44)
* FLOAT_TYPE_SIZE:                       Type Layout.         (line  57)
* FLOAT_VALUE_TYPE:                      Library Calls.       (line 126)
* FLOAT_WORDS_BIG_ENDIAN:                Storage Layout.      (line  41)
* FLOAT_WORDS_BIG_ENDIAN, (lack of) effect on subreg: Regs and Memory.
                                                              (line 136)
* FLOATIFY:                              Library Calls.       (line 120)
* floating point and cross compilation:  Cross-compilation.   (line   6)
* floating point precision <1>:          Disappointments.     (line  70)
* floating point precision:              Optimize Options.    (line  74)
* floatMN2 instruction pattern:          Standard Names.      (line 300)
* floatunsMN2 instruction pattern:       Standard Names.      (line 304)
* force_reg:                             Standard Names.      (line  31)
* format function attribute:             Function Attributes. (line  93)
* format_arg function attribute:         Function Attributes. (line 130)
* forwarding calls:                      Constructing Calls.  (line   6)
* frame layout:                          Frame Layout.        (line   6)
* FRAME_GROWS_DOWNWARD:                  Frame Layout.        (line  16)
* FRAME_GROWS_DOWNWARD and virtual registers: Regs and Memory.
                                                              (line  69)
* frame_pointer_needed:                  Function Entry.      (line  33)
* FRAME_POINTER_REGNUM:                  Frame Registers.     (line  13)
* FRAME_POINTER_REGNUM and virtual registers: Regs and Memory.
                                                              (line  74)
* FRAME_POINTER_REQUIRED:                Elimination.         (line   8)
* frame_pointer_rtx:                     Frame Registers.     (line  85)
* frame_related, inmem:                  Flags.               (line  22)
* fscanf, and constant strings:          Incompatibilities.   (line  19)
* ftruncM2 instruction pattern:          Standard Names.      (line 320)
* function addressability on the M32R/D: Function Attributes. (line 318)
* function attributes:                   Function Attributes. (line   6)
* function call conventions:             Interface.           (line   6)
* function entry and exit:               Function Entry.      (line   6)
* function pointers, arithmetic:         Pointer Arith.       (line   6)
* function prototype declarations:       Function Prototypes. (line   6)
* function units, for scheduling:        Function Units.      (line   6)
* function, size of pointer to:          Pointer Arith.       (line   6)
* function-call insns:                   Calls.               (line   6)
* FUNCTION_ARG:                          Register Arguments.  (line  10)
* FUNCTION_ARG_ADVANCE:                  Register Arguments.  (line 161)
* FUNCTION_ARG_BOUNDARY:                 Register Arguments.  (line 189)
* FUNCTION_ARG_CALLEE_COPIES:            Register Arguments.  (line 108)
* FUNCTION_ARG_PADDING:                  Register Arguments.  (line 172)
* FUNCTION_ARG_PARTIAL_NREGS:            Register Arguments.  (line  76)
* FUNCTION_ARG_PASS_BY_REFERENCE:        Register Arguments.  (line  95)
* FUNCTION_ARG_REGNO_P:                  Register Arguments.  (line 194)
* FUNCTION_BLOCK_PROFILER:               Profiling.           (line  28)
* FUNCTION_BLOCK_PROFILER_EXIT:          Profiling.           (line 124)
* FUNCTION_BOUNDARY:                     Storage Layout.      (line 149)
* FUNCTION_CONVERSION_BUG:               Config.              (line  98)
* FUNCTION_EPILOGUE:                     Function Entry.      (line 104)
* FUNCTION_EPILOGUE and trampolines:     Trampolines.         (line  68)
* FUNCTION_INCOMING_ARG:                 Register Arguments.  (line  62)
* FUNCTION_MODE:                         Misc.                (line 257)
* FUNCTION_OUTGOING_VALUE:               Scalar Return.       (line  39)
* FUNCTION_PROFILER:                     Profiling.           (line   8)
* FUNCTION_PROLOGUE:                     Function Entry.      (line   9)
* FUNCTION_PROLOGUE and trampolines:     Trampolines.         (line  68)
* FUNCTION_VALUE:                        Scalar Return.       (line  13)
* FUNCTION_VALUE_REGNO_P:                Scalar Return.       (line  73)
* functions called via pointer on the RS/6000 and PowerPC: Function Attributes.
                                                              (line 249)
* functions in arbitrary sections:       Function Attributes. (line   6)
* functions that are passed arguments in registers on the 386: Function Attributes.
                                                              (line   6)
* functions that do not pop the argument stack on the 386: Function Attributes.
                                                              (line   6)
* functions that do pop the argument stack on the 386: Function Attributes.
                                                              (line 240)
* functions that have no side effects:   Function Attributes. (line   6)
* functions that never return:           Function Attributes. (line   6)
* functions that pop the argument stack on the 386: Function Attributes.
                                                              (line 232)
* functions which are exported from a dll on PowerPC Windows NT: Function Attributes.
                                                              (line 262)
* functions which are imported from a dll on PowerPC Windows NT: Function Attributes.
                                                              (line 255)
* functions which specify exception handling on PowerPC Windows NT: Function Attributes.
                                                              (line 268)
* functions with printf, scanf or strftime style arguments: Function Attributes.
                                                              (line   6)
* functions, leaf:                       Leaf Functions.      (line   6)
* g in constraint:                       Simple Constraints.  (line 107)
* G in constraint:                       Simple Constraints.  (line  85)
* G++:                                   G++ and GCC.         (line  16)
* g++:                                   Invoking G++.        (line  12)
* GCC:                                   G++ and GCC.         (line  11)
* GCC and portability:                   Portability.         (line   6)
* GCC command options:                   Invoking GCC.        (line   6)
* GCC_EXEC_PREFIX:                       Environment Variables.
                                                              (line  52)
* ge:                                    Comparisons.         (line  67)
* ge and attributes:                     Expressions.         (line  64)
* GEN_ERRNO_RTX:                         Library Calls.       (line  86)
* gencodes:                              Passes.              (line  93)
* genconfig:                             Passes.              (line 348)
* general_operand:                       RTL Template.        (line  57)
* GENERAL_REGS:                          Register Classes.    (line  23)
* generalized lvalues:                   Lvalues.             (line   6)
* generating assembler output:           Output Statement.    (line   6)
* generating insns:                      RTL Template.        (line   6)
* genflags:                              Passes.              (line  93)
* genflags, crash on Sun 4:              Installation Problems.
                                                              (line 107)
* get_attr:                              Expressions.         (line  80)
* get_attr_length:                       Insn Lengths.        (line  51)
* GET_CLASS_NARROWEST_MODE:              Machine Modes.       (line 195)
* GET_CODE:                              RTL Objects.         (line  33)
* get_frame_size:                        Elimination.         (line  31)
* get_insns:                             Insns.               (line  34)
* get_last_insn:                         Insns.               (line  34)
* GET_MODE:                              Machine Modes.       (line 150)
* GET_MODE_ALIGNMENT:                    Machine Modes.       (line 182)
* GET_MODE_BITSIZE:                      Machine Modes.       (line 174)
* GET_MODE_CLASS:                        Machine Modes.       (line 164)
* GET_MODE_MASK:                         Machine Modes.       (line 177)
* GET_MODE_NAME:                         Machine Modes.       (line 161)
* GET_MODE_NUNITS:                       Machine Modes.       (line 191)
* GET_MODE_SIZE:                         Machine Modes.       (line 171)
* GET_MODE_UNIT_SIZE:                    Machine Modes.       (line 185)
* GET_MODE_WIDER_MODE:                   Machine Modes.       (line 167)
* GET_RTX_CLASS:                         RTL Classes.         (line   6)
* GET_RTX_FORMAT:                        RTL Classes.         (line 100)
* GET_RTX_LENGTH:                        RTL Classes.         (line  97)
* gettext:                               Installation.        (line 260)
* geu:                                   Comparisons.         (line  67)
* geu and attributes:                    Expressions.         (line  64)
* global common subexpression elimination: Passes.            (line 158)
* global offset table:                   Code Gen Options.    (line 118)
* global register after longjmp:         Global Reg Vars.     (line  66)
* global register allocation:            Passes.              (line 261)
* global register variables:             Global Reg Vars.     (line   6)
* GLOBALDEF:                             Global Declarations. (line   6)
* GLOBALREF:                             Global Declarations. (line   6)
* GLOBALVALUEDEF:                        Global Declarations. (line   6)
* GLOBALVALUEREF:                        Global Declarations. (line   6)
* GO_IF_LEGITIMATE_ADDRESS:              Addressing Modes.    (line  34)
* GO_IF_MODE_DEPENDENT_ADDRESS:          Addressing Modes.    (line 193)
* goto in C++:                           Destructors and Goto.
                                                              (line   6)
* goto with computed label:              Labels as Values.    (line   6)
* gp-relative references (MIPS):         MIPS Options.        (line 227)
* gprof:                                 Debugging Options.   (line 116)
* greater than:                          Comparisons.         (line  59)
* grouping options:                      Invoking GCC.        (line  26)
* gt:                                    Comparisons.         (line  55)
* gt and attributes:                     Expressions.         (line  64)
* gtu:                                   Comparisons.         (line  59)
* gtu and attributes:                    Expressions.         (line  64)
* H in constraint:                       Simple Constraints.  (line  85)
* Haifa scheduler:                       Installation.        (line 190)
* HANDLE_PRAGMA:                         Misc.                (line 281)
* HANDLE_PRAGMA_PACK_PUSH_POP:           Misc.                (line 322)
* HANDLE_SYSV_PRAGMA:                    Misc.                (line 308)
* hard registers:                        Regs and Memory.     (line   9)
* HARD_FRAME_POINTER_REGNUM:             Frame Registers.     (line  19)
* HARD_REGNO_CALL_PART_CLOBBERED:        Register Basics.     (line  45)
* HARD_REGNO_CALLER_SAVE_MODE:           Caller Saves.        (line  27)
* HARD_REGNO_MODE_OK:                    Values in Registers. (line  30)
* HARD_REGNO_NREGS:                      Values in Registers. (line  10)
* hardware models and configurations, specifying: Submodel Options.
                                                              (line   6)
* HAS_INIT_SECTION:                      Macros for Initialization.
                                                              (line  18)
* HAVE_ATEXIT:                           Misc.                (line 411)
* HAVE_POST_DECREMENT:                   Addressing Modes.    (line  12)
* HAVE_POST_INCREMENT:                   Addressing Modes.    (line   8)
* HAVE_PRE_DECREMENT:                    Addressing Modes.    (line  12)
* HAVE_PRE_INCREMENT:                    Addressing Modes.    (line  12)
* header files and VMS:                  Include Files and VMS.
                                                              (line   6)
* hex floats:                            Hex Floats.          (line   6)
* high:                                  Constants.           (line  99)
* HImode:                                Machine Modes.       (line  26)
* HImode, in insn:                       Insns.               (line 198)
* host makefile fragment:                Host Fragment.       (line   6)
* HOST_BITS_PER_CHAR:                    Config.              (line  47)
* HOST_BITS_PER_INT:                     Config.              (line  55)
* HOST_BITS_PER_LONG:                    Config.              (line  58)
* HOST_BITS_PER_SHORT:                   Config.              (line  51)
* HOST_FLOAT_FORMAT:                     Config.              (line  42)
* HOST_FLOAT_WORDS_BIG_ENDIAN:           Config.              (line  33)
* HOST_WORDS_BIG_ENDIAN:                 Config.              (line  28)
* hosted environment:                    C Dialect Options.   (line 105)
* HPPA Options:                          HPPA Options.        (line   6)
* i in constraint:                       Simple Constraints.  (line  57)
* I in constraint:                       Simple Constraints.  (line  68)
* i386 Options:                          i386 Options.        (line   6)
* IBM RS/6000 and PowerPC Options:       RS/6000 and PowerPC Options.
                                                              (line   6)
* IBM RT options:                        RT Options.          (line   6)
* IBM RT PC:                             Interoperation.      (line 244)
* identifier names, dollar signs in:     Dollar Signs.        (line   6)
* identifiers, names in assembler code:  Asm Labels.          (line   6)
* identifying source, compiler (88k):    M88K Options.        (line  23)
* IEEE_FLOAT_FORMAT:                     Storage Layout.      (line 368)
* if_then_else:                          Comparisons.         (line  75)
* if_then_else and attributes:           Expressions.         (line  32)
* if_then_else usage:                    Side Effects.        (line  43)
* immediate_operand:                     RTL Template.        (line  72)
* IMMEDIATE_PREFIX:                      Instruction Output.  (line 129)
* implicit argument: return value:       Naming Results.      (line  30)
* IMPLICIT_FIX_EXPR:                     Misc.                (line  84)
* implied #pragma implementation:        C++ Interface.       (line  59)
* in_data:                               Sections.            (line  53)
* in_struct:                             Flags.               (line 181)
* in_struct, in code_label:              Flags.               (line 137)
* in_struct, in insn:                    Flags.               (line 115)
* in_struct, in label_ref:               Flags.               (line 100)
* in_struct, in mem:                     Flags.               (line  14)
* in_struct, in reg:                     Flags.               (line  38)
* in_struct, in subreg:                  Flags.               (line  57)
* in_text:                               Sections.            (line  53)
* include files and VMS:                 Include Files and VMS.
                                                              (line   6)
* INCLUDE_DEFAULTS:                      Driver.              (line 306)
* inclusive-or, bitwise:                 Arithmetic.          (line 119)
* INCOMING_FRAME_SP_OFFSET:              Frame Layout.        (line 108)
* INCOMING_REGNO:                        Register Basics.     (line  88)
* INCOMING_RETURN_ADDR_RTX:              Frame Layout.        (line  98)
* incompatibilities of GCC:              Incompatibilities.   (line   6)
* increment operators:                   Bug Criteria.        (line  17)
* INDEX_REG_CLASS:                       Register Classes.    (line 108)
* indirect_jump instruction pattern:     Standard Names.      (line 543)
* INIT_CUMULATIVE_ARGS:                  Register Arguments.  (line 132)
* INIT_CUMULATIVE_INCOMING_ARGS:         Register Arguments.  (line 151)
* INIT_ENVIRONMENT:                      Driver.              (line 268)
* INIT_SECTION_ASM_OP <1>:               Sections.            (line  47)
* INIT_SECTION_ASM_OP:                   Macros for Initialization.
                                                              (line   9)
* INIT_TARGET_OPTABS:                    Library Calls.       (line  68)
* INITIAL_ELIMINATION_OFFSET:            Elimination.         (line  78)
* INITIAL_FRAME_POINTER_OFFSET:          Elimination.         (line  31)
* initialization routines:               Initialization.      (line   6)
* initializations in expressions:        Constructors.        (line   6)
* INITIALIZE_TRAMPOLINE:                 Trampolines.         (line  56)
* initializers with labeled elements:    Labeled Elements.    (line   6)
* initializers, non-constant:            Initializers.        (line   6)
* inline automatic for C++ member fns:   Inline.              (line  42)
* inline functions:                      Inline.              (line   6)
* inline functions, omission of:         Inline.              (line  47)
* inline, automatic:                     Passes.              (line 102)
* inlining and C++ pragmas:              C++ Interface.       (line  82)
* INSERT_ATTRIBUTES:                     Misc.                (line 367)
* insn:                                  Insns.               (line  64)
* insn and /i:                           Flags.               (line 142)
* insn and /s:                           Flags.               (line 115)
* insn and /u:                           Flags.               (line 109)
* insn attributes:                       Insn Attributes.     (line   6)
* insn canonicalization:                 Insn Canonicalizations.
                                                              (line   6)
* insn lengths, computing:               Insn Lengths.        (line   6)
* insn splitting:                        Insn Splitting.      (line   6)
* insn-attr.h:                           Defining Attributes. (line  24)
* INSN_ANNULLED_BRANCH_P:                Flags.               (line 109)
* INSN_CACHE_DEPTH:                      Trampolines.         (line 107)
* INSN_CACHE_LINE_WIDTH:                 Trampolines.         (line 100)
* INSN_CACHE_SIZE:                       Trampolines.         (line  97)
* INSN_CLOBBERS_REGNO_P:                 Obsolete Register Macros.
                                                              (line  25)
* INSN_CODE:                             Insns.               (line 224)
* INSN_DELETED_P:                        Flags.               (line 105)
* INSN_FROM_TARGET_P:                    Flags.               (line 115)
* insn_list:                             Insns.               (line 497)
* INSN_REFERENCES_ARE_DELAYED:           Misc.                (line 433)
* INSN_SETS_ARE_DELAYED:                 Misc.                (line 422)
* INSN_UID:                              Insns.               (line  23)
* insns:                                 Insns.               (line   6)
* insns, generating:                     RTL Template.        (line   6)
* insns, recognizing:                    RTL Template.        (line   6)
* INSTALL:                               Host Fragment.       (line  23)
* installation trouble:                  Trouble.             (line   6)
* installing GNU CC:                     Installation.        (line   6)
* installing GNU CC on the Sun:          Sun Install.         (line   6)
* installing GNU CC on VMS:              VMS Install.         (line   6)
* instruction attributes:                Insn Attributes.     (line   6)
* instruction combination:               Passes.              (line 211)
* instruction patterns:                  Patterns.            (line   6)
* instruction recognizer:                Passes.              (line 353)
* instruction scheduling:                Passes.              (line 285)
* instruction splitting:                 Insn Splitting.      (line   6)
* insv instruction pattern:              Standard Names.      (line 364)
* INT_TYPE_SIZE:                         Type Layout.         (line  11)
* INTEGRATE_THRESHOLD:                   Misc.                (line 262)
* integrated:                            Flags.               (line 229)
* integrated, in insn:                   Flags.               (line  81)
* integrated, in reg:                    Flags.               (line  48)
* integrating function code:             Inline.              (line   6)
* Intel 386 Options:                     i386 Options.        (line   6)
* Interdependence of Patterns:           Dependent Patterns.  (line   6)
* interface and implementation headers, C++: C++ Interface.   (line   6)
* interfacing to GCC output:             Interface.           (line   6)
* intermediate C version, nonexistent:   G++ and GCC.         (line  38)
* Internal Compiler Checking:            Installation.        (line 209)
* interrupt handler functions on the H8/300 processors: Function Attributes.
                                                              (line 289)
* interrupt handlers on the M32R/D:      Function Attributes. (line 312)
* INTIFY:                                Library Calls.       (line 135)
* introduction:                          Top.                 (line   6)
* invalid assembly code:                 Bug Criteria.        (line  12)
* invalid input:                         Bug Criteria.        (line  47)
* INVOKE__main:                          Macros for Initialization.
                                                              (line  33)
* invoking g++:                          Invoking G++.        (line  20)
* ior:                                   Arithmetic.          (line 119)
* ior and attributes:                    Expressions.         (line  50)
* ior, canonicalization of:              Insn Canonicalizations.
                                                              (line  42)
* iorM3 instruction pattern:             Standard Names.      (line 145)
* IS_ASM_LOGICAL_LINE_SEPARATOR:         Data Output.         (line 118)
* isinf:                                 Cross-compilation.   (line  83)
* isnan:                                 Cross-compilation.   (line  88)
* ISSUE_RATE:                            Misc.                (line 459)
* jump instruction patterns:             Jump Patterns.       (line   6)
* jump instructions and set:             Side Effects.        (line  43)
* jump optimization:                     Passes.              (line 117)
* jump threading:                        Passes.              (line 143)
* jump_insn:                             Insns.               (line  74)
* JUMP_LABEL:                            Insns.               (line  80)
* JUMP_TABLES_IN_TEXT_SECTION:           Sections.            (line  95)
* kernel and user registers (29k):       AMD29K Options.      (line  48)
* keywords, alternate:                   Alternate Keywords.  (line   6)
* known causes of trouble:               Trouble.             (line   6)
* LABEL_ALIGN:                           Alignment Output.    (line  24)
* LABEL_ALIGN_AFTER_BARRIER:             Alignment Output.    (line   8)
* LABEL_NUSES:                           Insns.               (line 125)
* LABEL_OUTSIDE_LOOP_P:                  Flags.               (line 100)
* LABEL_PRESERVE_P:                      Flags.               (line 137)
* label_ref:                             Constants.           (line  80)
* label_ref and /s:                      Flags.               (line 100)
* label_ref, RTL sharing:                Sharing.             (line  34)
* labeled elements in initializers:      Labeled Elements.    (line   6)
* labels as values:                      Labels as Values.    (line   6)
* labs:                                  C Dialect Options.   (line  78)
* LANG:                                  Environment Variables.
                                                              (line  21)
* language dialect options:              C Dialect Options.   (line   6)
* large bit shifts (88k):                M88K Options.        (line 167)
* large return values:                   Aggregate Return.    (line   6)
* LAST_STACK_REG:                        Stack Registers.     (line  21)
* LAST_VIRTUAL_REGISTER:                 Regs and Memory.     (line  51)
* LC_ALL:                                Environment Variables.
                                                              (line  21)
* LC_CTYPE:                              Environment Variables.
                                                              (line  21)
* LC_MESSAGES:                           Environment Variables.
                                                              (line  21)
* LD_FINI_SWITCH:                        Macros for Initialization.
                                                              (line  29)
* LD_INIT_SWITCH:                        Macros for Initialization.
                                                              (line  25)
* LDD_SUFFIX:                            Macros for Initialization.
                                                              (line  97)
* ldexp:                                 Cross-compilation.   (line  45)
* le:                                    Comparisons.         (line  71)
* le and attributes:                     Expressions.         (line  64)
* leaf functions:                        Leaf Functions.      (line   6)
* leaf_function_p:                       Standard Names.      (line 505)
* LEAF_REG_REMAP:                        Leaf Functions.      (line  38)
* LEAF_REGISTERS:                        Leaf Functions.      (line  24)
* left rotate:                           Arithmetic.          (line 142)
* left shift:                            Arithmetic.          (line 129)
* LEGITIMATE_CONSTANT_P:                 Addressing Modes.    (line 208)
* LEGITIMATE_PIC_OPERAND_P:              PIC.                 (line  45)
* LEGITIMIZE_ADDRESS:                    Addressing Modes.    (line 126)
* LEGITIMIZE_RELOAD_ADDRESS:             Addressing Modes.    (line 148)
* length-zero arrays:                    Zero Length.         (line   6)
* less than:                             Comparisons.         (line  63)
* less than or equal:                    Comparisons.         (line  71)
* leu:                                   Comparisons.         (line  71)
* leu and attributes:                    Expressions.         (line  64)
* LIB2FUNCS_EXTRA:                       Target Fragment.     (line  22)
* LIB_SPEC:                              Driver.              (line 124)
* LIBCALL_VALUE:                         Scalar Return.       (line  56)
* libgcc.a:                              Library Calls.       (line   6)
* LIBGCC1:                               Target Fragment.     (line   9)
* LIBGCC2_CFLAGS:                        Target Fragment.     (line  19)
* LIBGCC2_WORDS_BIG_ENDIAN:              Storage Layout.      (line  35)
* LIBGCC_NEEDS_DOUBLE:                   Library Calls.       (line  97)
* LIBGCC_SPEC:                           Driver.              (line 132)
* Libraries:                             Link Options.        (line  24)
* library subroutine names:              Library Calls.       (line   6)
* LIBRARY_PATH:                          Environment Variables.
                                                              (line  87)
* libstdc++:                             Installation.        (line 504)
* LIMIT_RELOAD_CLASS:                    Register Classes.    (line 176)
* link options:                          Link Options.        (line   6)
* LINK_COMMAND_SPEC:                     Driver.              (line 216)
* LINK_LIBGCC_SPECIAL:                   Driver.              (line 202)
* LINK_LIBGCC_SPECIAL_1:                 Driver.              (line 209)
* LINK_SPEC:                             Driver.              (line 117)
* LINKER_DOES_NOT_WORK_WITH_DWARF2:      SDB and DWARF.       (line  32)
* lo_sum:                                Arithmetic.          (line  18)
* load address instruction:              Simple Constraints.  (line 144)
* LOAD_ARGS_REVERSED:                    Register Arguments.  (line 202)
* LOAD_EXTEND_OP:                        Misc.                (line  66)
* load_multiple instruction pattern:     Standard Names.      (line 110)
* local labels:                          Local Labels.        (line   6)
* local register allocation:             Passes.              (line 252)
* local variables in macros:             Naming Types.        (line  21)
* local variables, specifying registers: Local Reg Vars.      (line   6)
* LOCAL_ALIGNMENT:                       Storage Layout.      (line 207)
* LOCAL_INCLUDE_DIR:                     Driver.              (line 275)
* LOCAL_LABEL_PREFIX:                    Instruction Output.  (line 129)
* locale:                                Environment Variables.
                                                              (line  21)
* locale definition:                     Environment Variables.
                                                              (line 119)
* LOG_LINKS:                             Insns.               (line 243)
* logical-and, bitwise:                  Arithmetic.          (line 114)
* long long data types:                  Long Long.           (line   6)
* LONG_DOUBLE_TYPE_SIZE:                 Type Layout.         (line  66)
* LONG_LONG_TYPE_SIZE:                   Type Layout.         (line  38)
* LONG_TYPE_SIZE:                        Type Layout.         (line  27)
* longjmp:                               Global Reg Vars.     (line  66)
* longjmp and automatic variables <1>:   C Dialect Options.   (line 144)
* longjmp and automatic variables:       Interface.           (line  53)
* longjmp incompatibilities:             Incompatibilities.   (line  47)
* longjmp warnings:                      Warning Options.     (line 245)
* LONGJMP_RESTORE_FROM_STACK:            Elimination.         (line  84)
* loop optimization:                     Passes.              (line 170)
* LOOP_ALIGN:                            Alignment Output.    (line  16)
* lshiftrt:                              Arithmetic.          (line 137)
* lshiftrt and attributes:               Expressions.         (line  64)
* lshrM3 instruction pattern:            Standard Names.      (line 197)
* lt:                                    Comparisons.         (line  63)
* lt and attributes:                     Expressions.         (line  64)
* ltu:                                   Comparisons.         (line  63)
* lvalues, generalized:                  Lvalues.             (line   6)
* m in constraint:                       Simple Constraints.  (line  10)
* M32R/D options:                        M32R/D Options.      (line   6)
* M680x0 options:                        M680x0 Options.      (line   6)
* M88k options:                          M88K Options.        (line   6)
* machine dependent options:             Submodel Options.    (line   6)
* machine description macros:            Target Macros.       (line   6)
* machine descriptions:                  Machine Desc.        (line   6)
* machine mode conversions:              Conversions.         (line   6)
* machine modes:                         Machine Modes.       (line   6)
* machine specific constraints:          Machine Constraints. (line   6)
* MACHINE_DEPENDENT_REORG:               Misc.                (line 446)
* MACHINE_STATE_RESTORE:                 Profiling.           (line 147)
* MACHINE_STATE_SAVE:                    Profiling.           (line 134)
* macro with variable arguments:         Macro Varargs.       (line   6)
* macros containing asm:                 Extended Asm.        (line 163)
* macros, inline alternative:            Inline.              (line   6)
* macros, local labels:                  Local Labels.        (line   6)
* macros, local variables in:            Naming Types.        (line  21)
* macros, statements in expressions:     Statement Exprs.     (line   6)
* macros, target description:            Target Macros.       (line   6)
* macros, types of arguments:            Typeof.              (line   6)
* main and the exit status:              VMS Misc.            (line   6)
* make:                                  Preprocessor Options.
                                                              (line  85)
* MAKE_DECL_ONE_ONLY (DECL):             Label Output.        (line  87)
* make_safe_from:                        Expander Definitions.
                                                              (line 128)
* makefile fragment:                     Fragments.           (line   6)
* MASK_RETURN_ADDR:                      Exception Region Output.
                                                              (line  57)
* match_dup:                             RTL Template.        (line  94)
* match_dup and attributes:              Insn Lengths.        (line  16)
* match_insn:                            RTL Template.        (line 233)
* match_insn2:                           RTL Template.        (line 242)
* match_op_dup:                          RTL Template.        (line 173)
* match_operand:                         RTL Template.        (line  16)
* match_operand and attributes:          Expressions.         (line  55)
* match_operator:                        RTL Template.        (line 105)
* match_par_dup:                         RTL Template.        (line 229)
* match_parallel:                        RTL Template.        (line 182)
* match_scratch:                         RTL Template.        (line  79)
* matching constraint:                   Simple Constraints.  (line 122)
* matching operands:                     Output Template.     (line  50)
* math libraries:                        Interface.           (line  72)
* math, in RTL:                          Arithmetic.          (line   6)
* MATH_LIBRARY:                          Misc.                (line 502)
* MAX_BITS_PER_WORD:                     Storage Layout.      (line  57)
* MAX_CHAR_TYPE_SIZE:                    Type Layout.         (line  50)
* MAX_FIXED_MODE_SIZE:                   Storage Layout.      (line 322)
* MAX_INT_TYPE_SIZE:                     Type Layout.         (line  15)
* MAX_INTEGER_COMPUTATION_MODE:          Misc.                (line 494)
* MAX_LONG_TYPE_SIZE:                    Type Layout.         (line  31)
* MAX_MOVE_MAX:                          Misc.                (line 108)
* MAX_OFILE_ALIGNMENT:                   Storage Layout.      (line 174)
* MAX_REGS_PER_ADDRESS:                  Addressing Modes.    (line  28)
* MAX_WCHAR_TYPE_SIZE:                   Type Layout.         (line 129)
* maximum operator:                      Min and Max.         (line  14)
* MAYBE_REG_PARM_STACK_SPACE:            Stack Arguments.     (line  59)
* mcount:                                Profiling.           (line  17)
* MD_CALL_PROTOTYPES:                    Config.              (line 141)
* MD_EXEC_PREFIX:                        Driver.              (line 245)
* MD_SCHED_INIT:                         Misc.                (line 465)
* MD_SCHED_REORDER:                      Misc.                (line 472)
* MD_SCHED_VARIABLE_ISSUE:               Misc.                (line 484)
* MD_STARTFILE_PREFIX:                   Driver.              (line 257)
* MD_STARTFILE_PREFIX_1:                 Driver.              (line 263)
* mem:                                   Regs and Memory.     (line 245)
* mem and /f:                            Flags.               (line  22)
* mem and /s:                            Flags.               (line  14)
* mem and /u:                            Flags.               (line  73)
* mem and /v:                            Flags.               (line  10)
* mem, RTL sharing:                      Sharing.             (line  39)
* MEM_ALIAS_SET:                         Flags.               (line  30)
* MEM_IN_STRUCT_P:                       Flags.               (line  14)
* MEM_SCALAR_P:                          Flags.               (line  22)
* MEM_VOLATILE_P:                        Flags.               (line  10)
* member fns, automatically inline:      Inline.              (line  42)
* memcmp:                                C Dialect Options.   (line  78)
* memcpy:                                C Dialect Options.   (line  78)
* memcpy, implicit usage:                Library Calls.       (line  92)
* memory model (29k):                    AMD29K Options.      (line  25)
* memory reference, nonoffsettable:      Simple Constraints.  (line 244)
* memory references in constraints:      Simple Constraints.  (line  10)
* MEMORY_MOVE_COST:                      Costs.               (line 108)
* memset, implicit usage:                Library Calls.       (line  92)
* MERGE_MACHINE_DECL_ATTRIBUTES:         Misc.                (line 359)
* MERGE_MACHINE_TYPE_ATTRIBUTES:         Misc.                (line 353)
* messages, warning:                     Warning Options.     (line   6)
* messages, warning and error:           Warnings and Errors. (line   6)
* middle-operands, omitted:              Conditionals.        (line   6)
* MIN_UNITS_PER_WORD:                    Storage Layout.      (line  66)
* minimum operator:                      Min and Max.         (line  10)
* MINIMUM_ATOMIC_ALIGNMENT:              Storage Layout.      (line 156)
* minus:                                 Arithmetic.          (line  27)
* minus and attributes:                  Expressions.         (line  64)
* minus, canonicalization of:            Insn Canonicalizations.
                                                              (line  21)
* MIPS options:                          MIPS Options.        (line   6)
* misunderstandings in C++:              C++ Misunderstandings.
                                                              (line   6)
* mktemp, and constant strings:          Incompatibilities.   (line  15)
* MN10200 options:                       MN10200 Options.     (line   6)
* MN10300 options:                       MN10300 Options.     (line   6)
* mod:                                   Arithmetic.          (line  95)
* mod and attributes:                    Expressions.         (line  64)
* MODDI3_LIBCALL:                        Library Calls.       (line  56)
* mode attribute:                        Variable Attributes. (line  77)
* mode classes:                          Machine Modes.       (line 110)
* MODE_CC:                               Machine Modes.       (line 138)
* MODE_COMPLEX_FLOAT:                    Machine Modes.       (line 130)
* MODE_COMPLEX_INT:                      Machine Modes.       (line 127)
* MODE_FLOAT:                            Machine Modes.       (line 123)
* MODE_FUNCTION:                         Machine Modes.       (line 134)
* MODE_INT:                              Machine Modes.       (line 116)
* MODE_PARTIAL_INT:                      Machine Modes.       (line 120)
* MODE_RANDOM:                           Machine Modes.       (line 143)
* MODES_TIEABLE_P:                       Values in Registers. (line  91)
* modifiers in constraints:              Modifiers.           (line   6)
* modM3 instruction pattern:             Standard Names.      (line 145)
* MODSI3_LIBCALL:                        Library Calls.       (line  26)
* MOVE_BY_PIECES_P:                      Costs.               (line 197)
* MOVE_MAX:                              Misc.                (line 103)
* MOVE_MAX_PIECES:                       Costs.               (line 203)
* MOVE_RATIO:                            Costs.               (line 184)
* movM instruction pattern:              Standard Names.      (line  11)
* movMODEcc instruction pattern:         Standard Names.      (line 374)
* movstrictM instruction pattern:        Standard Names.      (line 104)
* movstrM instruction pattern:           Standard Names.      (line 244)
* MULDI3_LIBCALL:                        Library Calls.       (line  38)
* mulhisi3 instruction pattern:          Standard Names.      (line 151)
* mulM3 instruction pattern:             Standard Names.      (line 145)
* mulqihi3 instruction pattern:          Standard Names.      (line 155)
* MULSI3_LIBCALL:                        Library Calls.       (line   8)
* mulsidi3 instruction pattern:          Standard Names.      (line 155)
* mult:                                  Arithmetic.          (line  66)
* mult and attributes:                   Expressions.         (line  64)
* mult, canonicalization of:             Insn Canonicalizations.
                                                              (line  21)
* MULTIBYTE_CHARS:                       Config.              (line 102)
* MULTILIB_DEFAULTS:                     Driver.              (line 224)
* MULTILIB_DIRNAMES:                     Target Fragment.     (line  55)
* MULTILIB_EXCEPTIONS:                   Target Fragment.     (line  75)
* MULTILIB_EXTRA_OPTS:                   Target Fragment.     (line  88)
* MULTILIB_MATCHES:                      Target Fragment.     (line  68)
* MULTILIB_OPTIONS:                      Target Fragment.     (line  35)
* multiple alternative constraints:      Multi-Alternative.   (line   6)
* MULTIPLE_SYMBOL_SPACES:                Misc.                (line 452)
* multiplication:                        Arithmetic.          (line  66)
* multiprecision arithmetic:             Long Long.           (line   6)
* MUST_PASS_IN_STACK:                    Register Arguments.  (line  56)
* MUST_PASS_IN_STACK, and FUNCTION_ARG:  Register Arguments.  (line  48)
* n in constraint:                       Simple Constraints.  (line  62)
* N_REG_CLASSES:                         Register Classes.    (line  75)
* name augmentation:                     VMS Misc.            (line  27)
* named patterns and conditions:         Patterns.            (line  43)
* named return value in C++:             Naming Results.      (line   6)
* names used in assembler code:          Asm Labels.          (line   6)
* names, pattern:                        Standard Names.      (line   6)
* naming convention, implementation headers: C++ Interface.   (line  59)
* naming types:                          Naming Types.        (line   6)
* Native Language Support:               Installation.        (line 250)
* ne:                                    Comparisons.         (line  52)
* ne and attributes:                     Expressions.         (line  64)
* neg:                                   Arithmetic.          (line  62)
* neg and attributes:                    Expressions.         (line  64)
* neg, canonicalization of:              Insn Canonicalizations.
                                                              (line  21)
* negM2 instruction pattern:             Standard Names.      (line 201)
* nested functions:                      Nested Functions.    (line   6)
* nested functions, trampolines for:     Trampolines.         (line   6)
* newline vs string constants:           C Dialect Options.   (line 194)
* next_cc0_user:                         Jump Patterns.       (line  64)
* NEXT_INSN:                             Insns.               (line  30)
* NEXT_OBJC_RUNTIME:                     Library Calls.       (line 175)
* nil:                                   RTL Objects.         (line  59)
* NLS:                                   Installation.        (line 250)
* no constraints:                        No Constraints.      (line   6)
* no-op move instructions:               Passes.              (line 292)
* NO_BUILTIN_PTRDIFF_TYPE:               Driver.              (line  68)
* NO_BUILTIN_SIZE_TYPE:                  Driver.              (line  59)
* no_check_memory_usage function attribute: Function Attributes.
                                                              (line 213)
* NO_DBX_FUNCTION_END:                   DBX Hooks.           (line  81)
* NO_DOLLAR_IN_LABEL:                    Misc.                (line 389)
* NO_DOT_IN_LABEL:                       Misc.                (line 395)
* NO_FUNCTION_CSE:                       Costs.               (line 248)
* NO_IMPLICIT_EXTERN_C:                  Misc.                (line 275)
* no_instrument_function function attribute: Function Attributes.
                                                              (line 154)
* NO_MD_PROTOTYPES:                      Config.              (line 135)
* no_new_pseudos:                        Standard Names.      (line  73)
* NO_RECURSIVE_FUNCTION_CSE:             Costs.               (line 252)
* NO_REGS:                               Register Classes.    (line  17)
* NO_SYS_SIGLIST:                        Config.              (line 111)
* nocommon attribute:                    Variable Attributes. (line  88)
* non-constant initializers:             Initializers.        (line   6)
* non-static inline function:            Inline.              (line  59)
* NON_SAVING_SETJMP:                     Register Basics.     (line  81)
* nongcc_SI_type:                        Library Calls.       (line 151)
* nongcc_word_type:                      Library Calls.       (line 158)
* nonlocal_goto instruction pattern:     Standard Names.      (line 698)
* nonlocal_goto_receiver instruction pattern: Standard Names. (line 715)
* nonoffsettable memory reference:       Simple Constraints.  (line 244)
* nop instruction pattern:               Standard Names.      (line 538)
* noreturn function attribute:           Function Attributes. (line  24)
* not:                                   Arithmetic.          (line 110)
* not and attributes:                    Expressions.         (line  50)
* not equal:                             Comparisons.         (line  52)
* not using constraints:                 No Constraints.      (line   6)
* not, canonicalization of:              Insn Canonicalizations.
                                                              (line  21)
* note:                                  Insns.               (line 137)
* NOTE_INSN_BLOCK_BEG:                   Insns.               (line 157)
* NOTE_INSN_BLOCK_END:                   Insns.               (line 157)
* NOTE_INSN_DELETED:                     Insns.               (line 152)
* NOTE_INSN_EH_REGION_BEG:               Insns.               (line 163)
* NOTE_INSN_EH_REGION_END:               Insns.               (line 163)
* NOTE_INSN_FUNCTION_END:                Insns.               (line 186)
* NOTE_INSN_LOOP_BEG:                    Insns.               (line 170)
* NOTE_INSN_LOOP_CONT:                   Insns.               (line 176)
* NOTE_INSN_LOOP_END:                    Insns.               (line 170)
* NOTE_INSN_LOOP_VTOP:                   Insns.               (line 180)
* NOTE_INSN_SETJMP:                      Insns.               (line 192)
* NOTE_LINE_NUMBER:                      Insns.               (line 137)
* NOTE_SOURCE_FILE:                      Insns.               (line 137)
* NOTICE_UPDATE_CC:                      Condition Code.      (line  32)
* NS32K options:                         NS32K Options.       (line   6)
* NUM_MACHINE_MODES:                     Machine Modes.       (line 156)
* o in constraint:                       Simple Constraints.  (line  14)
* OBJC_GEN_METHOD_LABEL:                 Label Output.        (line 212)
* OBJC_INCLUDE_PATH:                     Environment Variables.
                                                              (line  98)
* OBJC_INT_SELECTORS:                    Type Layout.         (line 136)
* OBJC_PROLOGUE:                         File Framework.      (line 104)
* OBJC_SELECTORS_WITHOUT_LABELS:         Type Layout.         (line 143)
* OBJECT_FORMAT_COFF:                    Macros for Initialization.
                                                              (line  73)
* OBJECT_FORMAT_ROSE:                    Macros for Initialization.
                                                              (line  79)
* OBJECT_SUFFIX:                         Config.              (line 163)
* Objective C:                           G++ and GCC.         (line   6)
* Objective C threads:                   Installation.        (line 199)
* OBSTACK_CHUNK_ALLOC:                   Config.              (line  71)
* OBSTACK_CHUNK_FREE:                    Config.              (line  75)
* OBSTACK_CHUNK_SIZE:                    Config.              (line  67)
* obstack_free:                          Configurations.      (line 473)
* OCS (88k):                             M88K Options.        (line  34)
* offsettable address:                   Simple Constraints.  (line  14)
* old-style function definitions:        Function Prototypes. (line   6)
* OLDAR:                                 Host Fragment.       (line  19)
* OLDCC:                                 Host Fragment.       (line  15)
* OMIT_EH_TABLE:                         Exception Region Output.
                                                              (line  39)
* omitted middle-operands:               Conditionals.        (line   6)
* one_cmplM2 instruction pattern:        Standard Names.      (line 223)
* ONLY_INT_FIELDS:                       Config.              (line  62)
* open coding:                           Inline.              (line   6)
* operand access:                        Accessors.           (line   6)
* operand constraints:                   Constraints.         (line   6)
* operand substitution:                  Output Template.     (line   6)
* operands:                              Patterns.            (line  49)
* OPTIMIZATION_OPTIONS:                  Run-time Target.     (line 119)
* optimize options:                      Optimize Options.    (line   6)
* optional hardware or system features:  Run-time Target.     (line  30)
* options to control warnings:           Warning Options.     (line   6)
* options, C++:                          C++ Dialect Options. (line   6)
* options, code generation:              Code Gen Options.    (line   6)
* options, debugging:                    Debugging Options.   (line   6)
* options, dialect:                      C Dialect Options.   (line   6)
* options, directory search:             Directory Options.   (line   6)
* options, GCC command:                  Invoking GCC.        (line   6)
* options, grouping:                     Invoking GCC.        (line  26)
* options, linking:                      Link Options.        (line   6)
* options, optimization:                 Optimize Options.    (line   6)
* options, order:                        Invoking GCC.        (line  30)
* options, preprocessor:                 Preprocessor Options.
                                                              (line   6)
* order of evaluation, side effects:     Non-bugs.            (line 186)
* order of options:                      Invoking GCC.        (line  30)
* order of register allocation:          Allocation Order.    (line   6)
* ORDER_REGS_FOR_LOCAL_ALLOC:            Allocation Order.    (line  22)
* Ordering of Patterns:                  Pattern Ordering.    (line   6)
* other directory, compilation in:       Other Dir.           (line   6)
* OUTGOING_REG_PARM_STACK_SPACE:         Stack Arguments.     (line  87)
* OUTGOING_REGNO:                        Register Basics.     (line  95)
* output file option:                    Overall Options.     (line 100)
* output of assembler code:              File Framework.      (line   6)
* output statements:                     Output Statement.    (line   6)
* output templates:                      Output Template.     (line   6)
* output_addr_const:                     Data Output.         (line  22)
* output_asm_insn:                       Output Statement.    (line  48)
* OUTPUT_QUOTED_STRING:                  File Framework.      (line  73)
* overflow while constant folding:       Cross-compilation.   (line 109)
* OVERLAPPING_REGNO_P:                   Obsolete Register Macros.
                                                              (line  11)
* overloaded virtual fn, warning:        C++ Dialect Options. (line 343)
* OVERRIDE_OPTIONS:                      Run-time Target.     (line 109)
* p in constraint:                       Simple Constraints.  (line 144)
* packed attribute:                      Variable Attributes. (line  98)
* parallel:                              Side Effects.        (line 161)
* parameter forward declaration:         Variable Length.     (line  58)
* parameters, aliased:                   Code Gen Options.    (line 300)
* parameters, miscellaneous:             Misc.                (line   6)
* PARM_BOUNDARY:                         Storage Layout.      (line 125)
* PARSE_LDD_OUTPUT:                      Macros for Initialization.
                                                              (line 102)
* parser generator, Bison:               Installation.        (line  39)
* parsing pass:                          Passes.              (line  10)
* passes and files of the compiler:      Passes.              (line   6)
* passing arguments:                     Interface.           (line  37)
* PATH_SEPARATOR:                        Config.              (line 150)
* PATTERN:                               Insns.               (line 214)
* pattern conditions:                    Patterns.            (line  39)
* pattern names:                         Standard Names.      (line   6)
* Pattern Ordering:                      Pattern Ordering.    (line   6)
* patterns:                              Patterns.            (line   6)
* pc:                                    Regs and Memory.     (line 232)
* pc and attributes:                     Insn Lengths.        (line  20)
* pc, RTL sharing:                       Sharing.             (line  27)
* pc_rtx:                                Regs and Memory.     (line 237)
* PCC_BITFIELD_TYPE_MATTERS:             Storage Layout.      (line 239)
* PCC_STATIC_STRUCT_RETURN:              Aggregate Return.    (line  70)
* PDImode:                               Machine Modes.       (line  37)
* peephole optimization:                 Passes.              (line 317)
* peephole optimization, RTL representation: Side Effects.    (line 195)
* peephole optimizer definitions:        Peephole Definitions.
                                                              (line   6)
* percent sign:                          Output Template.     (line   6)
* perform_...:                           Library Calls.       (line 165)
* PIC <1>:                               Code Gen Options.    (line 118)
* PIC:                                   PIC.                 (line   6)
* PIC_OFFSET_TABLE_REG_CALL_CLOBBERED:   PIC.                 (line  24)
* PIC_OFFSET_TABLE_REGNUM:               PIC.                 (line  15)
* plus:                                  Arithmetic.          (line  14)
* plus and attributes:                   Expressions.         (line  64)
* plus, canonicalization of:             Insn Canonicalizations.
                                                              (line  21)
* pmf:                                   Bound member functions.
                                                              (line   6)
* Pmode:                                 Misc.                (line 245)
* pointer arguments:                     Function Attributes. (line  86)
* pointer to member function:            Bound member functions.
                                                              (line   6)
* POINTER_SIZE:                          Storage Layout.      (line  72)
* POINTERS_EXTEND_UNSIGNED:              Storage Layout.      (line  77)
* portability:                           Portability.         (line   6)
* portions of temporary objects, pointers to: Temporaries.    (line   6)
* position independent code:             PIC.                 (line   6)
* POSIX:                                 Config.              (line 108)
* post_dec:                              Incdec.              (line  25)
* post_inc:                              Incdec.              (line  30)
* post_modify:                           Incdec.              (line  33)
* pragma:                                Misc.                (line 322)
* pragma, reason for not using:          Function Attributes. (line 342)
* pragmas in C++, effect on inlining:    C++ Interface.       (line  82)
* pragmas, interface and implementation: C++ Interface.       (line  16)
* pragmas, warning of unknown:           Warning Options.     (line 223)
* pre_dec:                               Incdec.              (line   8)
* pre_inc:                               Incdec.              (line  22)
* predefined macros:                     Run-time Target.     (line   6)
* PREDICATE_CODES:                       Misc.                (line   9)
* PREFERRED_DEBUGGING_TYPE:              All Debuggers.       (line  41)
* PREFERRED_OUTPUT_RELOAD_CLASS:         Register Classes.    (line 171)
* PREFERRED_RELOAD_CLASS:                Register Classes.    (line 151)
* PREFERRED_STACK_BOUNDARY:              Storage Layout.      (line 137)
* preprocessing numbers:                 Incompatibilities.   (line 179)
* preprocessing tokens:                  Incompatibilities.   (line 179)
* preprocessor options:                  Preprocessor Options.
                                                              (line   6)
* PRETEND_OUTGOING_VARARGS_NAMED:        Varargs.             (line 153)
* prev_active_insn:                      Peephole Definitions.
                                                              (line  70)
* prev_cc0_setter:                       Jump Patterns.       (line  64)
* PREV_INSN:                             Insns.               (line  26)
* PRINT_OPERAND:                         Instruction Output.  (line  72)
* PRINT_OPERAND_ADDRESS:                 Instruction Output.  (line 100)
* PRINT_OPERAND_PUNCT_VALID_P:           Instruction Output.  (line  93)
* probe instruction pattern:             Standard Names.      (line 677)
* processor selection (29k):             AMD29K Options.      (line  42)
* product:                               Arithmetic.          (line  66)
* prof:                                  Debugging Options.   (line 110)
* PROFILE_BEFORE_PROLOGUE:               Profiling.           (line  23)
* profile_block_flag:                    Profiling.           (line  28)
* profiling, code generation:            Profiling.           (line   6)
* program counter:                       Regs and Memory.     (line 233)
* prologue:                              Function Entry.      (line   6)
* prologue instruction pattern:          Standard Names.      (line 783)
* PROMOTE_FOR_CALL_ONLY:                 Storage Layout.      (line 119)
* PROMOTE_FUNCTION_ARGS:                 Storage Layout.      (line 108)
* PROMOTE_FUNCTION_RETURN:               Storage Layout.      (line 112)
* PROMOTE_MODE:                          Storage Layout.      (line  85)
* PROMOTE_PROTOTYPES:                    Stack Arguments.     (line  10)
* promotion of formal parameters:        Function Prototypes. (line   6)
* pseudo registers:                      Regs and Memory.     (line   9)
* PSImode:                               Machine Modes.       (line  29)
* PTRDIFF_TYPE:                          Type Layout.         (line 108)
* push address instruction:              Simple Constraints.  (line 144)
* push_reload:                           Addressing Modes.    (line 173)
* PUSH_ROUNDING:                         Stack Arguments.     (line  16)
* PUSH_ROUNDING, interaction with PREFERRED_STACK_BOUNDARY: Storage Layout.
                                                              (line 144)
* PUT_CODE:                              RTL Objects.         (line  33)
* PUT_MODE:                              Machine Modes.       (line 153)
* PUT_REG_NOTE_KIND:                     Insns.               (line 280)
* PUT_SDB_...:                           SDB and DWARF.       (line  39)
* Q, in constraint:                      Simple Constraints.  (line 153)
* QImode:                                Machine Modes.       (line  22)
* QImode, in insn:                       Insns.               (line 198)
* qsort, and global register variables:  Global Reg Vars.     (line  42)
* question mark:                         Multi-Alternative.   (line  41)
* quotient:                              Arithmetic.          (line  81)
* r in constraint:                       Simple Constraints.  (line  47)
* r0-relative references (88k):          M88K Options.        (line  66)
* ranges in case statements:             Case Ranges.         (line   6)
* read-only strings:                     Incompatibilities.   (line  11)
* READONLY_DATA_SECTION:                 Sections.            (line  64)
* REAL_ARITHMETIC:                       Cross-compilation.   (line  98)
* REAL_INFINITY:                         Cross-compilation.   (line  79)
* REAL_NM_FILE_NAME:                     Macros for Initialization.
                                                              (line  87)
* REAL_VALUE_ATOF:                       Cross-compilation.   (line  73)
* REAL_VALUE_FIX:                        Cross-compilation.   (line  51)
* REAL_VALUE_FROM_INT:                   Cross-compilation.   (line 141)
* REAL_VALUE_ISINF:                      Cross-compilation.   (line  83)
* REAL_VALUE_ISNAN:                      Cross-compilation.   (line  88)
* REAL_VALUE_LDEXP:                      Cross-compilation.   (line  45)
* REAL_VALUE_NEGATE:                     Cross-compilation.   (line 114)
* REAL_VALUE_RNDZINT:                    Cross-compilation.   (line  61)
* REAL_VALUE_TO_DECIMAL:                 Data Output.         (line 153)
* REAL_VALUE_TO_INT:                     Cross-compilation.   (line 135)
* REAL_VALUE_TO_TARGET_DOUBLE:           Data Output.         (line 140)
* REAL_VALUE_TO_TARGET_LONG_DOUBLE:      Data Output.         (line 140)
* REAL_VALUE_TO_TARGET_SINGLE:           Data Output.         (line 140)
* REAL_VALUE_TRUNCATE:                   Cross-compilation.   (line 123)
* REAL_VALUE_TYPE:                       Cross-compilation.   (line  31)
* REAL_VALUE_UNSIGNED_FIX:               Cross-compilation.   (line  56)
* REAL_VALUE_UNSIGNED_RNDZINT:           Cross-compilation.   (line  67)
* REAL_VALUES_EQUAL:                     Cross-compilation.   (line  36)
* REAL_VALUES_LESS:                      Cross-compilation.   (line  40)
* recog_operand:                         Instruction Output.  (line  39)
* recognizing insns:                     RTL Template.        (line   6)
* reg:                                   Regs and Memory.     (line   9)
* reg and /i:                            Flags.               (line  48)
* reg and /s:                            Flags.               (line  38)
* reg and /u:                            Flags.               (line  73)
* reg and /v:                            Flags.               (line  43)
* reg, RTL sharing:                      Sharing.             (line  17)
* REG_ALLOC_ORDER:                       Allocation Order.    (line   8)
* REG_BR_PRED:                           Insns.               (line 483)
* REG_BR_PROB:                           Insns.               (line 477)
* REG_CC_SETTER:                         Insns.               (line 447)
* REG_CC_USER:                           Insns.               (line 447)
* REG_CLASS_CONTENTS:                    Register Classes.    (line  85)
* REG_CLASS_FROM_LETTER:                 Register Classes.    (line 114)
* REG_CLASS_NAMES:                       Register Classes.    (line  80)
* REG_DEAD:                              Insns.               (line 291)
* REG_DEP_ANTI:                          Insns.               (line 462)
* REG_DEP_OUTPUT:                        Insns.               (line 465)
* REG_EQUAL:                             Insns.               (line 339)
* REG_EQUIV:                             Insns.               (line 339)
* REG_EXEC_COUNT:                        Insns.               (line 472)
* REG_FRAME_RELATED_EXPR:                Insns.               (line 489)
* REG_FUNCTION_VALUE_P:                  Flags.               (line  48)
* REG_INC:                               Insns.               (line 302)
* REG_LABEL:                             Insns.               (line 332)
* REG_LIBCALL:                           Insns.               (line 440)
* REG_LOOP_TEST_P:                       Flags.               (line  38)
* REG_MODE_OK_FOR_BASE_P:                Addressing Modes.    (line 105)
* reg_names:                             Instruction Output.  (line  85)
* REG_NO_CONFLICT:                       Insns.               (line 316)
* REG_NONNEG:                            Insns.               (line 308)
* REG_NOTE_KIND:                         Insns.               (line 280)
* REG_NOTES:                             Insns.               (line 248)
* REG_OK_FOR_BASE_P:                     Addressing Modes.    (line  96)
* REG_OK_FOR_INDEX_P:                    Addressing Modes.    (line 113)
* REG_OK_STRICT:                         Addressing Modes.    (line  54)
* REG_PARM_STACK_SPACE:                  Stack Arguments.     (line  45)
* REG_PARM_STACK_SPACE, and FUNCTION_ARG: Register Arguments. (line  48)
* REG_RETVAL:                            Insns.               (line 424)
* REG_UNUSED:                            Insns.               (line 407)
* REG_USERVAR_P:                         Flags.               (line  43)
* REG_WAS_0:                             Insns.               (line 414)
* register allocation:                   Passes.              (line 252)
* register allocation order:             Allocation Order.    (line   6)
* register allocation, stupid:           Passes.              (line 190)
* register class definitions:            Register Classes.    (line   6)
* register class preference constraints: Class Preferences.   (line   6)
* register class preference pass:        Passes.              (line 248)
* register movement:                     Passes.              (line 222)
* register pairs:                        Values in Registers. (line  42)
* register positions in frame (88k):     M88K Options.        (line  43)
* Register Transfer Language (RTL):      RTL.                 (line   6)
* register usage:                        Registers.           (line   6)
* register use analysis:                 Passes.              (line 139)
* register variable after longjmp:       Global Reg Vars.     (line  66)
* register-to-stack conversion:          Passes.              (line 308)
* REGISTER_MOVE_COST:                    Costs.               (line  90)
* REGISTER_NAMES:                        Instruction Output.  (line   8)
* register_operand:                      RTL Template.        (line  62)
* REGISTER_PREFIX:                       Instruction Output.  (line 129)
* registers:                             Extended Asm.        (line   6)
* registers arguments:                   Register Arguments.  (line   6)
* registers for local variables:         Local Reg Vars.      (line   6)
* registers in constraints:              Simple Constraints.  (line  47)
* registers, global allocation:          Explicit Reg Vars.   (line   6)
* registers, global variables in:        Global Reg Vars.     (line   6)
* REGNO_MODE_OK_FOR_BASE_P:              Register Classes.    (line 128)
* REGNO_OK_FOR_BASE_P:                   Register Classes.    (line 122)
* REGNO_OK_FOR_INDEX_P:                  Register Classes.    (line 136)
* REGNO_REG_CLASS:                       Register Classes.    (line  97)
* regs_ever_live:                        Function Entry.      (line  20)
* relative costs:                        Costs.               (line   6)
* RELATIVE_PREFIX_NOT_LINKDIR:           Driver.              (line 234)
* reload pass:                           Regs and Memory.     (line 144)
* reload_completed:                      Standard Names.      (line 505)
* reload_in instruction pattern:         Standard Names.      (line  97)
* reload_in_progress:                    Standard Names.      (line  53)
* reload_out instruction pattern:        Standard Names.      (line  97)
* reloading:                             Passes.              (line 265)
* remainder:                             Arithmetic.          (line  95)
* reordering, warning:                   C++ Dialect Options. (line 293)
* reporting bugs:                        Bugs.                (line   6)
* representation of RTL:                 RTL.                 (line   6)
* rest argument (in macro):              Macro Varargs.       (line   6)
* rest_of_compilation:                   Passes.              (line  19)
* rest_of_decl_compilation:              Passes.              (line  19)
* restore_stack_block instruction pattern: Standard Names.    (line 606)
* restore_stack_function instruction pattern: Standard Names. (line 606)
* restore_stack_nonlocal instruction pattern: Standard Names. (line 606)
* return:                                Side Effects.        (line  59)
* return instruction pattern:            Standard Names.      (line 492)
* return value of main:                  VMS Misc.            (line   6)
* return value, named, in C++:           Naming Results.      (line   6)
* return values in registers:            Scalar Return.       (line   6)
* return, in C++ function header:        Naming Results.      (line   6)
* RETURN_ADDR_IN_PREVIOUS_FRAME:         Frame Layout.        (line  94)
* RETURN_ADDR_RTX:                       Frame Layout.        (line  83)
* RETURN_ADDRESS_POINTER_REGNUM:         Frame Registers.     (line  50)
* RETURN_IN_MEMORY:                      Aggregate Return.    (line  15)
* RETURN_POPS_ARGS:                      Stack Arguments.     (line 104)
* returning aggregate values:            Aggregate Return.    (line   6)
* returning structures and unions:       Interface.           (line  10)
* REVERSIBLE_CC_MODE:                    Condition Code.      (line 119)
* right rotate:                          Arithmetic.          (line 142)
* right shift:                           Arithmetic.          (line 137)
* rotate:                                Arithmetic.          (line 142)
* rotatert:                              Arithmetic.          (line 142)
* rotlM3 instruction pattern:            Standard Names.      (line 197)
* rotrM3 instruction pattern:            Standard Names.      (line 197)
* ROUND_TYPE_ALIGN:                      Storage Layout.      (line 313)
* ROUND_TYPE_SIZE:                       Storage Layout.      (line 306)
* RS/6000 and PowerPC Options:           RS/6000 and PowerPC Options.
                                                              (line   6)
* RT options:                            RT Options.          (line   6)
* RT PC:                                 Interoperation.      (line 244)
* RTL addition:                          Arithmetic.          (line  14)
* RTL classes:                           RTL Classes.         (line   6)
* RTL comparison:                        Arithmetic.          (line  30)
* RTL comparison operations:             Comparisons.         (line   6)
* RTL constant expression types:         Constants.           (line   6)
* RTL constants:                         Constants.           (line   6)
* RTL declarations:                      RTL Declarations.    (line   6)
* RTL difference:                        Arithmetic.          (line  27)
* RTL expression:                        RTL Objects.         (line   6)
* RTL expressions for arithmetic:        Arithmetic.          (line   6)
* RTL format:                            RTL Classes.         (line  59)
* RTL format characters:                 RTL Classes.         (line  66)
* RTL function-call insns:               Calls.               (line   6)
* RTL generation:                        Passes.              (line  71)
* RTL insn template:                     RTL Template.        (line   6)
* RTL integers:                          RTL Objects.         (line   6)
* RTL memory expressions:                Regs and Memory.     (line   6)
* RTL object types:                      RTL Objects.         (line   6)
* RTL postdecrement:                     Incdec.              (line   6)
* RTL postincrement:                     Incdec.              (line   6)
* RTL predecrement:                      Incdec.              (line   6)
* RTL preincrement:                      Incdec.              (line   6)
* RTL register expressions:              Regs and Memory.     (line   6)
* RTL representation:                    RTL.                 (line   6)
* RTL side effect expressions:           Side Effects.        (line   6)
* RTL strings:                           RTL Objects.         (line   6)
* RTL structure sharing assumptions:     Sharing.             (line   6)
* RTL subtraction:                       Arithmetic.          (line  27)
* RTL sum:                               Arithmetic.          (line  14)
* RTL vectors:                           RTL Objects.         (line   6)
* RTX (See RTL):                         RTL Objects.         (line   6)
* RTX codes, classes of:                 RTL Classes.         (line   6)
* RTX_COSTS:                             Costs.               (line  23)
* RTX_FRAME_RELATED_P:                   Flags.               (line  85)
* RTX_INTEGRATED_P:                      Flags.               (line  81)
* RTX_UNCHANGING_P:                      Flags.               (line  73)
* run-time conventions:                  Interface.           (line   6)
* run-time options:                      Code Gen Options.    (line   6)
* run-time target specification:         Run-time Target.     (line   6)
* s in constraint:                       Simple Constraints.  (line  89)
* save_stack_block instruction pattern:  Standard Names.      (line 606)
* save_stack_function instruction pattern: Standard Names.    (line 606)
* save_stack_nonlocal instruction pattern: Standard Names.    (line 606)
* saveable_obstack:                      Addressing Modes.    (line  85)
* scalars, returned as values:           Scalar Return.       (line   6)
* scanf, and constant strings:           Incompatibilities.   (line  19)
* SCCS_DIRECTIVE:                        Misc.                (line 271)
* SCHED_GROUP_P:                         Flags.               (line 142)
* scheduler, experimental:               Installation.        (line 190)
* scheduling, delayed branch:            Passes.              (line 299)
* scheduling, instruction:               Passes.              (line 232)
* SCmode:                                Machine Modes.       (line  87)
* sCOND instruction pattern:             Standard Names.      (line 387)
* scope of a variable length array:      Variable Length.     (line  21)
* scope of declaration:                  Disappointments.     (line  21)
* scope of external declarations:        Incompatibilities.   (line  92)
* scratch:                               Regs and Memory.     (line 169)
* scratch operands:                      Regs and Memory.     (line 169)
* scratch, RTL sharing:                  Sharing.             (line  34)
* SDB_ALLOW_FORWARD_REFERENCES:          SDB and DWARF.       (line  62)
* SDB_ALLOW_UNKNOWN_REFERENCES:          SDB and DWARF.       (line  57)
* SDB_DEBUGGING_INFO:                    SDB and DWARF.       (line   8)
* SDB_DELIM:                             SDB and DWARF.       (line  45)
* SDB_GENERATE_FAKE:                     SDB and DWARF.       (line  52)
* search path:                           Directory Options.   (line   6)
* second include path:                   Preprocessor Options.
                                                              (line  34)
* SECONDARY_INPUT_RELOAD_CLASS:          Register Classes.    (line 192)
* SECONDARY_MEMORY_NEEDED:               Register Classes.    (line 255)
* SECONDARY_MEMORY_NEEDED_MODE:          Register Classes.    (line 274)
* SECONDARY_MEMORY_NEEDED_RTX:           Register Classes.    (line 265)
* SECONDARY_OUTPUT_RELOAD_CLASS:         Register Classes.    (line 192)
* SECONDARY_RELOAD_CLASS:                Register Classes.    (line 192)
* section function attribute:            Function Attributes. (line 159)
* section variable attribute:            Variable Attributes. (line 113)
* SELECT_CC_MODE:                        Condition Code.      (line  86)
* SELECT_RTX_SECTION:                    Sections.            (line  85)
* SELECT_SECTION:                        Sections.            (line  74)
* separate directory, compilation in:    Other Dir.           (line   6)
* sequence:                              Side Effects.        (line 205)
* sequential consistency on 88k:         M88K Options.        (line  76)
* set:                                   Side Effects.        (line  15)
* set_attr:                              Tagging Insns.       (line  31)
* set_attr_alternative:                  Tagging Insns.       (line  49)
* SET_DEFAULT_DECL_ATTRIBUTES:           Misc.                (line 378)
* SET_DEFAULT_TYPE_ATTRIBUTES:           Misc.                (line 349)
* SET_DEST:                              Side Effects.        (line  56)
* SET_SRC:                               Side Effects.        (line  56)
* setjmp:                                Global Reg Vars.     (line  66)
* setjmp incompatibilities:              Incompatibilities.   (line  47)
* SETUP_FRAME_ADDRESSES:                 Frame Layout.        (line  68)
* SETUP_INCOMING_VARARGS:                Varargs.             (line 104)
* SFmode:                                Machine Modes.       (line  48)
* shared strings:                        Incompatibilities.   (line  11)
* shared VMS run time system:            VMS Misc.            (line  16)
* SHARED_BSS_SECTION_ASM_OP:             Sections.            (line  41)
* SHARED_SECTION_ASM_OP:                 Sections.            (line  27)
* sharing of RTL components:             Sharing.             (line   6)
* shift:                                 Arithmetic.          (line 129)
* SHIFT_COUNT_TRUNCATED:                 Misc.                (line 115)
* SHORT_IMMEDIATES_SIGN_EXTEND:          Misc.                (line  80)
* SHORT_TYPE_SIZE:                       Type Layout.         (line  21)
* sibcall_epilogue instruction pattern:  Standard Names.      (line 808)
* side effect in ?::                     Conditionals.        (line  20)
* side effects, macro argument:          Statement Exprs.     (line  35)
* side effects, order of evaluation:     Non-bugs.            (line 186)
* sign_extend:                           Conversions.         (line  24)
* sign_extract:                          Bit Fields.          (line  11)
* sign_extract, canonicalization of:     Insn Canonicalizations.
                                                              (line  81)
* signature:                             C++ Signatures.      (line   6)
* signature in C++, advantages:          C++ Signatures.      (line  59)
* signature member function default implementation: C++ Signatures.
                                                              (line  79)
* signatures, C++:                       C++ Signatures.      (line   6)
* signed and unsigned values, comparison warning: Warning Options.
                                                              (line 382)
* signed division:                       Arithmetic.          (line  81)
* signed maximum:                        Arithmetic.          (line 100)
* signed minimum:                        Arithmetic.          (line 100)
* SIGNED_CHAR_SPEC:                      Driver.              (line  77)
* SImode:                                Machine Modes.       (line  34)
* simple constraints:                    Simple Constraints.  (line   6)
* simplifications, arithmetic:           Passes.              (line  46)
* sin:                                   C Dialect Options.   (line  78)
* SIZE_TYPE:                             Type Layout.         (line  92)
* sizeof:                                Typeof.              (line   6)
* SLOW_BYTE_ACCESS:                      Costs.               (line 139)
* SLOW_UNALIGNED_ACCESS:                 Costs.               (line 166)
* SLOW_ZERO_EXTEND:                      Costs.               (line 154)
* SMALL_REGISTER_CLASSES:                Register Classes.    (line 297)
* smaller data references:               M32R/D Options.      (line  48)
* smaller data references (88k):         M88K Options.        (line  66)
* smaller data references (MIPS):        MIPS Options.        (line 227)
* smaller data references (PowerPC):     RS/6000 and PowerPC Options.
                                                              (line 407)
* smax:                                  Arithmetic.          (line 100)
* smaxM3 instruction pattern:            Standard Names.      (line 145)
* smin:                                  Arithmetic.          (line 100)
* sminM3 instruction pattern:            Standard Names.      (line 145)
* smulM3_highpart instruction pattern:   Standard Names.      (line 162)
* SPARC options:                         SPARC Options.       (line   6)
* specified registers:                   Explicit Reg Vars.   (line   6)
* specifying compiler version and target machine: Target Options.
                                                              (line   6)
* specifying hardware config:            Submodel Options.    (line   6)
* specifying machine version:            Target Options.      (line   6)
* specifying registers for local variables: Local Reg Vars.   (line   6)
* speed of instructions:                 Costs.               (line   6)
* splitting instructions:                Insn Splitting.      (line   6)
* sqrt <1>:                              C Dialect Options.   (line  78)
* sqrt:                                  Arithmetic.          (line 150)
* sqrtM2 instruction pattern:            Standard Names.      (line 207)
* square root:                           Arithmetic.          (line 150)
* sscanf, and constant strings:          Incompatibilities.   (line  19)
* stack arguments:                       Stack Arguments.     (line   6)
* stack checks (29k):                    AMD29K Options.      (line  62)
* stack frame layout:                    Frame Layout.        (line   6)
* STACK_BOUNDARY:                        Storage Layout.      (line 131)
* STACK_CHECK_BUILTIN:                   Stack Checking.      (line  27)
* STACK_CHECK_FIXED_FRAME_SIZE:          Stack Checking.      (line  62)
* STACK_CHECK_MAX_FRAME_SIZE:            Stack Checking.      (line  53)
* STACK_CHECK_MAX_VAR_SIZE:              Stack Checking.      (line  69)
* STACK_CHECK_PROBE_INTERVAL:            Stack Checking.      (line  35)
* STACK_CHECK_PROBE_LOAD:                Stack Checking.      (line  42)
* STACK_CHECK_PROTECT:                   Stack Checking.      (line  48)
* STACK_DYNAMIC_OFFSET:                  Frame Layout.        (line  50)
* STACK_DYNAMIC_OFFSET and virtual registers: Regs and Memory.
                                                              (line  83)
* STACK_GROWS_DOWNWARD:                  Frame Layout.        (line   8)
* STACK_PARMS_IN_REG_PARM_AREA:          Stack Arguments.     (line  95)
* STACK_POINTER_OFFSET:                  Frame Layout.        (line  33)
* STACK_POINTER_OFFSET and virtual registers: Regs and Memory.
                                                              (line  93)
* STACK_POINTER_REGNUM:                  Frame Registers.     (line   8)
* STACK_POINTER_REGNUM and virtual registers: Regs and Memory.
                                                              (line  83)
* stack_pointer_rtx:                     Frame Registers.     (line  85)
* STACK_REGS:                            Stack Registers.     (line  14)
* STACK_SAVEAREA_MODE:                   Storage Layout.      (line 329)
* STACK_SIZE_MODE:                       Storage Layout.      (line 341)
* stage1:                                Installation.        (line 359)
* standard pattern names:                Standard Names.      (line   6)
* STANDARD_EXEC_PREFIX:                  Driver.              (line 239)
* STANDARD_INCLUDE_COMPONENT:            Driver.              (line 301)
* STANDARD_INCLUDE_DIR:                  Driver.              (line 293)
* STANDARD_STARTFILE_PREFIX:             Driver.              (line 252)
* start files:                           Tools and Libraries. (line  54)
* STARTFILE_SPEC:                        Driver.              (line 142)
* STARTING_FRAME_OFFSET:                 Frame Layout.        (line  24)
* STARTING_FRAME_OFFSET and virtual registers: Regs and Memory.
                                                              (line  74)
* statements inside expressions:         Statement Exprs.     (line   6)
* static data in C++, declaring and defining: Static Definitions.
                                                              (line   6)
* STATIC_CHAIN:                          Frame Registers.     (line  76)
* STATIC_CHAIN_INCOMING:                 Frame Registers.     (line  76)
* STATIC_CHAIN_INCOMING_REGNUM:          Frame Registers.     (line  62)
* STATIC_CHAIN_REGNUM:                   Frame Registers.     (line  62)
* stdarg.h and register arguments:       Register Arguments.  (line  43)
* stdarg.h and RT PC:                    RT Options.          (line  25)
* storage layout:                        Storage Layout.      (line   6)
* STORE_FLAG_VALUE:                      Misc.                (line 154)
* store_multiple instruction pattern:    Standard Names.      (line 133)
* storem bug (29k):                      AMD29K Options.      (line  67)
* strcmp:                                C Dialect Options.   (line  78)
* strcpy <1>:                            Storage Layout.      (line 189)
* strcpy:                                C Dialect Options.   (line  78)
* strength-reduction:                    Passes.              (line 170)
* STRICT_ALIGNMENT:                      Storage Layout.      (line 234)
* STRICT_ARGUMENT_NAMING:                Varargs.             (line 138)
* strict_low_part:                       RTL Declarations.    (line   9)
* strict_memory_address_p:               Addressing Modes.    (line 183)
* string constants:                      Incompatibilities.   (line  11)
* string constants vs newline:           C Dialect Options.   (line 194)
* STRIP_NAME_ENCODING:                   Sections.            (line 119)
* strlen:                                C Dialect Options.   (line  78)
* strlenM instruction pattern:           Standard Names.      (line 293)
* STRUCT_VALUE:                          Aggregate Return.    (line  47)
* STRUCT_VALUE_INCOMING:                 Aggregate Return.    (line  62)
* STRUCT_VALUE_INCOMING_REGNUM:          Aggregate Return.    (line  53)
* STRUCT_VALUE_REGNUM:                   Aggregate Return.    (line  43)
* structure passing (88k):               M88K Options.        (line 173)
* structure value address:               Aggregate Return.    (line   6)
* STRUCTURE_SIZE_BOUNDARY:               Storage Layout.      (line 226)
* structures:                            Incompatibilities.   (line 151)
* structures, constructor expression:    Constructors.        (line   6)
* structures, returning:                 Interface.           (line  10)
* stupid register allocation:            Passes.              (line 190)
* subM3 instruction pattern:             Standard Names.      (line 145)
* submodel options:                      Submodel Options.    (line   6)
* subreg:                                Regs and Memory.     (line  97)
* subreg and /s:                         Flags.               (line  57)
* subreg and /u:                         Flags.               (line  67)
* subreg, in strict_low_part:            RTL Declarations.    (line   9)
* subreg, special reload handling:       Regs and Memory.     (line 144)
* SUBREG_PROMOTED_UNSIGNED_P:            Flags.               (line  67)
* SUBREG_PROMOTED_VAR_P:                 Flags.               (line  57)
* SUBREG_REG:                            Regs and Memory.     (line 165)
* SUBREG_WORD:                           Regs and Memory.     (line 165)
* subscripting:                          Subscripting.        (line   6)
* subscripting and function values:      Subscripting.        (line   6)
* subtype polymorphism, C++:             C++ Signatures.      (line   6)
* SUCCESS_EXIT_CODE:                     Config.              (line  24)
* suffixes for C++ source:               Invoking G++.        (line   6)
* Sun installation:                      Sun Install.         (line   6)
* SUPPORTS_ONE_ONLY:                     Label Output.        (line  96)
* SUPPORTS_WEAK:                         Label Output.        (line  77)
* suppressing warnings:                  Warning Options.     (line   6)
* surprises in C++:                      C++ Misunderstandings.
                                                              (line   6)
* SVr4:                                  M88K Options.        (line 101)
* SWITCH_CURTAILS_COMPILATION:           Driver.              (line  32)
* SWITCH_TAKES_ARG:                      Driver.              (line   8)
* SWITCHES_NEED_SPACES:                  Driver.              (line  46)
* symbol_ref:                            Constants.           (line  70)
* symbol_ref and /u:                     Flags.               (line 125)
* symbol_ref and /v:                     Flags.               (line  96)
* symbol_ref, RTL sharing:               Sharing.             (line  20)
* SYMBOL_REF_FLAG:                       Flags.               (line  96)
* SYMBOL_REF_FLAG, in ENCODE_SECTION_INFO: Sections.          (line 114)
* SYMBOL_REF_USED:                       Flags.               (line  91)
* symbolic label:                        Sharing.             (line  20)
* syntax checking:                       Warning Options.     (line  20)
* synthesized methods, warning:          C++ Dialect Options. (line 363)
* sys_siglist:                           Config.              (line 115)
* SYSTEM_INCLUDE_DIR:                    Driver.              (line 284)
* t-TARGET:                              Target Fragment.     (line   6)
* tablejump instruction pattern:         Standard Names.      (line 572)
* tagging insns:                         Tagging Insns.       (line   6)
* tail recursion optimization:           Passes.              (line  81)
* target description macros:             Target Macros.       (line   6)
* target machine, specifying:            Target Options.      (line   6)
* target makefile fragment:              Target Fragment.     (line   6)
* target options:                        Target Options.      (line   6)
* target specifications:                 Run-time Target.     (line   6)
* target-parameter-dependent code:       Passes.              (line  75)
* TARGET_BELL:                           Type Layout.         (line 153)
* TARGET_BS:                             Type Layout.         (line 157)
* TARGET_CR:                             Type Layout.         (line 163)
* TARGET_EDOM:                           Library Calls.       (line  73)
* TARGET_FF:                             Type Layout.         (line 163)
* TARGET_FLOAT_FORMAT:                   Storage Layout.      (line 364)
* TARGET_MEM_FUNCTIONS:                  Library Calls.       (line  92)
* TARGET_NEWLINE:                        Type Layout.         (line 157)
* TARGET_OPTIONS:                        Run-time Target.     (line  77)
* TARGET_SWITCHES:                       Run-time Target.     (line  50)
* TARGET_TAB:                            Type Layout.         (line 157)
* TARGET_VERSION:                        Run-time Target.     (line  96)
* TARGET_VT:                             Type Layout.         (line 163)
* TCmode:                                Machine Modes.       (line  87)
* tcov:                                  Debugging Options.   (line 122)
* template instantiation:                Template Instantiation.
                                                              (line   6)
* temporaries, lifetime of:              Temporaries.         (line   6)
* termination routines:                  Initialization.      (line   6)
* text_section:                          Sections.            (line  58)
* TEXT_SECTION_ASM_OP:                   Sections.            (line  17)
* TFmode:                                Machine Modes.       (line  62)
* threads, Objective C:                  Installation.        (line 199)
* Thumb Options:                         Thumb Options.       (line   6)
* thunks:                                Nested Functions.    (line   6)
* TImode:                                Machine Modes.       (line  45)
* TImode, in insn:                       Insns.               (line 198)
* tiny data section on the H8/300H:      Function Attributes. (line 305)
* tm.h macros:                           Target Macros.       (line   6)
* TMPDIR:                                Environment Variables.
                                                              (line  45)
* TMS320C3x/C4x Options:                 TMS320C3x/C4x Options.
                                                              (line   6)
* top level of compiler:                 Passes.              (line   6)
* traditional C language:                C Dialect Options.   (line 115)
* TRADITIONAL_RETURN_FLOAT:              Scalar Return.       (line   9)
* TRAMPOLINE_ALIGNMENT:                  Trampolines.         (line  50)
* TRAMPOLINE_SECTION:                    Trampolines.         (line  40)
* TRAMPOLINE_SIZE:                       Trampolines.         (line  46)
* TRAMPOLINE_TEMPLATE:                   Trampolines.         (line  29)
* trampolines for nested functions:      Trampolines.         (line   6)
* TRANSFER_FROM_TRAMPOLINE:              Trampolines.         (line 129)
* TRULY_NOOP_TRUNCATION:                 Misc.                (line 141)
* truncate:                              Conversions.         (line  39)
* truncMN2 instruction pattern:          Standard Names.      (line 333)
* tstM instruction pattern:              Standard Names.      (line 233)
* type abstraction, C++:                 C++ Signatures.      (line   6)
* type alignment:                        Alignment.           (line   6)
* type attributes:                       Type Attributes.     (line   6)
* typedef names as function parameters:  Incompatibilities.   (line 114)
* typeof:                                Typeof.              (line   6)
* udiv:                                  Arithmetic.          (line  92)
* UDIVDI3_LIBCALL:                       Library Calls.       (line  50)
* udivM3 instruction pattern:            Standard Names.      (line 145)
* udivmodM4 instruction pattern:         Standard Names.      (line 187)
* UDIVSI3_LIBCALL:                       Library Calls.       (line  20)
* Ultrix calling convention:             Interoperation.      (line 249)
* umax:                                  Arithmetic.          (line 105)
* umaxM3 instruction pattern:            Standard Names.      (line 145)
* umin:                                  Arithmetic.          (line 105)
* uminM3 instruction pattern:            Standard Names.      (line 145)
* umod:                                  Arithmetic.          (line  95)
* UMODDI3_LIBCALL:                       Library Calls.       (line  62)
* umodM3 instruction pattern:            Standard Names.      (line 145)
* UMODSI3_LIBCALL:                       Library Calls.       (line  32)
* umulhisi3 instruction pattern:         Standard Names.      (line 158)
* umulM3_highpart instruction pattern:   Standard Names.      (line 167)
* umulqihi3 instruction pattern:         Standard Names.      (line 158)
* umulsidi3 instruction pattern:         Standard Names.      (line 158)
* unchanging:                            Flags.               (line 212)
* unchanging, in call_insn:              Flags.               (line 132)
* unchanging, in insn:                   Flags.               (line 109)
* unchanging, in reg and mem:            Flags.               (line  73)
* unchanging, in subreg:                 Flags.               (line  67)
* unchanging, in symbol_ref:             Flags.               (line 125)
* undefined behavior:                    Bug Criteria.        (line  17)
* undefined function value:              Bug Criteria.        (line  17)
* underscores in variables in macros:    Naming Types.        (line  21)
* underscores, avoiding (88k):           M88K Options.        (line  28)
* union, casting to a:                   Cast to Union.       (line   6)
* unions:                                Incompatibilities.   (line 151)
* unions, returning:                     Interface.           (line  10)
* UNIQUE_SECTION:                        Sections.            (line 131)
* UNIQUE_SECTION_P:                      Sections.            (line 124)
* UNITS_PER_WORD:                        Storage Layout.      (line  63)
* unknown pragmas, warning:              Warning Options.     (line 223)
* UNKNOWN_FLOAT_FORMAT:                  Storage Layout.      (line 375)
* unreachable code:                      Passes.              (line 117)
* unresolved references and -nodefaultlibs: Link Options.     (line  78)
* unresolved references and -nostdlib:   Link Options.        (line  78)
* unshare_all_rtl:                       Sharing.             (line  57)
* unsigned division:                     Arithmetic.          (line  92)
* unsigned greater than:                 Comparisons.         (line  67)
* unsigned less than:                    Comparisons.         (line  63)
* unsigned minimum and maximum:          Arithmetic.          (line 105)
* unsigned_fix:                          Conversions.         (line  63)
* unsigned_float:                        Conversions.         (line  53)
* unspec:                                Side Effects.        (line 238)
* unspec_volatile:                       Side Effects.        (line 238)
* untyped_call instruction pattern:      Standard Names.      (line 477)
* untyped_return instruction pattern:    Standard Names.      (line 527)
* use:                                   Side Effects.        (line 144)
* USE_C_ALLOCA:                          Config.              (line  79)
* USE_LOAD_POST_DECREMENT:               Costs.               (line 213)
* USE_LOAD_POST_INCREMENT:               Costs.               (line 208)
* USE_LOAD_PRE_DECREMENT:                Costs.               (line 223)
* USE_LOAD_PRE_INCREMENT:                Costs.               (line 218)
* USE_PROTOTYPES:                        Config.              (line 127)
* USE_STORE_POST_DECREMENT:              Costs.               (line 233)
* USE_STORE_POST_INCREMENT:              Costs.               (line 228)
* USE_STORE_PRE_DECREMENT:               Costs.               (line 243)
* USE_STORE_PRE_INCREMENT:               Costs.               (line 238)
* used:                                  Flags.               (line 152)
* used, in symbol_ref:                   Flags.               (line  91)
* USER_LABEL_PREFIX:                     Instruction Output.  (line 129)
* USG:                                   Config.              (line  14)
* V in constraint:                       Simple Constraints.  (line  34)
* V850 Options:                          V850 Options.        (line   6)
* VALID_MACHINE_DECL_ATTRIBUTE:          Misc.                (line 333)
* VALID_MACHINE_TYPE_ATTRIBUTE:          Misc.                (line 338)
* value after longjmp:                   Global Reg Vars.     (line  66)
* values, returned by functions:         Scalar Return.       (line   6)
* varargs implementation:                Varargs.             (line   6)
* varargs.h and RT PC:                   RT Options.          (line  25)
* variable addressability on the M32R/D: Variable Attributes. (line 175)
* variable alignment:                    Alignment.           (line   6)
* variable attributes:                   Variable Attributes. (line   6)
* variable number of arguments:          Macro Varargs.       (line   6)
* variable-length array scope:           Variable Length.     (line  21)
* variable-length arrays:                Variable Length.     (line   6)
* variables in specified registers:      Explicit Reg Vars.   (line   6)
* variables, local, in macros:           Naming Types.        (line  21)
* Vax calling convention:                Interoperation.      (line 249)
* VAX options:                           VAX Options.         (line   6)
* VAX_FLOAT_FORMAT:                      Storage Layout.      (line 372)
* VAXCRTL:                               VMS Misc.            (line  16)
* VIRTUAL_INCOMING_ARGS_REGNUM:          Regs and Memory.     (line  59)
* VIRTUAL_OUTGOING_ARGS_REGNUM:          Regs and Memory.     (line  87)
* VIRTUAL_STACK_DYNAMIC_REGNUM:          Regs and Memory.     (line  78)
* VIRTUAL_STACK_VARS_REGNUM:             Regs and Memory.     (line  69)
* VMS:                                   Config.              (line  17)
* VMS and case sensitivity:              VMS Misc.            (line  27)
* VMS and include files:                 Include Files and VMS.
                                                              (line   6)
* VMS installation:                      VMS Install.         (line   6)
* void pointers, arithmetic:             Pointer Arith.       (line   6)
* void, size of pointer to:              Pointer Arith.       (line   6)
* VOIDmode:                              Machine Modes.       (line  80)
* volatil:                               Flags.               (line 165)
* volatil, in insn:                      Flags.               (line 105)
* volatil, in mem:                       Flags.               (line  10)
* volatil, in reg:                       Flags.               (line  43)
* volatil, in symbol_ref:                Flags.               (line  96)
* volatile applied to function:          Function Attributes. (line   6)
* volatile memory references:            Flags.               (line 169)
* voting between constraint alternatives: Class Preferences.  (line   6)
* warning for comparison of signed and unsigned values: Warning Options.
                                                              (line 382)
* warning for overloaded virtual fn:     C++ Dialect Options. (line 343)
* warning for reordering of member initializers: C++ Dialect Options.
                                                              (line 293)
* warning for synthesized methods:       C++ Dialect Options. (line 363)
* warning for unknown pragmas:           Warning Options.     (line 223)
* warning messages:                      Warning Options.     (line   6)
* warnings vs errors:                    Warnings and Errors. (line   6)
* WCHAR_TYPE:                            Type Layout.         (line 116)
* WCHAR_TYPE_SIZE:                       Type Layout.         (line 124)
* weak attribute:                        Function Attributes. (line 193)
* which_alternative:                     Output Statement.    (line  54)
* whitespace:                            Incompatibilities.   (line 117)
* WIDEST_HARDWARE_FP_SIZE:               Type Layout.         (line  71)
* word_mode:                             Machine Modes.       (line 198)
* WORD_REGISTER_OPERATIONS:              Misc.                (line  60)
* WORD_SWITCH_TAKES_ARG:                 Driver.              (line  19)
* WORDS_BIG_ENDIAN:                      Storage Layout.      (line  28)
* WORDS_BIG_ENDIAN, effect on subreg:    Regs and Memory.     (line 132)
* X in constraint:                       Simple Constraints.  (line 111)
* x-HOST:                                Host Fragment.       (line   6)
* XCmode:                                Machine Modes.       (line  87)
* XCOFF_DEBUGGING_INFO:                  DBX Options.         (line  12)
* XEXP:                                  Accessors.           (line   6)
* XFmode:                                Machine Modes.       (line  56)
* XINT:                                  Accessors.           (line   6)
* xm-MACHINE.h:                          Config.              (line   6)
* xor:                                   Arithmetic.          (line 124)
* xor, canonicalization of:              Insn Canonicalizations.
                                                              (line  69)
* xorM3 instruction pattern:             Standard Names.      (line 145)
* XSTR:                                  Accessors.           (line   6)
* XVEC:                                  Accessors.           (line  41)
* XVECEXP:                               Accessors.           (line  48)
* XVECLEN:                               Accessors.           (line  44)
* XWINT:                                 Accessors.           (line   6)
* zero division on 88k:                  M88K Options.        (line 121)
* zero-length arrays:                    Zero Length.         (line   6)
* zero_extend:                           Conversions.         (line  29)
* zero_extendMN2 instruction pattern:    Standard Names.      (line 343)
* zero_extract:                          Bit Fields.          (line  30)
* zero_extract, canonicalization of:     Insn Canonicalizations.
                                                              (line  81)


